{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./resources/metronic/js/pages/custom/login/login-4.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","KTLogin","init","form","formSubmitUrl","formSubmitButton","KTUtil","getById","attr","FormValidation","formValidation","fields","login","validators","notEmpty","message","_LANG_","username_is_required","password","password_is_required","plugins","trigger","Trigger","submitButton","SubmitButton","bootstrap","Bootstrap","on","btnWait","setTimeout","btnRelease","utils","fetch","headers","$","method","dataType","params","querySelector","remember","then","response","token","status","Swal","fire","html","icon","buttonsStyling","showConfirmButton","timer","customClass","confirmButton","scrollTop","window","location","href","redirect","confirmButtonText","close","text","email","email_is_required","emailAddress","the_value_is_not_address_valid","loading_wait","sorry_looks_like_errors_detected","_handleFormForgot","passwordMeter","document","getElementById","randomNumber","min","max","Math","floor","random","pass_confirm","identical","compare","tpasswordStrength","PasswordStrength","field","minimalScore","onValidated","valid","score","console","log","style","width","backgroundColor","_handleFormResetForgot","jQuery","ready","click","this","prev","prop"],"mappings":"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","file":"/production/js/pages/custom/login/login-4.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 480);\n","\"use strict\";\r\n\r\n// Class Definition\r\nvar KTLogin = function() {\r\n    var _buttonSpinnerClasses = 'spinner spinner-right spinner-white pr-15';\r\n\r\n    var _handleFormSignin = function() {\r\n        var form = KTUtil.getById('kt_login_singin_form');\r\n        var formSubmitUrl = KTUtil.attr(form, 'action');\r\n        var formSubmitButton = KTUtil.getById('kt_login_singin_form_submit_button');\r\n\r\n        if (!form) {\r\n            return;\r\n        }\r\n\r\n        FormValidation\r\n            .formValidation(\r\n                form, {\r\n                    fields: {\r\n                        login: {\r\n                            validators: {\r\n                                notEmpty: {\r\n                                    message: _LANG_.username_is_required\r\n                                }\r\n                            }\r\n                        },\r\n                        password: {\r\n                            validators: {\r\n                                notEmpty: {\r\n                                    message: _LANG_.password_is_required\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    plugins: {\r\n                        trigger: new FormValidation.plugins.Trigger(),\r\n                        submitButton: new FormValidation.plugins.SubmitButton(),\r\n                        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\r\n                        bootstrap: new FormValidation.plugins.Bootstrap({\r\n                            //\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\r\n                            //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n            .on('core.form.valid', function() {\r\n\r\n                // Show loading state on button\r\n                KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, \"Please wait\");\r\n\r\n                // Simulate Ajax request\r\n                setTimeout(function() {\r\n                    KTUtil.btnRelease(formSubmitButton);\r\n                }, 2000);\r\n\r\n                // Form Validation & Ajax Submission: https://formvalidation.io/guide/examples/using-ajax-to-submit-the-form\r\n                FormValidation.utils.fetch(formSubmitUrl, {\r\n                    headers: {\r\n                        //'X-Requested-With': 'XMLHttpRequest',\r\n                        'X-CSRF-TOKEN': $('meta[name=\"X-CSRF-TOKEN\"]').attr('content'),\r\n                    },\r\n                    method: 'POST',\r\n                    dataType: 'json',\r\n                    params: {\r\n                        login: form.querySelector('[name=\"login\"]').value,\r\n                        password: form.querySelector('[name=\"password\"]').value,\r\n                        remember: form.querySelector('[name=\"remember\"]').value\r\n                    },\r\n                }).then(function(response) { // Return valid JSON\r\n                    // Release button\r\n\r\n                    KTUtil.btnRelease(formSubmitButton);\r\n\r\n                    $('meta[name=\"X-CSRF-TOKEN\"]').attr('content', response.token);\r\n\r\n                    if (response && typeof response === 'object' && response.status && response.status == 'success') {\r\n                        Swal.fire({\r\n                            html: response.message,\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            //confirmButtonText: _LANG_.close,\r\n                            showConfirmButton: false,\r\n                            timer: 1500,\r\n                            customClass: {\r\n                                confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                            }\r\n                        }).then(function() {\r\n                            KTUtil.scrollTop();\r\n                            window.location.href = response.redirect;\r\n                        });\r\n                    } else {\r\n                        Swal.fire({\r\n                            html: response.message,\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: _LANG_.close,\r\n                            customClass: {\r\n                                confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                            }\r\n                        }).then(function() {\r\n                            KTUtil.scrollTop();\r\n                        });\r\n                    }\r\n                });\r\n\r\n            })\r\n            .on('core.form.invalid', function() {\r\n                Swal.fire({\r\n                    text: \"Sorry, looks like there are some errors detected, please try again tttttt.\",\r\n                    icon: \"error\",\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: _LANG_.close,\r\n                    customClass: {\r\n                        confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                    }\r\n                }).then(function() {\r\n                    KTUtil.scrollTop();\r\n                });\r\n            });\r\n    }\r\n\r\n    var _handleFormForgot = function() {\r\n        var form = KTUtil.getById('kt_login_forgot_form');\r\n        var formSubmitUrl = KTUtil.attr(form, 'action');\r\n        var formSubmitButton = KTUtil.getById('kt_login_forgot_form_submit_button');\r\n\r\n        if (!form) {\r\n            return;\r\n        }\r\n\r\n        FormValidation\r\n            .formValidation(\r\n                form, {\r\n                    fields: {\r\n                        email: {\r\n                            validators: {\r\n                                notEmpty: {\r\n                                    message: _LANG_.email_is_required\r\n                                },\r\n                                emailAddress: {\r\n                                    message: _LANG_.the_value_is_not_address_valid\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    plugins: {\r\n                        trigger: new FormValidation.plugins.Trigger(),\r\n                        submitButton: new FormValidation.plugins.SubmitButton(),\r\n                        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\r\n                        bootstrap: new FormValidation.plugins.Bootstrap({\r\n                            //\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\r\n                            //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n            .on('core.form.valid', function() {\r\n                // Show loading state on button\r\n                KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, _LANG_.loading_wait);\r\n\r\n                // Simulate Ajax request\r\n                setTimeout(function() {\r\n                    KTUtil.btnRelease(formSubmitButton);\r\n                }, 2000);\r\n\r\n                // Form Validation & Ajax Submission: https://formvalidation.io/guide/examples/using-ajax-to-submit-the-form\r\n                FormValidation.utils.fetch(formSubmitUrl, {\r\n                    headers: {\r\n                        //'X-Requested-With': 'XMLHttpRequest',\r\n                        'X-CSRF-TOKEN': $('meta[name=\"X-CSRF-TOKEN\"]').attr('content'),\r\n                    },\r\n                    method: 'POST',\r\n                    dataType: 'json',\r\n                    params: {\r\n                        email: form.querySelector('[name=\"email\"]').value,\r\n                    },\r\n                }).then(function(response) { // Return valid JSON\r\n                    // Release button\r\n                    KTUtil.btnRelease(formSubmitButton);\r\n                    $('meta[name=\"X-CSRF-TOKEN\"]').attr('content', response.token);\r\n\r\n                    if (response && typeof response === 'object' && response.status && response.status == 'success') {\r\n                        Swal.fire({\r\n                            html: response.message,\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            //confirmButtonText: _LANG_.close,\r\n                            showConfirmButton: false,\r\n                            timer: 1500,\r\n                            customClass: {\r\n                                confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                            }\r\n                        }).then(function() {\r\n                            KTUtil.scrollTop();\r\n                            window.location.href = response.redirect;\r\n                        });\r\n                    } else {\r\n                        Swal.fire({\r\n                            html: response.message,\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: _LANG_.close,\r\n                            customClass: {\r\n                                confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                            }\r\n                        }).then(function() {\r\n                            KTUtil.scrollTop();\r\n                        });\r\n                    }\r\n                });\r\n\r\n            })\r\n            .on('core.form.invalid', function() {\r\n                Swal.fire({\r\n                    text: _LANG_.sorry_looks_like_errors_detected,\r\n                    icon: \"error\",\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: _LANG_.close,\r\n                    customClass: {\r\n                        confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                    }\r\n                }).then(function() {\r\n                    KTUtil.scrollTop();\r\n                });\r\n            });\r\n    }\r\n\r\n    var _handleFormResetForgot = function() {\r\n        var form = KTUtil.getById('kt_login_reset_forgot_form');\r\n        var formSubmitUrl = KTUtil.attr(form, 'action');\r\n        var formSubmitButton = KTUtil.getById('kt_login_reset_forgot_form_submit_button');\r\n\r\n        if (!form) {\r\n            return;\r\n        }\r\n\r\n        const passwordMeter = document.getElementById('passwordMeter');\r\n        const passwordMeter2 = document.getElementById('passwordMeter2');\r\n\r\n        const randomNumber = function(min, max) {\r\n            return Math.floor(Math.random() * (max - min + 1) + min);\r\n        };\r\n\r\n        FormValidation\r\n            .formValidation(\r\n                form, {\r\n                    fields: {\r\n                        email: {\r\n                            validators: {\r\n                                notEmpty: {\r\n                                    message: _LANG_.email_is_required\r\n                                },\r\n                                emailAddress: {\r\n                                    message: _LANG_.the_value_is_not_address_valid\r\n                                }\r\n                            }\r\n                        },\r\n                        password: {\r\n                            validators: {\r\n                                notEmpty: {\r\n                                    message: 'le champs est requis'\r\n                                }\r\n                            }\r\n                        },\r\n                        pass_confirm: {\r\n                            validators: {\r\n                                notEmpty: {\r\n                                    message: 'le champs est requis'\r\n                                },\r\n                                identical: {\r\n                                    compare: function() {\r\n                                        return form.querySelector('[name=\"password\"]').value;\r\n                                    },\r\n                                    message: 'Le mot de passe et la confirmation ne sont pas les mêmes',\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    plugins: {\r\n                        trigger: new FormValidation.plugins.Trigger(),\r\n                        submitButton: new FormValidation.plugins.SubmitButton(),\r\n                        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\r\n                        bootstrap: new FormValidation.plugins.Bootstrap({\r\n                            //\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\r\n                            //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\r\n                        }),\r\n                        tpasswordStrength: new FormValidation.plugins.PasswordStrength({\r\n                            field: 'password',\r\n                            message: 'Le mot de passe est très falble',\r\n                            minimalScore: 3,\r\n                            onValidated: function(valid, message, score) {\r\n                                console.log(score);\r\n                                console.log(message);\r\n                                switch (score) {\r\n                                    case 0:\r\n                                        passwordMeter.style.width = randomNumber(1, 20) + '%';\r\n                                        passwordMeter.style.backgroundColor = '#ff4136';\r\n                                    case 1:\r\n                                        passwordMeter.style.width = randomNumber(20, 40) + '%';\r\n                                        passwordMeter.style.backgroundColor = '#ff4136';\r\n                                        break;\r\n                                    case 2:\r\n                                        passwordMeter.style.width = randomNumber(40, 60) + '%';\r\n                                        passwordMeter.style.backgroundColor = '#ff4136';\r\n                                        message: 'bon';\r\n                                        break;\r\n                                    case 3:\r\n                                        passwordMeter.style.width = randomNumber(60, 80) + '%';\r\n                                        passwordMeter.style.backgroundColor = '#ffb700';\r\n                                        break;\r\n                                    case 4:\r\n                                        passwordMeter.style.width = '100%';\r\n                                        passwordMeter.style.backgroundColor = '#19a974';\r\n                                        break;\r\n                                    default:\r\n                                        break;\r\n                                }\r\n                            },\r\n                        }),\r\n                    }\r\n                }\r\n            )\r\n            .on('core.form.valid', function() {\r\n                // Show loading state on button\r\n                KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, _LANG_.loading_wait);\r\n\r\n                // Simulate Ajax request\r\n                setTimeout(function() {\r\n                    KTUtil.btnRelease(formSubmitButton);\r\n                }, 2000);\r\n\r\n                // Form Validation & Ajax Submission: https://formvalidation.io/guide/examples/using-ajax-to-submit-the-form\r\n                FormValidation.utils.fetch(formSubmitUrl, {\r\n                    headers: {\r\n                        //'X-Requested-With': 'XMLHttpRequest',\r\n                        'X-CSRF-TOKEN': $('meta[name=\"X-CSRF-TOKEN\"]').attr('content'),\r\n                    },\r\n                    method: 'POST',\r\n                    dataType: 'json',\r\n                    params: {\r\n                        token: form.querySelector('[name=\"token\"]').value,\r\n                        email: form.querySelector('[name=\"email\"]').value,\r\n                        password: form.querySelector('[name=\"password\"]').value,\r\n                        pass_confirm: form.querySelector('[name=\"pass_confirm\"]').value,\r\n                    },\r\n                }).then(function(response) { // Return valid JSON\r\n                    // Release button\r\n                    KTUtil.btnRelease(formSubmitButton);\r\n                    $('meta[name=\"X-CSRF-TOKEN\"]').attr('content', response.token);\r\n\r\n                    if (response && typeof response === 'object' && response.status && response.status == 'success') {\r\n                        Swal.fire({\r\n                            html: response.message,\r\n                            icon: \"success\",\r\n                            buttonsStyling: false,\r\n                            //confirmButtonText: _LANG_.close,\r\n                            showConfirmButton: false,\r\n                            timer: 1500,\r\n                            customClass: {\r\n                                confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                            }\r\n                        }).then(function() {\r\n                            KTUtil.scrollTop();\r\n                            window.location.href = response.redirect;\r\n                        });\r\n                    } else {\r\n                        Swal.fire({\r\n                            text: _LANG_.sorry_looks_like_errors_detected,\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: _LANG_.close,\r\n                            customClass: {\r\n                                confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                            }\r\n                        }).then(function() {\r\n                            KTUtil.scrollTop();\r\n                        });\r\n                    }\r\n                });\r\n\r\n            })\r\n            .on('core.form.invalid', function() {\r\n                Swal.fire({\r\n                    text: _LANG_.sorry_looks_like_errors_detected,\r\n                    icon: \"error\",\r\n                    buttonsStyling: false,\r\n                    confirmButtonText: _LANG_.close,\r\n                    customClass: {\r\n                        confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n                    }\r\n                }).then(function() {\r\n                    KTUtil.scrollTop();\r\n                });\r\n            });\r\n    }\r\n\r\n    // var _handleFormSignup = function() {\r\n    //     // Base elements\r\n    //     var wizardEl = KTUtil.getById('kt_login');\r\n    //     var form = KTUtil.getById('kt_login_signup_form');\r\n    //     var wizardObj;\r\n    //     var validations = [];\r\n\r\n    //     if (!form) {\r\n    //         return;\r\n    //     }\r\n\r\n    //     // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n    //     // Step 1\r\n    //     validations.push(FormValidation.formValidation(\r\n    //         form, {\r\n    //             fields: {\r\n    //                 fname: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'First name is required'\r\n    //                         }\r\n    //                     }\r\n    //                 },\r\n    //                 lname: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'Last Name is required'\r\n    //                         }\r\n    //                     }\r\n    //                 },\r\n    //                 phone: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'Phone is required'\r\n    //                         }\r\n    //                     }\r\n    //                 },\r\n    //                 email: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'Email is required'\r\n    //                         },\r\n    //                         emailAddress: {\r\n    //                             message: 'The value is not a valid email address'\r\n    //                         }\r\n    //                     }\r\n    //                 }\r\n    //             },\r\n    //             plugins: {\r\n    //                 trigger: new FormValidation.plugins.Trigger(),\r\n    //                 bootstrap: new FormValidation.plugins.Bootstrap()\r\n    //             }\r\n    //         }\r\n    //     ));\r\n\r\n    //     // Step 2\r\n    //     validations.push(FormValidation.formValidation(\r\n    //         form, {\r\n    //             fields: {\r\n    //                 address1: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'Address is required'\r\n    //                         }\r\n    //                     }\r\n    //                 },\r\n    //                 postcode: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'Postcode is required'\r\n    //                         }\r\n    //                     }\r\n    //                 },\r\n    //                 city: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'City is required'\r\n    //                         }\r\n    //                     }\r\n    //                 },\r\n    //                 state: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'State is required'\r\n    //                         }\r\n    //                     }\r\n    //                 },\r\n    //                 country: {\r\n    //                     validators: {\r\n    //                         notEmpty: {\r\n    //                             message: 'Country is required'\r\n    //                         }\r\n    //                     }\r\n    //                 }\r\n    //             },\r\n    //             plugins: {\r\n    //                 trigger: new FormValidation.plugins.Trigger(),\r\n    //                 bootstrap: new FormValidation.plugins.Bootstrap()\r\n    //             }\r\n    //         }\r\n    //     ));\r\n\r\n\r\n    //     // Initialize form wizard\r\n    //     wizardObj = new KTWizard(wizardEl, {\r\n    //         startStep: 1, // initial active step number\r\n    //         clickableSteps: false // to make steps clickable this set value true and add data-wizard-clickable=\"true\" in HTML for class=\"wizard\" element\r\n    //     });\r\n\r\n    //     // Validation before going to next page\r\n    //     wizardObj.on('beforeNext', function(wizard) {\r\n    //         validations[wizard.getStep() - 1].validate().then(function(status) {\r\n    //             if (status == 'Valid') {\r\n    //                 wizardObj.goNext();\r\n    //                 KTUtil.scrollTop();\r\n    //             } else {\r\n    //                 Swal.fire({\r\n    //                     text: \"Sorry, looks like there are some errors detected, please try again kkkkkk.\",\r\n    //                     icon: \"error\",\r\n    //                     buttonsStyling: false,\r\n    //                     confirmButtonText: _LANG_.close,\r\n    //                     customClass: {\r\n    //                         confirmButton: \"btn font-weight-bold btn-light-primary\"\r\n    //                     }\r\n    //                 }).then(function() {\r\n    //                     KTUtil.scrollTop();\r\n    //                 });\r\n    //             }\r\n    //         });\r\n\r\n    //         wizardObj.stop(); // Don't go to the next step\r\n    //     });\r\n\r\n    //     // Change event\r\n    //     wizardObj.on('change', function(wizard) {\r\n    //         KTUtil.scrollTop();\r\n    //     });\r\n    // }\r\n\r\n    // Public Functions\r\n    return {\r\n        init: function() {\r\n            _handleFormSignin();\r\n            _handleFormForgot();\r\n            _handleFormResetForgot();\r\n            //_handleFormSignup();\r\n        }\r\n    };\r\n}();\r\n\r\n// Class Initialization\r\njQuery(document).ready(function() {\r\n    KTLogin.init();\r\n\r\n    $('.show-password').click(function() {\r\n        if ($(this).prev('input').prop('type') == 'password') {\r\n            //Si c'est un input type password\r\n            $(this).prev('input').prop('type', 'text');\r\n            $(this).html('<i class=\"far fa-eye-slash\"></i>');\r\n        } else {\r\n            //Sinon\r\n            $(this).prev('input').prop('type', 'password');\r\n            $(this).html('<i class=\"far fa-eye\"></i>');\r\n        }\r\n    });\r\n\r\n});"],"sourceRoot":""}