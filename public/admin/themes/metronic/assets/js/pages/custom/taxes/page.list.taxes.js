/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 125);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/custom/taxes/page.list.taxes.js":
/*!*********************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/taxes/page.list.taxes.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar KTApptaxesListDatatable = function () {\n  var t;\n  return {\n    init: function init() {\n      t = $(\"#kt_apps_taxes_list_datatable\").KTDatatable({\n        data: {\n          type: \"remote\",\n          source: {\n            read: {\n              url: current_url + \"/list\",\n              method: 'GET',\n              params: _defineProperty({}, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content'))\n            }\n          },\n          pageSize: 10,\n          serverPaging: !0,\n          serverFiltering: !0,\n          serverSorting: !0\n        },\n        translate: {\n          records: {\n            processing: _LANG_.loading_wait,\n            noRecords: _LANG_.no_record_found\n          },\n          toolbar: {\n            pagination: {\n              items: {\n                \"default\": {\n                  first: _LANG_.first,\n                  prev: _LANG_.previous,\n                  next: _LANG_.next,\n                  last: _LANG_.last,\n                  more: _LANG_.more_pages,\n                  input: _LANG_.page_number,\n                  select: _LANG_.select_page_size,\n                  all: _LANG_.all\n                },\n                info: _LANG_.showing + ' {{start}} - {{end}} of {{total}}'\n              }\n            }\n          }\n        },\n        layout: {\n          scroll: !1,\n          footer: !1\n        },\n        sortable: !0,\n        pagination: !0,\n        search: {\n          input: $(\"#kt_subheader_search_form\"),\n          delay: 400\n        },\n        rows: {\n          beforeTemplate: function beforeTemplate(row, data, index) {\n            if (data.active == '0') {\n              row.addClass('notactive');\n            }\n          }\n        },\n        columns: [{\n          field: \"id\",\n          title: \"#\",\n          sortable: !1,\n          width: 20,\n          selector: {\n            \"class\": \"kt-checkbox--solid\"\n          },\n          textAlign: \"center\"\n        }, {\n          field: \"name\",\n          title: _LANG_.name,\n          width: 200,\n          template: function template(t) {\n            return '<a href=\"' + startUrl + '/international/taxes/edit/' + t.id + '\" class=\"capitalize text-dark-75 font-weight-bolder font-size-lg mb-0\">' + t.name + '</a>';\n          }\n        }, {\n          field: \"rate\",\n          title: _LANG_.taux,\n          type: \"rate\"\n        }, {\n          field: \"active\",\n          title: _LANG_.etat,\n          type: \"active\",\n          template: function template(t) {\n            if (t.active == 1) {\n              var active = 'btn-light-success';\n            } else {\n              var active = 'btn-light-danger';\n            }\n\n            if (t.active == 1) {\n              var textActive = _LANG_.active;\n            } else {\n              var textActive = _LANG_.desactive;\n            }\n\n            if (t.active == 1) {\n              var idActive = 0;\n            } else {\n              var idActive = 1;\n            }\n\n            var template = '<a href=\"javascript:;\" data-statut=\"' + idActive + '\" data-id=\"' + t.id + '\" class=\"actionActive btn btn-bold btn-sm btn-font-sm ' + active + '\">' + textActive + '</a>';\n            return template;\n          }\n        }, {\n          field: \"created_at\",\n          title: _LANG_.date_create,\n          type: \"date\",\n          //width: 100,\n          format: \"MM/DD/YYYY\",\n          template: function template(t) {\n            return '<div class=\"font-weight-bolder text-primary mb-0\">' + t.date_create_format + '</div>';\n          }\n        }, {\n          field: \"Actions\",\n          width: 80,\n          title: \"Actions\",\n          sortable: !1,\n          autoHide: !1,\n          overflow: \"visible\",\n          template: function template(t) {\n            //return '\\t\\t\\t\\t\\t\\t\\t<div class=\"dropdown\">\\t\\t\\t\\t\\t\\t\\t\\t<a href=\"javascript:;\" class=\"btn btn-sm btn-clean btn-icon btn-icon-md\" data-toggle=\"dropdown\">\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\"flaticon-more-1\"></i>\\t\\t\\t\\t\\t\\t\\t\\t</a>\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"dropdown-menu dropdown-menu-right\">\\t\\t\\t\\t\\t\\t\\t\\t\\t<ul class=\"kt-nav\">\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<li class=\"navi-item\">\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<a href=\"#\" data-controller=\"roles\" data-action=\"actionView\" data-value=\"' + t.id + '\" class=\"actioncontroller navi-link\">\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\"navi-link-icon flaticon2-expand\"></i>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"navi-link-text\">' + _LANG_.view + '</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</a>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</li>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<li class=\"navi-item\">\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<a href=\"' + basePath + segementAdmin + '/taxes/detail/' + t.id + '\" class=\"navi-link\">\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\"navi-link-icon flaticon2-contract\"></i>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"navi-link-text\">' + _LANG_.edit + '</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</a>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</li>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<li class=\"navi-item\">\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<a href=\"#\" data-id=\"' + t.id + '\" class=\"deleterowKtdatatable navi-link\">\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<i class=\"navi-link-icon flaticon2-trash\"></i>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"navi-link-text\">' + _LANG_.delete + '</span>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</a>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</li>\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</ul>\\t\\t\\t\\t\\t\\t\\t\\t</div>\\t\\t\\t\\t\\t\\t\\t</div>\\t\\t\\t\\t\\t\\t'\n            var template = '<div class=\"dropdown\">\\\n                        <a href=\"javascript:;\" class=\"btn btn-sm btn-clean btn-icon btn-icon-md\" data-toggle=\"dropdown\">\\\n                        <i class=\"flaticon-more-1\"></i></a>\\\n                        <div class=\"dropdown-menu dropdown-menu-right\">\\\n                        <ul class=\"navi flex-column navi-hover py-2\">\\\n                        <li class=\"navi-item\">\\\n                        <a href=\"' + startUrl + '/international/taxes/edit/' + t.id + '\" class=\"navi-link\">\\\n                        <span class=\"navi-icon\"><i class=\" flaticon2-contract\"></i></span>\\\n                        <span class=\"navi-text\">' + _LANG_.edit + '</span>\\\n                        </a></li>';\n\n            if (t.id != '1') {\n              template += ' <li class=\"navi-item\">\\\n                            <a href=\"#\" data-id=\"' + t.id + '\" class=\"deleterowKtdatatable navi-link\">\\\n                            <span class=\"navi-icon\"><i class=\" flaticon2-trash\"></i></span>\\\n                            <span class=\"navi-text\">' + _LANG_[\"delete\"] + '</span>\\\n                            </a>\\\n                            </li>';\n            }\n\n            template += ' </ul></div></div>';\n            return template;\n          }\n        }]\n      }), $(\"#kt_form_status\").on(\"change\", function () {\n        t.search($(this).val().toLowerCase(), \"Status\");\n      }), t.on(\"datatable-on-check datatable-on-uncheck datatable-on-layout-updated\", function (e) {\n        var a = t.rows(\".datatable-row-active\").nodes().length;\n        $(\"#kt_subheader_group_selected_rows\").html(a), a > 0 ? ($(\"#kt_subheader_search\").addClass(\"hidden\"), $(\"#kt_subheader_group_actions\").removeClass(\"hidden\")) : ($(\"#kt_subheader_search\").removeClass(\"hidden\"), $(\"#kt_subheader_group_actions\").addClass(\"hidden\"));\n      }), $(\"#kt_datatable_records_fetch_modal\").on(\"show.bs.modal\", function (e) {\n        var a = new KTDialog({\n          type: \"loader\",\n          placement: \"top center\",\n          message: _LANG_.loading + \"...\"\n        });\n        a.show(), setTimeout(function () {\n          a.hide();\n        }, 1e3);\n\n        for (var n = t.rows(\".datatable-row-active\").nodes().find('.checkbox-single > [type=\"checkbox\"]').map(function (t, e) {\n          return $(e).val();\n        }), s = document.createDocumentFragment(), l = 0; l < n.length; l++) {\n          var i = document.createElement(\"li\");\n          i.setAttribute(\"data-id\", n[l]), i.innerHTML = _LANG_.selected_row_id + \": \" + n[l], s.appendChild(i);\n        }\n\n        $(e.target).find(\"#kt_apps_user_fetch_records_selected\").append(s);\n      }).on(\"hide.bs.modal\", function (t) {\n        $(t.target).find(\"#kt_apps_user_fetch_records_selected\").empty();\n      }), $(\"#kt_subheader_group_actions_status_change\").on(\"click\", \"[data-toggle='status-change']\", function (event) {\n        event.preventDefault();\n        var e = $(this).find(\".navi-link-text\").html(),\n            st = $(this).find(\".navi-link-text\").data('status'),\n            a = t.rows(\".datatable-row-active\").nodes().find('.checkbox-single > [type=\"checkbox\"]').map(function (t, e) {\n          return {\n            id: $(e).val(),\n            active: st\n          };\n        });\n        a.length > 0 && swal.fire({\n          buttonsStyling: !1,\n          html: _LANG_.are_you_sure_update + \" \" + a.length + \" \" + _LANG_.selected_records_status_to + \" \" + e + \" ?\",\n          type: \"primary\",\n          confirmButtonText: _LANG_.yes_update + \"!\",\n          confirmButtonClass: \"btn btn-sm btn-bold btn-dark\",\n          showCancelButton: !0,\n          cancelButtonText: _LANG_.no_cancel,\n          cancelButtonClass: \"btn btn-sm btn-bold btn-default\"\n        }).then(function (t) {\n          if (t.value) {\n            var _data;\n\n            $.ajax({\n              type: 'POST',\n              url: current_url + \"/ajaxUpdate\",\n              data: (_data = {}, _defineProperty(_data, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data, \"value\", a.get()), _data),\n              dataType: \"json\",\n              success: function success(result, status, xhr) {\n                if (xhr.status == 200) {\n                  $.notify({\n                    title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n                    message: result.success.message ? result.success.message : result.error.message\n                  }, {\n                    type: result.success.message ? 'success' : 'warning'\n                  });\n                  $(\"#kt_apps_taxes_list_datatable\").KTDatatable().reload();\n                }\n              }\n            });\n          } else {\n            $.notify({\n              title: _LANG_.cancelled,\n              message: _LANG_.your_seleted_records_statuses_have_not_been_updated\n            }, {\n              type: 'primary'\n            });\n          }\n        });\n      }), $(\"#kt_subheader_group_actions_delete_all\").on(\"click\", function () {\n        var e = t.rows(\".datatable-row-active\").nodes().find('.checkbox-single > [type=\"checkbox\"]').map(function (t, e) {\n          return $(e).val();\n        });\n        e.length > 0 && swal.fire({\n          buttonsStyling: !1,\n          text: _LANG_.are_you_sure_delete + \" \" + e.length + \" \" + _LANG_.selected_records + \" ?\",\n          type: \"error\",\n          confirmButtonText: _LANG_.yes_delete + ' !',\n          confirmButtonClass: \"btn btn-sm btn-bold btn-danger\",\n          showCancelButton: !0,\n          cancelButtonText: _LANG_.no_cancel,\n          cancelButtonClass: \"btn btn-sm btn-bold btn-dark\"\n        }).then(function (t) {\n          if (t.value) {\n            var _data2;\n\n            var selected = e.get();\n            $.ajax({\n              type: 'DELETE',\n              url: current_url + \"/delete\",\n              data: (_data2 = {}, _defineProperty(_data2, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data2, \"id\", selected), _data2),\n              dataType: \"json\",\n              success: function success(result, status, xhr) {\n                //Success Message\n                if (xhr.status == 200) {\n                  var kt_subheader_total = $('.kt_subheader_total').text();\n                  $('.kt_subheader_total').html(kt_subheader_total - selected.length);\n                  $.notify({\n                    title: result.success.message ? _LANG_.deleted + \"!\" : _LANG_.warning + \"!\",\n                    message: result.success.message ? result.success.message : result.error.message\n                  }, {\n                    type: result.success.message ? 'success' : 'warning'\n                  });\n                  $(\"#kt_apps_taxes_list_datatable\").KTDatatable().reload();\n                }\n              }\n            });\n          } else {\n            $.notify({\n              title: _LANG_.deleted,\n              message: _LANG_.your_selected_records_have_not_been_deleted\n            }, {\n              type: 'info'\n            });\n          }\n        });\n      }), t.on(\"datatable-on-layout-updated\", function () {});\n    }\n  };\n}();\n\nKTUtil.ready(function () {\n  KTApptaxesListDatatable.init(); //Update\n\n  $(document).on(\"click\", \".actionActive\", function (e) {\n    var _data3;\n\n    e.preventDefault();\n    var statut = $(this).attr('data-statut');\n    var id = $(this).attr('data-id');\n    var value = [];\n    $.ajax({\n      type: 'POST',\n      url: current_url + \"/ajaxUpdate\",\n      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n      data: (_data3 = {}, _defineProperty(_data3, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data3, \"value\", [{\n        id: id,\n        active: statut\n      }]), _data3),\n      dataType: \"json\",\n      success: function success(result, status, xhr) {\n        if (xhr.status == 200) {\n          $.notify({\n            title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n            message: result.success.message ? result.success.message : result.error.message\n          }, {\n            type: result.success.message ? 'success' : 'warning'\n          });\n          $(\"#kt_apps_taxes_list_datatable\").KTDatatable().reload();\n        }\n      }\n    });\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/taxes/page.list.taxes.js\n");

/***/ }),

/***/ 125:
/*!***************************************************************************!*\
  !*** multi ./resources/metronic/js/pages/custom/taxes/page.list.taxes.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/spreadci4/public/admin/themes/metronic/resources/metronic/js/pages/custom/taxes/page.list.taxes.js */"./resources/metronic/js/pages/custom/taxes/page.list.taxes.js");


/***/ })

/******/ });