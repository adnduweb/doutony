/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 119);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/custom/logs/page.list.traffics.js":
/*!***********************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/logs/page.list.traffics.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar KTAppLogsTrafficListDatatable = function () {\n  var t;\n  return {\n    init: function init() {\n      var _params;\n\n      t = $(\"#kt_apps_logsTraffic_list_datatable\").KTDatatable({\n        data: {\n          type: \"remote\",\n          source: {\n            read: {\n              url: current_url + \"/list\",\n              method: 'GET',\n              params: (_params = {}, _defineProperty(_params, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_params, \"model\", '\\\\Adnduweb\\\\Ci4Core\\\\Models\\\\LogModel'), _defineProperty(_params, \"handle\", 'traffic'), _params)\n            }\n          },\n          pageSize: 10,\n          serverPaging: !0,\n          serverFiltering: !0,\n          serverSorting: !0\n        },\n        translate: {\n          records: {\n            processing: _LANG_.loading_wait,\n            noRecords: _LANG_.no_record_found\n          },\n          toolbar: {\n            pagination: {\n              items: {\n                \"default\": {\n                  first: _LANG_.first,\n                  prev: _LANG_.previous,\n                  next: _LANG_.next,\n                  last: _LANG_.last,\n                  more: _LANG_.more_pages,\n                  input: _LANG_.page_number,\n                  select: _LANG_.select_page_size,\n                  all: _LANG_.all\n                },\n                info: _LANG_.showing + ' {{start}} - {{end}} of {{total}}'\n              }\n            }\n          }\n        },\n        layout: {\n          scroll: !1,\n          footer: !1\n        },\n        sortable: !0,\n        pagination: !0,\n        search: {\n          input: $(\"#kt_subheader_search_form\"),\n          delay: 400\n        },\n        rows: {\n          beforeTemplate: function beforeTemplate(row, data, index) {\n            if (data.active == '0') {\n              row.addClass('notactive');\n            }\n          }\n        },\n        columns: [{\n          field: \"id\",\n          title: \"#\",\n          sortable: !1,\n          width: 20,\n          selector: {\n            \"class\": \"kt-checkbox--solid\"\n          },\n          textAlign: \"center\"\n        }, {\n          field: \"ip_addressLong\",\n          title: _LANG_.ip_address,\n          width: 200,\n          template: function template(t) {\n            return '<div class=\"text-dark-75 font-weight-bolder font-size-lg mb-0\">' + t.ip_address + '</div>';\n          }\n        }, {\n          field: \"user_agent_traite\",\n          title: _LANG_.user_agent,\n          type: \"user_agent_traite\",\n          sortable: !1 //width: 100,\n\n        }, {\n          field: \"username\",\n          title: _LANG_.user_id,\n          type: \"user_id\",\n          sortable: !1 //width: 100,\n\n        }, {\n          field: \"path\",\n          title: _LANG_.path,\n          type: \"path\",\n          template: function template(t) {\n            var query = t.query != '' ? t.query : 'nc';\n            var fragment = t.fragment != '' ? t.fragment : 'nc';\n            return '<div class=\"kt-user-card-v2\">   <div class=\"kt-user-card-v2__details\"><span class=\"kt-user-card-v2__name\">' + t.path + '</span><span class=\"kt-user-card-v2__email\">' + query + ' | ' + fragment + '</span></div></div>';\n          } //width: 100,\n\n        }, {\n          field: \"views\",\n          title: _LANG_.views,\n          type: \"views\" //width: 100,\n\n        }, {\n          field: \"updated_at\",\n          title: _LANG_.date_create,\n          type: \"date\",\n          format: \"MM/DD/YYYY H:i:s\",\n          template: function template(t) {\n            return '<div class=\"font-weight-bolder text-primary mb-0\">' + t.date_update_format + '</div>';\n          }\n        }]\n      }), $(\"#kt_form_status\").on(\"change\", function () {\n        t.search($(this).val().toLowerCase(), \"Status\");\n      }), t.on(\"datatable-on-check datatable-on-uncheck datatable-on-layout-updated\", function (e) {\n        var a = t.rows(\".datatable-row-active\").nodes().length;\n        $(\"#kt_subheader_group_selected_rows\").html(a), a > 0 ? ($(\"#kt_subheader_search\").addClass(\"hidden\"), $(\"#kt_subheader_group_actions\").removeClass(\"hidden\")) : ($(\"#kt_subheader_search\").removeClass(\"hidden\"), $(\"#kt_subheader_group_actions\").addClass(\"hidden\"));\n      }), $(\"#kt_datatable_records_fetch_modal\").on(\"show.bs.modal\", function (e) {\n        var a = new KTDialog({\n          type: \"loader\",\n          placement: \"top center\",\n          message: _LANG_.loading + \"...\"\n        });\n        a.show(), setTimeout(function () {\n          a.hide();\n        }, 1e3);\n\n        for (var n = t.rows(\".datatable-row-active\").nodes().find('.checkbox-single > [type=\"checkbox\"]').map(function (t, e) {\n          return $(e).val();\n        }), s = document.createDocumentFragment(), l = 0; l < n.length; l++) {\n          var i = document.createElement(\"li\");\n          i.setAttribute(\"data-id\", n[l]), i.innerHTML = _LANG_.selected_row_id + \": \" + n[l], s.appendChild(i);\n        }\n\n        $(e.target).find(\"#kt_apps_user_fetch_records_selected\").append(s);\n      }).on(\"hide.bs.modal\", function (t) {\n        $(t.target).find(\"#kt_apps_user_fetch_records_selected\").empty();\n      }), $(\"#kt_subheader_group_actions_status_change\").on(\"click\", \"[data-toggle='status-change']\", function (event) {\n        event.preventDefault();\n        var e = $(this).find(\".kt-nav__link-text\").html(),\n            st = $(this).find(\".kt-nav__link-text\").data('status'),\n            a = t.rows(\".datatable-row-active\").nodes().find('.checkbox-single > [type=\"checkbox\"]').map(function (t, e) {\n          return $(e).val();\n        });\n        a.length > 0 && swal.fire({\n          buttonsStyling: !1,\n          html: _LANG_.are_you_sure_update + \" \" + a.length + \" \" + _LANG_.selected_records_status_to + \" \" + e + \" ?\",\n          type: \"primary\",\n          confirmButtonText: _LANG_.yes_update + \"!\",\n          confirmButtonClass: \"btn btn-sm btn-bold btn-dark\",\n          showCancelButton: !0,\n          cancelButtonText: _LANG_.no_cancel,\n          cancelButtonClass: \"btn btn-sm btn-bold btn-default\"\n        }).then(function (t) {\n          if (t.value) {\n            $.ajax({\n              type: 'POST',\n              url: basePath + segementAdmin + \"/sp-admin-ajax\",\n              data: {\n                ajax: true,\n                controller: 'AdminLogController',\n                action: 'updateTraffic',\n                value: {\n                  selected: a.get(),\n                  active: st\n                },\n                module: false\n              },\n              dataType: \"json\",\n              success: function success(result, status, xhr) {\n                if (xhr.status == 200) {\n                  $.notify({\n                    title: _LANG_.updated + \"!\",\n                    message: result.message\n                  }, {\n                    type: 'success'\n                  });\n                  $(\"#kt_apps_logsTraffic_list_datatable\").KTDatatable().reload();\n                }\n              }\n            });\n          } else {\n            $.notify({\n              title: _LANG_.cancelled,\n              message: _LANG_.your_seleted_records_statuses_have_not_been_updated\n            }, {\n              type: 'info',\n              placement: {\n                from: 'bottom',\n                align: 'center'\n              }\n            });\n          }\n        });\n      }), $(\"#kt_subheader_group_actions_delete_all\").on(\"click\", function () {\n        var e = t.rows(\".datatable-row-active\").nodes().find('.checkbox-single > [type=\"checkbox\"]').map(function (t, e) {\n          return $(e).val();\n        });\n        e.length > 0 && swal.fire({\n          buttonsStyling: !1,\n          text: _LANG_.are_you_sure_delete + \" \" + e.length + \" \" + _LANG_.selected_records + \" ?\",\n          type: \"error\",\n          confirmButtonText: _LANG_.yes_delete + ' !',\n          confirmButtonClass: \"btn btn-sm btn-bold btn-danger\",\n          showCancelButton: !0,\n          cancelButtonText: _LANG_.no_cancel,\n          cancelButtonClass: \"btn btn-sm btn-bold btn-dark\"\n        }).then(function (t) {\n          if (t.value) {\n            var selected = e.get();\n            $.ajax({\n              type: 'POST',\n              url: basePath + segementAdmin + \"/sp-admin-ajax\",\n              data: {\n                ajax: true,\n                controller: 'AdminLogController',\n                action: 'deleteTraffic',\n                value: {\n                  selected: selected\n                },\n                module: false\n              },\n              dataType: \"json\",\n              success: function success(result, status, xhr) {\n                //Success Message\n                if (xhr.status == 200) {\n                  var kt_subheader_total = $('.kt_subheader_total').text();\n                  $('.kt_subheader_total').html(kt_subheader_total - selected.length);\n                  $.notify({\n                    title: _LANG_.deleted + \"!\",\n                    message: result.message\n                  }, {\n                    type: result.type\n                  });\n                  $(\"#kt_apps_logsTraffic_list_datatable\").KTDatatable().reload();\n                }\n              }\n            });\n          } else {\n            $.notify({\n              title: _LANG_.deleted,\n              message: _LANG_.your_selected_records_have_not_been_deleted\n            }, {\n              type: 'primary'\n            });\n          }\n        });\n      }), t.on(\"datatable-on-layout-updated\", function () {});\n    }\n  };\n}();\n\nKTUtil.ready(function () {\n  KTAppLogsTrafficListDatatable.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/logs/page.list.traffics.js\n");

/***/ }),

/***/ 119:
/*!*****************************************************************************!*\
  !*** multi ./resources/metronic/js/pages/custom/logs/page.list.traffics.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/spreadci4/public/admin/themes/metronic/resources/metronic/js/pages/custom/logs/page.list.traffics.js */"./resources/metronic/js/pages/custom/logs/page.list.traffics.js");


/***/ })

/******/ });