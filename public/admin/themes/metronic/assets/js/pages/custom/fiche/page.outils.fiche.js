/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 112);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/custom/fiche/page.outils.fiche.js":
/*!***********************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/fiche/page.outils.fiche.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Class Definition\nvar KTform = function () {\n  var _buttonSpinnerClasses = 'spinner spinner-right spinner-white pr-15';\n\n  var _handleFormUser = function _handleFormUser() {\n    var form = KTUtil.getById('kt_apps_fichecompte-personnel_form');\n    var formSubmitUrl = KTUtil.attr(form, 'action');\n    var formSubmitButton = $('.kt_form_submit_utilisateurs');\n\n    if (!form) {\n      return;\n    }\n\n    var passwordMeter = document.getElementById('passwordMeter');\n\n    var randomNumber = function randomNumber(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n\n    FormValidation.formValidation(form, {\n      fields: {\n        username: {\n          validators: {\n            notEmpty: {\n              message: _LANG_.champs_is_required\n            }\n          }\n        },\n        firstname: {\n          validators: {\n            notEmpty: {\n              message: _LANG_.champs_is_required\n            }\n          }\n        },\n        lastname: {\n          validators: {\n            notEmpty: {\n              message: _LANG_.champs_is_required\n            }\n          }\n        },\n        email: {\n          validators: {\n            notEmpty: {\n              message: _LANG_.email_is_required\n            },\n            emailAddress: {\n              message: _LANG_.the_value_is_not_address_valid\n            }\n          }\n        },\n        password: {\n          validators: {\n            different: {\n              message: _LANG_.password_cannot_be_the_same_as_username,\n              compare: function compare() {\n                return form.querySelector('[name=\"username\"]').value;\n              }\n            }\n          }\n        },\n        pass_confirm: {\n          validators: {\n            identical: {\n              compare: function compare() {\n                return form.querySelector('[name=\"password\"]').value;\n              },\n              message: _LANG_.password_not_ecal_pass_confirm\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        passwordStrength: new FormValidation.plugins.PasswordStrength({\n          field: 'password',\n          message: _LANG_.the_password_is_weak,\n          minimalScore: 3,\n          onValidated: function onValidated(valid, message, score) {\n            switch (score) {\n              case 0:\n                passwordMeter.style.width = randomNumber(1, 20) + '%';\n                passwordMeter.style.backgroundColor = '#ff4136';\n                break;\n\n              case 1:\n                passwordMeter.style.width = randomNumber(20, 40) + '%';\n                passwordMeter.style.backgroundColor = '#ff4136';\n                break;\n\n              case 2:\n                passwordMeter.style.width = randomNumber(40, 60) + '%';\n                passwordMeter.style.backgroundColor = '#ff4136';\n                break;\n\n              case 3:\n                passwordMeter.style.width = randomNumber(60, 80) + '%';\n                passwordMeter.style.backgroundColor = '#ffb700';\n                break;\n\n              case 4:\n                passwordMeter.style.width = '100%';\n                passwordMeter.style.backgroundColor = '#19a974';\n                break;\n\n              default:\n                break;\n            }\n          }\n        })\n      }\n    }).on('core.form.valid', function () {\n      $(form).submit();\n    }).on('core.form.invalid', function (response) {\n      if (response.error == true) {\n        $(form).before(response.message);\n      }\n    });\n  }; // Public Functions\n\n\n  return {\n    init: function init() {\n      _handleFormUser(); //_handleFormSignup();\n\n    }\n  };\n}(); // Class Initialization\n\n\njQuery(document).ready(function () {\n  KTform.init();\n});\n$(document).on(\"click\", '.generer_mot_passe', function (e) {\n  $.post(baseController + \"/getPassword\", _defineProperty({}, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), function (response, status) {\n    //csrf_hash = response.csrf_token;\n    if (response.error == false) {\n      $('.pass_confirm').val('');\n      $('.datapassword').val('');\n      $('#password').html('');\n      $('.datapassword').val(response.success.password);\n      $('.pass_confirm').val(response.success.password);\n      $('#password').html(response.success.password);\n    }\n  });\n});\n$('.show-password').click(function () {\n  if ($(this).prev('input').prop('type') == 'password') {\n    //Si c'est un input type password\n    $(this).prev('input').prop('type', 'text');\n    $(this).html('<i class=\"far fa-eye-slash\"></i>');\n  } else {\n    //Sinon\n    $(this).prev('input').prop('type', 'password');\n    $(this).html('<i class=\"far fa-eye\"></i>');\n  }\n});\nvar input_phone = document.querySelector(\"#phone\"),\n    errorMsgPhoneFixe = document.querySelector(\".invalid-feedback-phone\"); //intlTelInput(input_mobile);\n// here, the index maps to the error code returned from getValidationError - see readme\n\nvar errorMap = [\"Invalid number\", \"Invalid country code\", \"Too short\", \"Too long\", \"Invalid number\"]; // initialise plugin\n\nvar iti_phoneFixe = intlTelInput(input_phone, {\n  initialCountry: \"auto\",\n  allowDropdown: true,\n  geoIpLookup: function geoIpLookup(callback) {\n    $.get('https://ipinfo.io', function () {}, \"jsonp\").always(function (resp) {\n      var countryCode = resp && resp.country ? resp.country : \"\";\n      callback(countryCode);\n    });\n  },\n  hiddenInput: \"full_phone\",\n  utilsScript: utils\n});\n\nvar resetPhoneFixe = function resetPhoneFixe() {\n  input_phone.classList.remove(\"error\");\n  errorMsgPhoneFixe.innerHTML = \"\";\n  errorMsgPhoneFixe.classList.add(\"hide\"); //validMsg.classList.add(\"hide\");\n}; // on blur: validate\n\n\ninput_phone.addEventListener('blur', function () {\n  resetPhoneFixe();\n\n  if (input_phone.value.trim()) {\n    if (!iti_phoneFixe.isValidNumber()) {\n      input_phone.classList.add(\"error\");\n      var errorCode = iti_phoneFixe.getValidationError();\n      errorMsgPhoneFixe.innerHTML = errorMap[errorCode];\n      errorMsgPhoneFixe.classList.remove(\"hide\");\n    }\n  }\n});\ninput_phone.addEventListener(\"countrychange\", function (e, countryData) {\n  //var currentMask = e.currentTarget.placeholder;\n  var currentMask = $(this).attr('placeholder').replace(/[0-9+]/ig, '9');\n  $(this).attr('placeholder', currentMask);\n  $(input_phone).inputmask({\n    mask: currentMask,\n    keepStatic: true\n  });\n});\ninput_phone.addEventListener('change', resetPhoneFixe);\ninput_phone.addEventListener('keyup', resetPhoneFixe);\nvar input_phone_mobile = document.querySelector(\"#phone_mobile\"),\n    errorMsgPhoneMobile = document.querySelector(\".invalid-feedback-phone_mobile\"); // initialise plugin\n\nvar iti_phoneMobile = intlTelInput(input_phone_mobile, {\n  initialCountry: \"auto\",\n  geoIpLookup: function geoIpLookup(callback) {\n    $.get('https://ipinfo.io', function () {}, \"jsonp\").always(function (resp) {\n      var countryCode = resp && resp.country ? resp.country : \"\";\n      callback(countryCode);\n    });\n  },\n  hiddenInput: \"full_phone_mobile\",\n  utilsScript: utils\n});\n\nvar resetPhoneMobile = function resetPhoneMobile() {\n  input_phone_mobile.classList.remove(\"error\");\n  errorMsgPhoneMobile.innerHTML = \"\";\n  errorMsgPhoneMobile.classList.add(\"hide\"); //validMsg.classList.add(\"hide\");\n}; // on blur: validate\n\n\ninput_phone_mobile.addEventListener('blur', function () {\n  resetPhoneMobile();\n\n  if (input_phone_mobile.value.trim()) {\n    if (!iti_phoneMobile.isValidNumber()) {\n      input_phone_mobile.classList.add(\"error\");\n      var errorCode = iti_phoneMobile.getValidationError();\n      errorMsgPhoneMobile.innerHTML = errorMap[errorCode];\n      errorMsgPhoneMobile.classList.remove(\"hide\");\n    }\n  }\n});\ninput_phone_mobile.addEventListener(\"countrychange\", function (e, countryData) {\n  //var currentMask = e.currentTarget.placeholder;\n  var currentMask = $(this).attr('placeholder').replace(/[0-9+]/ig, '9');\n  $(this).attr('placeholder', currentMask);\n  $(input_phone_mobile).inputmask({\n    mask: currentMask,\n    keepStatic: true\n  });\n});\ninput_phone_mobile.addEventListener('change', resetPhoneMobile);\ninput_phone_mobile.addEventListener('keyup', resetPhoneMobile);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/fiche/page.outils.fiche.js\n");

/***/ }),

/***/ 112:
/*!*****************************************************************************!*\
  !*** multi ./resources/metronic/js/pages/custom/fiche/page.outils.fiche.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/spreadci4/public/admin/themes/metronic/resources/metronic/js/pages/custom/fiche/page.outils.fiche.js */"./resources/metronic/js/pages/custom/fiche/page.outils.fiche.js");


/***/ })

/******/ });