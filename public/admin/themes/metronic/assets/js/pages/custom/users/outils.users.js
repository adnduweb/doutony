/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 120);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/custom/users/outils.users.js":
/*!******************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/users/outils.users.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n$(document).on(\"click\", '.generer_mot_passe', function (e) {\n  $.post(baseController + \"/getPassword\", _defineProperty({}, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), function (response, status) {\n    //csrf_hash = response.csrf_token;\n    if (response.error == false) {\n      $('.pass_confirm').val('');\n      $('.datapassword').val('');\n      $('#password').html('');\n      $('.datapassword').val(response.success.password);\n      $('.pass_confirm').val(response.success.password);\n      $('#password').html(response.success.password);\n    }\n  });\n});\n\nfunction createUsername() {\n  var fname = $('#kt_apps_user_create_user_form input[name=firstname]').val().substring(0, 1).toLowerCase();\n  var lname = $('#kt_apps_user_create_user_form input[name=lastname]').val().toLowerCase();\n  var username = fname + lname + Math.floor(Math.random() * (10000 + 1) + 1000);\n  $('#kt_apps_user_create_user_form input[name=username]').val(username);\n}\n\n$('#kt_apps_user_create_user_form input[name=firstname]').on('keyup', createUsername);\n$('#kt_apps_user_create_user_form input[name=lastname]').on('keyup', createUsername);\n$('.unmask').on('click', function () {\n  if ($(this).prev('input').attr('type') == 'password') changeType($(this).prev('input'), 'text');else changeType($(this).prev('input'), 'password');\n  return false;\n});\n/* \r\n  function from : https://gist.github.com/3559343\r\n  Thank you bminer!\r\n*/\n// x = élément du DOM, type = nouveau type à attribuer\n\nfunction changeType(x, type) {\n  if (x.prop('type') == type) return x; // ça serait facile.\n\n  try {\n    // Une sécurité d'IE empêche ceci\n    return x.prop('type', type);\n  } catch (e) {\n    // On tente de recréer l'élément\n    // En créant d'abord une div\n    var html = $(\"<div>\").append(x.clone()).html();\n    var regex = /type=(\\\")?([^\\\"\\s]+)(\\\")?/; // la regex trouve type=text ou type=\"text\"\n    // si on ne trouve rien, on ajoute le type à la fin, sinon on le remplace\n\n    var tmp = $(html.match(regex) == null ? html.replace(\">\", ' type=\"' + type + '\">') : html.replace(regex, 'type=\"' + type + '\"')); // on rajoute les vieilles données de l'élément\n\n    tmp.data('type', x.data('type'));\n    var events = x.data('events');\n\n    var cb = function (events) {\n      return function () {\n        //Bind all prior events\n        for (i in events) {\n          var y = events[i];\n\n          for (j in y) {\n            tmp.bind(i, y[j].handler);\n          }\n        }\n      };\n    }(events);\n\n    x.replaceWith(tmp);\n    setTimeout(cb, 10); // On attend un peu avant d'appeler la fonction\n\n    return tmp;\n  }\n}\n\nvar input_phone = document.querySelector(\"#phone\"),\n    errorMsgPhoneFixe = document.querySelector(\".invalid-feedback-phone\"); //intlTelInput(input_mobile);\n// here, the index maps to the error code returned from getValidationError - see readme\n\nvar errorMap = [\"Invalid number\", \"Invalid country code\", \"Too short\", \"Too long\", \"Invalid number\"]; // initialise plugin\n\nvar iti_phoneFixe = intlTelInput(input_phone, {\n  initialCountry: \"auto\",\n  allowDropdown: true,\n  geoIpLookup: function geoIpLookup(callback) {\n    $.get('https://ipinfo.io', function () {}, \"jsonp\").always(function (resp) {\n      var countryCode = resp && resp.country ? resp.country : \"\";\n      callback(countryCode);\n    });\n  },\n  hiddenInput: \"full_phone\",\n  utilsScript: utils\n});\n\nvar resetPhoneFixe = function resetPhoneFixe() {\n  input_phone.classList.remove(\"error\");\n  errorMsgPhoneFixe.innerHTML = \"\";\n  errorMsgPhoneFixe.classList.add(\"hide\"); //validMsg.classList.add(\"hide\");\n}; // on blur: validate\n\n\ninput_phone.addEventListener('blur', function () {\n  resetPhoneFixe();\n\n  if (input_phone.value.trim()) {\n    if (!iti_phoneFixe.isValidNumber()) {\n      input_phone.classList.add(\"error\");\n      var errorCode = iti_phoneFixe.getValidationError();\n      errorMsgPhoneFixe.innerHTML = errorMap[errorCode];\n      errorMsgPhoneFixe.classList.remove(\"hide\");\n    }\n  }\n});\ninput_phone.addEventListener(\"countrychange\", function (e, countryData) {\n  //var currentMask = e.currentTarget.placeholder;\n  var currentMask = $(this).attr('placeholder').replace(/[0-9+]/ig, '9');\n  $(this).attr('placeholder', currentMask);\n  $(input_phone).inputmask({\n    mask: currentMask,\n    keepStatic: true\n  });\n});\ninput_phone.addEventListener('change', resetPhoneFixe);\ninput_phone.addEventListener('keyup', resetPhoneFixe);\nvar input_phone_mobile = document.querySelector(\"#phone_mobile\"),\n    errorMsgPhoneMobile = document.querySelector(\".invalid-feedback-phone_mobile\"); // initialise plugin\n\nvar iti_phoneMobile = intlTelInput(input_phone_mobile, {\n  initialCountry: \"auto\",\n  geoIpLookup: function geoIpLookup(callback) {\n    $.get('https://ipinfo.io', function () {}, \"jsonp\").always(function (resp) {\n      var countryCode = resp && resp.country ? resp.country : \"\";\n      callback(countryCode);\n    });\n  },\n  hiddenInput: \"full_phone_mobile\",\n  utilsScript: utils\n});\n\nvar resetPhoneMobile = function resetPhoneMobile() {\n  input_phone_mobile.classList.remove(\"error\");\n  errorMsgPhoneMobile.innerHTML = \"\";\n  errorMsgPhoneMobile.classList.add(\"hide\"); //validMsg.classList.add(\"hide\");\n}; // on blur: validate\n\n\ninput_phone_mobile.addEventListener('blur', function () {\n  resetPhoneMobile();\n\n  if (input_phone_mobile.value.trim()) {\n    if (!iti_phoneMobile.isValidNumber()) {\n      input_phone_mobile.classList.add(\"error\");\n      var errorCode = iti_phoneMobile.getValidationError();\n      errorMsgPhoneMobile.innerHTML = errorMap[errorCode];\n      errorMsgPhoneMobile.classList.remove(\"hide\");\n    }\n  }\n});\ninput_phone_mobile.addEventListener(\"countrychange\", function (e, countryData) {\n  //var currentMask = e.currentTarget.placeholder;\n  var currentMask = $(this).attr('placeholder').replace(/[0-9+]/ig, '9');\n  $(this).attr('placeholder', currentMask);\n  $(input_phone_mobile).inputmask({\n    mask: currentMask,\n    keepStatic: true\n  });\n});\ninput_phone_mobile.addEventListener('change', resetPhoneMobile);\ninput_phone_mobile.addEventListener('keyup', resetPhoneMobile);\n$(document).on(\"click\", '.deleteSession', function (e) {\n  var _$$post2;\n\n  var session_en_cours = $(this).data('session_en_cours');\n  var id = $(this).attr('id');\n  $.post(baseController + \"/deleteSession\", (_$$post2 = {}, _defineProperty(_$$post2, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_$$post2, \"value\", session_en_cours), _$$post2), function (response, status) {\n    csrf_hash = response.csrf_token;\n    $(\"#\" + id).css('display', 'none'); // console.log(id);\n\n    if (status == 'success') {\n      $.notify({\n        title: _LANG_.deleted + \"!\",\n        message: response.message\n      }, {\n        type: response.type,\n        placement: {\n          from: 'bottom',\n          align: 'center'\n        }\n      });\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/users/outils.users.js\n");

/***/ }),

/***/ 120:
/*!************************************************************************!*\
  !*** multi ./resources/metronic/js/pages/custom/users/outils.users.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/spreadci4/public/admin/themes/metronic/resources/metronic/js/pages/custom/users/outils.users.js */"./resources/metronic/js/pages/custom/users/outils.users.js");


/***/ })

/******/ });