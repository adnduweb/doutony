/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 114);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/custom/login/login-4.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/login/login-4.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Class Definition\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar KTLogin = function () {\n  var _buttonSpinnerClasses = 'spinner spinner-right spinner-white pr-15';\n\n  var _handleFormSignin = function _handleFormSignin() {\n    var form = KTUtil.getById('kt_login_singin_form');\n    var formSubmitUrl = KTUtil.attr(form, 'action');\n    var formSubmitButton = KTUtil.getById('kt_login_singin_form_submit_button');\n\n    if (!form) {\n      return;\n    }\n\n    FormValidation.formValidation(form, {\n      fields: {\n        login: {\n          validators: {\n            notEmpty: {\n              message: _LANG_.username_is_required\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: _LANG_.password_is_required\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap({//\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\n          //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\n        })\n      }\n    }).on('core.form.valid', function () {\n      // Show loading state on button\n      KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, \"Please wait\"); // Simulate Ajax request\n\n      setTimeout(function () {\n        KTUtil.btnRelease(formSubmitButton);\n      }, 2000); // Form Validation & Ajax Submission: https://formvalidation.io/guide/examples/using-ajax-to-submit-the-form\n\n      FormValidation.utils.fetch(formSubmitUrl, {\n        headers: {\n          //'X-Requested-With': 'XMLHttpRequest',\n          'X-CSRF-TOKEN': $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')\n        },\n        method: 'POST',\n        dataType: 'json',\n        params: {\n          login: form.querySelector('[name=\"login\"]').value,\n          password: form.querySelector('[name=\"password\"]').value\n        }\n      }).then(function (response) {\n        // Return valid JSON\n        // Release button\n        KTUtil.btnRelease(formSubmitButton);\n        $('meta[name=\"X-CSRF-TOKEN\"]').attr('content', response.token);\n\n        if (response && _typeof(response) === 'object' && response.status && response.status == 'success') {\n          Swal.fire({\n            html: response.message,\n            icon: \"success\",\n            buttonsStyling: false,\n            //confirmButtonText: _LANG_.close,\n            showConfirmButton: false,\n            timer: 1500,\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n            window.location.href = response.redirect;\n          });\n        } else {\n          Swal.fire({\n            html: response.message,\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: _LANG_.close,\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }).on('core.form.invalid', function () {\n      Swal.fire({\n        text: \"Sorry, looks like there are some errors detected, please try again tttttt.\",\n        icon: \"error\",\n        buttonsStyling: false,\n        confirmButtonText: \"Ok, got it!\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-light-primary\"\n        }\n      }).then(function () {\n        KTUtil.scrollTop();\n      });\n    });\n  };\n\n  var _handleFormForgot = function _handleFormForgot() {\n    var form = KTUtil.getById('kt_login_forgot_form');\n    var formSubmitUrl = KTUtil.attr(form, 'action');\n    var formSubmitButton = KTUtil.getById('kt_login_forgot_form_submit_button');\n\n    if (!form) {\n      return;\n    }\n\n    FormValidation.formValidation(form, {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: _LANG_.email_is_required\n            },\n            emailAddress: {\n              message: _LANG_.the_value_is_not_address_valid\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap({//\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\n          //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\n        })\n      }\n    }).on('core.form.valid', function () {\n      // Show loading state on button\n      KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, _LANG_.loading_wait); // Simulate Ajax request\n\n      setTimeout(function () {\n        KTUtil.btnRelease(formSubmitButton);\n      }, 2000); // Form Validation & Ajax Submission: https://formvalidation.io/guide/examples/using-ajax-to-submit-the-form\n\n      FormValidation.utils.fetch(formSubmitUrl, {\n        headers: {\n          'X-CSRF-TOKEN': token_hash\n        },\n        method: 'POST',\n        dataType: 'json',\n        params: {\n          email: form.querySelector('[name=\"email\"]').value\n        }\n      }).then(function (response) {\n        // Return valid JSON\n        // Release button\n        KTUtil.btnRelease(formSubmitButton);\n\n        if (response && _typeof(response) === 'object' && response.status && response.status == 'success') {\n          Swal.fire({\n            html: response.message,\n            icon: \"success\",\n            buttonsStyling: false,\n            //confirmButtonText: _LANG_.close,\n            showConfirmButton: false,\n            timer: 1500,\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n            window.location.href = response.redirect;\n          });\n        } else {\n          Swal.fire({\n            html: response.message,\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: _LANG_.close,\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }).on('core.form.invalid', function () {\n      Swal.fire({\n        text: _LANG_.sorry_looks_like_errors_detected,\n        icon: \"error\",\n        buttonsStyling: false,\n        confirmButtonText: \"Ok, got it!\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-light-primary\"\n        }\n      }).then(function () {\n        KTUtil.scrollTop();\n      });\n    });\n  };\n\n  var _handleFormResetForgot = function _handleFormResetForgot() {\n    var form = KTUtil.getById('kt_login_reset_forgot_form');\n    var formSubmitUrl = KTUtil.attr(form, 'action');\n    var formSubmitButton = KTUtil.getById('kt_login_reset_forgot_form_submit_button');\n\n    if (!form) {\n      return;\n    }\n\n    FormValidation.formValidation(form, {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: _LANG_.email_is_required\n            },\n            emailAddress: {\n              message: _LANG_.the_value_is_not_address_valid\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap({//\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\n          //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\n        })\n      }\n    }).on('core.form.valid', function () {\n      // Show loading state on button\n      KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, _LANG_.loading_wait); // Simulate Ajax request\n\n      setTimeout(function () {\n        KTUtil.btnRelease(formSubmitButton);\n      }, 2000); // Form Validation & Ajax Submission: https://formvalidation.io/guide/examples/using-ajax-to-submit-the-form\n\n      FormValidation.utils.fetch(formSubmitUrl, {\n        headers: {\n          'X-CSRF-TOKEN': token_hash\n        },\n        method: 'POST',\n        dataType: 'json',\n        params: {\n          token: form.querySelector('[name=\"token\"]').value,\n          email: form.querySelector('[name=\"email\"]').value,\n          password: form.querySelector('[name=\"password\"]').value,\n          pass_confirm: form.querySelector('[name=\"pass_confirm\"]').value\n        }\n      }).then(function (response) {\n        // Return valid JSON\n        // Release button\n        KTUtil.btnRelease(formSubmitButton);\n\n        if (response && _typeof(response) === 'object' && response.status && response.status == 'success') {\n          Swal.fire({\n            html: response.message,\n            icon: \"success\",\n            buttonsStyling: false,\n            //confirmButtonText: _LANG_.close,\n            showConfirmButton: false,\n            timer: 1500,\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n            window.location.href = response.redirect;\n          });\n        } else {\n          Swal.fire({\n            html: response.message,\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: _LANG_.close,\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }).on('core.form.invalid', function () {\n      Swal.fire({\n        text: _LANG_.sorry_looks_like_errors_detected,\n        icon: \"error\",\n        buttonsStyling: false,\n        confirmButtonText: \"Ok, got it!\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-light-primary\"\n        }\n      }).then(function () {\n        KTUtil.scrollTop();\n      });\n    });\n  }; // var _handleFormSignup = function() {\n  //     // Base elements\n  //     var wizardEl = KTUtil.getById('kt_login');\n  //     var form = KTUtil.getById('kt_login_signup_form');\n  //     var wizardObj;\n  //     var validations = [];\n  //     if (!form) {\n  //         return;\n  //     }\n  //     // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n  //     // Step 1\n  //     validations.push(FormValidation.formValidation(\n  //         form, {\n  //             fields: {\n  //                 fname: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'First name is required'\n  //                         }\n  //                     }\n  //                 },\n  //                 lname: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'Last Name is required'\n  //                         }\n  //                     }\n  //                 },\n  //                 phone: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'Phone is required'\n  //                         }\n  //                     }\n  //                 },\n  //                 email: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'Email is required'\n  //                         },\n  //                         emailAddress: {\n  //                             message: 'The value is not a valid email address'\n  //                         }\n  //                     }\n  //                 }\n  //             },\n  //             plugins: {\n  //                 trigger: new FormValidation.plugins.Trigger(),\n  //                 bootstrap: new FormValidation.plugins.Bootstrap()\n  //             }\n  //         }\n  //     ));\n  //     // Step 2\n  //     validations.push(FormValidation.formValidation(\n  //         form, {\n  //             fields: {\n  //                 address1: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'Address is required'\n  //                         }\n  //                     }\n  //                 },\n  //                 postcode: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'Postcode is required'\n  //                         }\n  //                     }\n  //                 },\n  //                 city: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'City is required'\n  //                         }\n  //                     }\n  //                 },\n  //                 state: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'State is required'\n  //                         }\n  //                     }\n  //                 },\n  //                 country: {\n  //                     validators: {\n  //                         notEmpty: {\n  //                             message: 'Country is required'\n  //                         }\n  //                     }\n  //                 }\n  //             },\n  //             plugins: {\n  //                 trigger: new FormValidation.plugins.Trigger(),\n  //                 bootstrap: new FormValidation.plugins.Bootstrap()\n  //             }\n  //         }\n  //     ));\n  //     // Initialize form wizard\n  //     wizardObj = new KTWizard(wizardEl, {\n  //         startStep: 1, // initial active step number\n  //         clickableSteps: false // to make steps clickable this set value true and add data-wizard-clickable=\"true\" in HTML for class=\"wizard\" element\n  //     });\n  //     // Validation before going to next page\n  //     wizardObj.on('beforeNext', function(wizard) {\n  //         validations[wizard.getStep() - 1].validate().then(function(status) {\n  //             if (status == 'Valid') {\n  //                 wizardObj.goNext();\n  //                 KTUtil.scrollTop();\n  //             } else {\n  //                 Swal.fire({\n  //                     text: \"Sorry, looks like there are some errors detected, please try again kkkkkk.\",\n  //                     icon: \"error\",\n  //                     buttonsStyling: false,\n  //                     confirmButtonText: \"Ok, got it!\",\n  //                     customClass: {\n  //                         confirmButton: \"btn font-weight-bold btn-light-primary\"\n  //                     }\n  //                 }).then(function() {\n  //                     KTUtil.scrollTop();\n  //                 });\n  //             }\n  //         });\n  //         wizardObj.stop(); // Don't go to the next step\n  //     });\n  //     // Change event\n  //     wizardObj.on('change', function(wizard) {\n  //         KTUtil.scrollTop();\n  //     });\n  // }\n  // Public Functions\n\n\n  return {\n    init: function init() {\n      _handleFormSignin();\n\n      _handleFormForgot();\n\n      _handleFormResetForgot(); //_handleFormSignup();\n\n    }\n  };\n}(); // Class Initialization\n\n\njQuery(document).ready(function () {\n  KTLogin.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/login/login-4.js\n");

/***/ }),

/***/ 114:
/*!*******************************************************************!*\
  !*** multi ./resources/metronic/js/pages/custom/login/login-4.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/spreadci4/public/admin/themes/metronic/resources/metronic/js/pages/custom/login/login-4.js */"./resources/metronic/js/pages/custom/login/login-4.js");


/***/ })

/******/ });