/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 120);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/custom/medias/imageManager.js":
/*!*******************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/medias/imageManager.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nDropzone.autoDiscover = false;\nDropzone.prototype.defaultOptions.dictDefaultMessage = _LANG_.dictDefaultMessage;\nDropzone.prototype.defaultOptions.dictFallbackMessage = _LANG_.dictFallbackMessage;\nDropzone.prototype.defaultOptions.dictFallbackText = _LANG_.dictFallbackText;\nDropzone.prototype.defaultOptions.dictFileTooBig = _LANG_.dictFileTooBig;\nDropzone.prototype.defaultOptions.dictInvalidFileType = _LANG_.dictInvalidFileType;\nDropzone.prototype.defaultOptions.dictResponseError = _LANG_.dictResponseError;\nDropzone.prototype.defaultOptions.dictCancelUpload = _LANG_.dictCancelUpload;\nDropzone.prototype.defaultOptions.dictCancelUploadConfirmation = _LANG_.dictCancelUploadConfirmation;\nDropzone.prototype.defaultOptions.dictRemoveFile = _LANG_.dictRemoveFile;\nDropzone.prototype.defaultOptions.dictMaxFilesExceeded = _LANG_.dictMaxFilesExceeded;\n$(function () {\n  var filesDropzone = new Dropzone(\"#kt_dropzone_media_manager\", {\n    url: current_url + \"/upload?time=\" + $.now(),\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"X-CSRF-TOKEN\"]').attr('content'),\n      'X-Requested-With': 'XMLHttpRequest'\n    },\n    params: function params(files, xhr, chunk) {\n      if (chunk) {\n        return {\n          dzUuid: chunk.file.upload.uuid,\n          dzChunkIndex: chunk.index,\n          dzTotalFileSize: chunk.file.size,\n          dzCurrentChunkSize: chunk.dataBlock.data.size,\n          dzTotalChunkCount: chunk.file.upload.totalChunkCount,\n          dzChunkByteOffset: chunk.index * this.options.chunkSize,\n          dzChunkSize: this.options.chunkSize,\n          dzFilename: chunk.file.name,\n          userID: 1\n        };\n      }\n    },\n    uploadmultiple: true,\n    addRemoveLinks: !0,\n    timeout: 0,\n    // parallelUploads: 1, // since we're using a global 'currentFile', we could have issues if parallelUploads > 1, so we'll make it = 1\n    maxFilesize: Medias.maxFilesize,\n    // max individual file size 1024 MB\n    chunking: true,\n    // enable chunking\n    forceChunking: true,\n    // forces chunking when file.size < chunkSize\n    // parallelChunkUploads: true, // allows chunks to be uploaded in parallel (this is independent of the parallelUploads option)\n    chunkSize: 75387608,\n    // chunk size 1,000,000 bytes (~1MB)\n    retryChunks: true,\n    // retry chunks on failure\n    retryChunksLimit: 3,\n    // retry maximum of 3 times (default is 3)\n    init: function init() {\n      this.on(\"addedfile\", function (file) {\n        console.log('addedfile'); //this.removeFile(file);\n      });\n      this.on(\"complete\", function (file) {\n        console.log('complete');\n        $.ajax({\n          type: 'GET',\n          url: current_url + \"/getDisplayImageManager\",\n          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n          data: _defineProperty({}, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')),\n          dataType: \"json\",\n          success: function success(response, status, xhr) {\n            console.log(response);\n            $('#imageManager').html(response.html);\n          }\n        });\n      });\n      this.on('success', function (file, response) {\n        console.log('success');\n\n        if (file.previewElement) {\n          return file.previewElement.classList.add(\"dz-success\"), $(function () {\n            setTimeout(function () {\n              $('.dz-success').fadeOut('slow');\n            }, 2500);\n          });\n        }\n      });\n      this.on(\"sending\", function (file, xhr, formData) {\n        KTApp.block(\"#imageManager\", {\n          overlayColor: \"#000000\",\n          state: \"primary\"\n        });\n      });\n      this.on(\"queuecomplete\", function (file, res) {\n        if (filesDropzone.files[0].status == Dropzone.SUCCESS) {\n          $.notify({\n            title: _LANG_.updated + \"!\",\n            message: _LANG_.saved_data\n          }, {\n            type: 'success'\n          });\n          KTApp.unblock(\"#imageManager\");\n          $('.dz-success').fadeOut('slow');\n          $('.dz-message').fadeIn('slow'); //this.removeAllFiles();\n          // if (imageManager == 'reload') {\n          //     KTApp.unblock(\"#imageManager\");\n          //     $('#imageManager').html(result.html);\n          // }\n        }\n      });\n      this.on(\"error\", function (file, response, xhr) {\n        console.log('errored', file, response, xhr); // for debugging\n\n        if (typeof xhr !== 'undefined') {\n          this.defaultOptions.error(file, xhr.statusText); // use xhr err (from server)\n        } else {\n          this.defaultOptions.error(file, response); // use default (from dropzone)\n        }\n\n        $.notify({\n          title: _LANG_.error + \" : 500 \",\n          message: response.error.message\n        }, {\n          type: 'warning'\n        });\n      });\n      this.on(\"removedfile\", function (file, response, xhr) {\n        console.log('removedfile', file, response, xhr); // for debugging\n\n        $.ajax({\n          type: 'GET',\n          url: current_url + \"/removedfile/\" + file.upload.uuid,\n          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n          data: _defineProperty({}, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')),\n          dataType: \"json\",\n          success: function success(result, status, xhr) {\n            console.log(response);\n          }\n        });\n      });\n    }\n  }); // Display manager Image\n\n  $(document).on('click', '.select-image', function (e) {\n    var _data3;\n\n    e.preventDefault();\n    console.log(e);\n    var uuidMedia = $(this).data(\"uuid-media\");\n    $.ajax({\n      type: 'POST',\n      url: current_url + \"/getManagerEdition\",\n      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n      data: (_data3 = {}, _defineProperty(_data3, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data3, \"value\", {\n        uuid: uuidMedia\n      }), _data3),\n      dataType: \"json\",\n      success: function success(result, status, xhr) {\n        if (xhr.status == 200) {\n          $('#imageManager_edition').html(result.html);\n          $('#imageManager_edition > #kt_modal_manager_edition').modal(\"show\");\n        }\n      }\n    });\n  }); // Save data Image\n\n  $(document).on('submit', '#kt_apps_manager_media', function (event) {\n    var _data4;\n\n    event.preventDefault();\n    $.ajax({\n      type: 'POST',\n      url: current_url + \"/saveManagerEdition\",\n      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n      data: (_data4 = {}, _defineProperty(_data4, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data4, \"value\", $(this).serialize()), _data4),\n      dataType: \"json\",\n      success: function success(result, status, xhr) {\n        $.notify({\n          title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n          message: result.success.message ? result.success.message : result.error.message\n        }, {\n          type: result.success.message ? 'success' : 'warning'\n        });\n      }\n    });\n  }); // Delete File\n\n  $(document).on('click', '.deleteFileMedia', function (event) {\n    var _data5;\n\n    event.preventDefault();\n    var imageManager = $(this).data('imagemanager');\n    $.ajax({\n      type: 'POST',\n      url: current_url + \"/removeFile\",\n      data: (_data5 = {}, _defineProperty(_data5, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data5, \"uuid\", $(this).data('uuid')), _data5),\n      dataType: \"json\",\n      beforeSend: function beforeSend(xhr) {\n        KTApp.block(\"#imageManager\", {\n          overlayColor: \"#000000\",\n          state: \"primary\"\n        });\n      },\n      success: function success(result, status, xhr) {\n        $.notify({\n          title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n          message: result.success.message ? result.success.message : result.error.message\n        }, {\n          type: result.success.message ? 'success' : 'warning'\n        });\n\n        if (xhr.status == 200) {\n          $('#imageManager_edition #kt_modal_manager_edition').modal(\"hide\");\n          $('.modal-backdrop').remove();\n          $('#imageManager_edition').html(\"\");\n\n          if (imageManager == 'reload') {\n            KTApp.unblock(\"#imageManager\");\n            $('#imageManager').html(result.html);\n          }\n        }\n      }\n    });\n  });\n}); // ON crop le fichier demnandé\n//croppedFile\n\n$(document).on('click', '#kt_apps_manager_media .croppedFile', function (event) {\n  var _data6;\n\n  var uuid = $(this).data('uuid');\n  $.ajax({\n    type: 'POST',\n    url: current_url + \"/getCropTemplate\",\n    data: (_data6 = {}, _defineProperty(_data6, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data6, \"uuid\", $(this).data('uuid')), _data6),\n    dataType: \"json\",\n    beforeSend: function beforeSend(xhr) {\n      KTApp.block(\".thumbnail-image\", {\n        overlayColor: \"#000000\",\n        state: \"primary\"\n      });\n    },\n    success: function success(response, status, xhr) {\n      if (xhr.status == 200) {\n        KTApp.unblock(\".thumbnail-image\");\n\n        if (response.crop == true) {\n          $('.attachment-media-view').fadeOut();\n          $('#cropImage').html(response.cropImage);\n          $('#cropImage').fadeIn();\n          KTCropper.init();\n          KTApp.initTooltips();\n        }\n      }\n    }\n  });\n});\n$(document).on('click', '#kt_modal_manager_edition .cancelCrop', function (event) {\n  event.preventDefault();\n  $('#cropImage').fadeOut();\n  $('#cropImage').html('');\n  $('.attachment-media-view').fadeIn();\n});\n\"use strict\";\n\nvar KTCropper = {\n  init: function init() {\n    var e, t, a;\n    e = document.getElementById(\"image-upload\"), t = {\n      crop: function crop(e) {\n        document.getElementById(\"dataX\").value = Math.round(e.detail.x), document.getElementById(\"dataY\").value = Math.round(e.detail.y), document.getElementById(\"dataWidth\").value = Math.round(e.detail.width), document.getElementById(\"dataHeight\").value = Math.round(e.detail.height), document.getElementById(\"dataRotate\").value = e.detail.rotate, document.getElementById(\"dataScaleX\").value = e.detail.scaleX, document.getElementById(\"dataScaleY\").value = e.detail.scaleY;\n        var t = document.getElementById(\"cropper-preview-lg\");\n        t.innerHTML = \"\", t.appendChild(a.getCroppedCanvas({\n          width: 256,\n          height: 160\n        }));\n        var n = document.getElementById(\"cropper-preview-md\");\n        n.innerHTML = \"\", n.appendChild(a.getCroppedCanvas({\n          width: 128,\n          height: 80\n        }));\n        var d = document.getElementById(\"cropper-preview-sm\");\n        d.innerHTML = \"\", d.appendChild(a.getCroppedCanvas({\n          width: 64,\n          height: 40\n        }));\n        var o = document.getElementById(\"cropper-preview-xs\");\n        o.innerHTML = \"\", o.appendChild(a.getCroppedCanvas({\n          width: 32,\n          height: 20\n        }));\n      },\n      cropmove: function cropmove(e) {\n        console.log(e.type, e.detail.action);\n      }\n    }, a = new Cropper(e, t), document.getElementById(\"cropper-buttons\").querySelectorAll(\"[data-method]\").forEach(function (e) {\n      e.addEventListener(\"click\", function (t) {\n        var n,\n            d = e.getAttribute(\"data-method\"),\n            o = e.getAttribute(\"data-option\") || undefined,\n            r = e.getAttribute(\"data-second-option\") || undefined;\n\n        try {\n          o = JSON.parse(o);\n        } catch (t) {}\n\n        if (n = r ? o ? '' : a[d]() : a[d](o, r), \"getCroppedCanvas\" === d) {// var i = document.getElementById(\"getCroppedCanvasModal\").querySelector(\".modal-body\");\n          // console.log(n);\n          // i.innerHTML = \"\", i.appendChild(n)\n        }\n\n        if (e.getAttribute(\"data-method\") == 'move') {\n          a.move(e.getAttribute(\"data-option\"), e.getAttribute(\"data-second-option\"));\n        }\n\n        if (e.getAttribute(\"data-method\") == 'getCroppedCanvas') {\n          option = '';\n\n          if (e.getAttribute(\"data-option\") != \"\") {\n            console.log(e.getAttribute(\"data-option\"));\n            option = JSON.parse(e.getAttribute(\"data-option\"));\n          }\n\n          a.getCroppedCanvas(option).toBlob(function (blob) {\n            var formData = new FormData(); // Pass the image file name as the third parameter if necessary.\n\n            formData.append('uuid', $('#image-upload').attr('data-uuid'));\n            formData.append('field', false);\n            formData.append('imageCustomEdition', true);\n            formData.append('croppedImage', blob, $('#image-upload').attr('data-mine'));\n            formData.append([crsftoken], $('meta[name=\"X-CSRF-TOKEN\"]').attr('content'));\n            $.ajax({\n              type: 'POST',\n              url: current_url + \"/cropFile\",\n              data: formData,\n              processData: false,\n              contentType: false,\n              dataType: \"json\",\n              success: function success(result, status, xhr) {\n                $.notify({\n                  title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n                  message: result.success.message ? result.success.message : result.error.message\n                }, {\n                  type: result.success.message ? 'success' : 'warning'\n                });\n\n                if (xhr.status == 200) {\n                  $('#cropImage').fadeOut();\n                  $('#cropImage').html('');\n                  $('.attachment-media-view').fadeIn();\n                  $('#imageCustom').html(result.imageCustomEdition);\n                }\n              }\n            });\n          }, $('#image-upload').attr('data-mine'));\n        }\n\n        var c = document.querySelector(\"#putData\");\n\n        try {\n          c.value = JSON.stringify(n);\n        } catch (t) {\n          n || (c.value = n);\n        }\n      });\n    }), document.getElementById(\"setAspectRatio\").querySelectorAll('[name=\"aspectRatio\"]').forEach(function (e) {\n      e.addEventListener(\"click\", function (e) {\n        a.setAspectRatio(e.target.value);\n      });\n    });\n  }\n}; // on supprime les fichiers custom\n\n$(document).on('click', '#kt_apps_manager_media .deleteFileCustom', function (event) {\n  var _data7;\n\n  event.preventDefault();\n  var deleteFileCustom = $(this);\n  $.ajax({\n    type: 'POST',\n    url: current_url + \"/deteteFileCustom\",\n    data: (_data7 = {}, _defineProperty(_data7, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data7, \"format\", $(this).data('format')), _defineProperty(_data7, \"uuid\", $(this).data('uuid')), _data7),\n    dataType: \"json\",\n    success: function success(result, status, xhr) {\n      $.notify({\n        title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n        message: result.success.message ? result.success.message : result.error.message\n      }, {\n        type: result.success.message ? 'success' : 'warning'\n      });\n\n      if (xhr.status == 200) {\n        deleteFileCustom.parent().parent().remove();\n      }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/medias/imageManager.js\n");

/***/ }),

/***/ 120:
/*!*************************************************************************!*\
  !*** multi ./resources/metronic/js/pages/custom/medias/imageManager.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/spreadci4/public/admin/themes/metronic/resources/metronic/js/pages/custom/medias/imageManager.js */"./resources/metronic/js/pages/custom/medias/imageManager.js");


/***/ })

/******/ });