/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 120);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/custom/medias/imageManager.js":
/*!*******************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/medias/imageManager.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nDropzone.autoDiscover = false;\nDropzone.prototype.defaultOptions.dictDefaultMessage = _LANG_.dictDefaultMessage;\nDropzone.prototype.defaultOptions.dictFallbackMessage = _LANG_.dictFallbackMessage;\nDropzone.prototype.defaultOptions.dictFallbackText = _LANG_.dictFallbackText;\nDropzone.prototype.defaultOptions.dictFileTooBig = _LANG_.dictFileTooBig;\nDropzone.prototype.defaultOptions.dictInvalidFileType = _LANG_.dictInvalidFileType;\nDropzone.prototype.defaultOptions.dictResponseError = _LANG_.dictResponseError;\nDropzone.prototype.defaultOptions.dictCancelUpload = _LANG_.dictCancelUpload;\nDropzone.prototype.defaultOptions.dictCancelUploadConfirmation = _LANG_.dictCancelUploadConfirmation;\nDropzone.prototype.defaultOptions.dictRemoveFile = _LANG_.dictRemoveFile;\nDropzone.prototype.defaultOptions.dictMaxFilesExceeded = _LANG_.dictMaxFilesExceeded;\nDropzone.options.dzone = {\n  acceptedFiles: \"image/jpeg,image/png,image/gif\"\n};\n$(function () {\n  var filesDropzone = new Dropzone(\"#kt_dropzone_media_manager\", {\n    url: current_url + \"/upload?time=\" + $.now(),\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"X-CSRF-TOKEN\"]').attr('content'),\n      'X-Requested-With': 'XMLHttpRequest'\n    },\n    params: function params(files, xhr, chunk) {\n      if (chunk) {\n        return {\n          dzUuid: chunk.file.upload.uuid,\n          dzChunkIndex: chunk.index,\n          dzTotalFileSize: chunk.file.size,\n          dzCurrentChunkSize: chunk.dataBlock.data.size,\n          dzTotalChunkCount: chunk.file.upload.totalChunkCount,\n          dzChunkByteOffset: chunk.index * this.options.chunkSize,\n          dzChunkSize: this.options.chunkSize,\n          dzFilename: chunk.file.name,\n          userID: 1\n        };\n      }\n    },\n    acceptedFiles: \"image/jpeg,image/png,image/gif\",\n    uploadmultiple: true,\n    addRemoveLinks: !0,\n    timeout: 0,\n    // parallelUploads: 1, // since we're using a global 'currentFile', we could have issues if parallelUploads > 1, so we'll make it = 1\n    maxFilesize: Medias.maxFilesize,\n    // max individual file size 1024 MB\n    chunking: true,\n    // enable chunking\n    forceChunking: true,\n    // forces chunking when file.size < chunkSize\n    // parallelChunkUploads: true, // allows chunks to be uploaded in parallel (this is independent of the parallelUploads option)\n    chunkSize: 75387608,\n    // chunk size 1,000,000 bytes (~1MB)\n    retryChunks: true,\n    // retry chunks on failure\n    retryChunksLimit: 3,\n    // retry maximum of 3 times (default is 3)\n    init: function init() {\n      this.on(\"addedfile\", function (file) {\n        console.log('addedfile'); //this.removeFile(file);\n      });\n      this.on(\"complete\", function (file) {\n        console.log('complete');\n        $.ajax({\n          type: 'GET',\n          url: current_url + \"/getDisplayImageManager\",\n          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n          data: _defineProperty({}, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')),\n          dataType: \"json\",\n          success: function success(response, status, xhr) {\n            console.log(response);\n            $('#imageManager').html(response.html);\n          }\n        });\n      });\n      this.on('success', function (file, response) {\n        console.log('success');\n\n        if (file.previewElement) {\n          return file.previewElement.classList.add(\"dz-success\"), $(function () {\n            setTimeout(function () {\n              $('.dz-success').fadeOut('slow');\n            }, 2500);\n          });\n        }\n      });\n      this.on(\"sending\", function (file, xhr, formData) {\n        KTApp.block(\"#imageManager\", {\n          overlayColor: \"#000000\",\n          state: \"primary\"\n        });\n      });\n      this.on(\"queuecomplete\", function (file, res) {\n        console.log(filesDropzone);\n\n        if (filesDropzone.files[0].status == Dropzone.SUCCESS) {\n          $.notify({\n            title: _LANG_.updated + \"!\",\n            message: _LANG_.saved_data\n          }, {\n            type: 'success'\n          });\n          KTApp.unblock(\"#imageManager\");\n          $('.dz-success').fadeOut('slow');\n          $('.dz-message').fadeIn('slow'); //this.removeAllFiles();\n          // if (imageManager == 'reload') {\n          //     KTApp.unblock(\"#imageManager\");\n          //     $('#imageManager').html(result.html);\n          // }\n        }\n      });\n      this.on(\"error\", function (file, response, xhr) {\n        console.log('errored', file, response, xhr); // for debugging\n\n        if (typeof xhr !== 'undefined') {\n          this.defaultOptions.error(file, xhr.statusText); // use xhr err (from server)\n        } else {\n          this.defaultOptions.error(file, response); // use default (from dropzone)\n        }\n\n        $.notify({\n          title: _LANG_.error + \" : 500 \",\n          message: response.error.message\n        }, {\n          type: 'warning'\n        });\n      });\n      this.on(\"removedfile\", function (file, response, xhr) {\n        console.log('removedfile', file, response, xhr); // for debugging\n\n        $.ajax({\n          type: 'GET',\n          url: current_url + \"/removedfile/\" + file.upload.uuid,\n          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n          data: _defineProperty({}, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')),\n          dataType: \"json\",\n          success: function success(result, status, xhr) {\n            console.log(response);\n          }\n        });\n      });\n    }\n  }); // Display manager Image\n\n  $(document).on('click', '.select-image', function (e) {\n    var _data3;\n\n    e.preventDefault();\n    console.log(e);\n    var uuidMedia = $(this).data(\"uuid-media\");\n    $.ajax({\n      type: 'POST',\n      url: current_url + \"/getManagerEdition\",\n      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n      data: (_data3 = {}, _defineProperty(_data3, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data3, \"value\", {\n        uuid: uuidMedia\n      }), _data3),\n      dataType: \"json\",\n      success: function success(result, status, xhr) {\n        if (xhr.status == 200) {\n          $('#imageManager_edition').html(result.html);\n          $('#imageManager_edition > #kt_modal_manager_edition').modal(\"show\");\n        }\n      }\n    });\n  }); // Save data Image\n\n  $(document).on('submit', '#kt_apps_manager_media', function (event) {\n    var _data4;\n\n    event.preventDefault();\n    $.ajax({\n      type: 'POST',\n      url: current_url + \"/saveManagerEdition\",\n      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n      data: (_data4 = {}, _defineProperty(_data4, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data4, \"value\", $(this).serialize()), _data4),\n      dataType: \"json\",\n      success: function success(result, status, xhr) {\n        $.notify({\n          title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n          message: result.success.message ? result.success.message : result.error.message\n        }, {\n          type: result.success.message ? 'success' : 'warning'\n        });\n      }\n    });\n  }); // Delete File\n\n  $(document).on('click', '.deleteFileMedia', function (event) {\n    var _data5;\n\n    event.preventDefault();\n    var imageManager = $(this).data('imagemanager');\n    $.ajax({\n      type: 'POST',\n      url: current_url + \"/removeFile\",\n      data: (_data5 = {}, _defineProperty(_data5, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data5, \"uuid\", $(this).data('uuid')), _data5),\n      dataType: \"json\",\n      beforeSend: function beforeSend(xhr) {\n        KTApp.block(\"#imageManager\", {\n          overlayColor: \"#000000\",\n          state: \"primary\"\n        });\n      },\n      success: function success(result, status, xhr) {\n        $.notify({\n          title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n          message: result.success.message ? result.success.message : result.error.message\n        }, {\n          type: result.success.message ? 'success' : 'warning'\n        });\n\n        if (xhr.status == 200) {\n          $('#imageManager_edition #kt_modal_manager_edition').modal(\"hide\");\n          $('.modal-backdrop').remove();\n          $('#imageManager_edition').html(\"\");\n\n          if (imageManager == 'reload') {\n            KTApp.unblock(\"#imageManager\");\n            $('#imageManager').html(result.html);\n          }\n        }\n      }\n    });\n  });\n}); // ON crop le fichier demnandé\n//croppedFile\n\n$(document).on('click', '#kt_apps_manager_media .croppedFile', function (event) {\n  var _data6;\n\n  var uuid = $(this).data('uuid');\n  $.ajax({\n    type: 'POST',\n    url: current_url + \"/getCropTemplate\",\n    data: (_data6 = {}, _defineProperty(_data6, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data6, \"uuid\", $(this).data('uuid')), _data6),\n    dataType: \"json\",\n    beforeSend: function beforeSend(xhr) {\n      KTApp.block(\".thumbnail-image\", {\n        overlayColor: \"#000000\",\n        state: \"primary\"\n      });\n    },\n    success: function success(response, status, xhr) {\n      if (xhr.status == 200) {\n        KTApp.unblock(\".thumbnail-image\");\n\n        if (response.crop == true) {\n          $('.attachment-media-view').fadeOut();\n          $('#cropImage').html(response.cropImage);\n          $('#cropImage').fadeIn();\n          KTCropper.init();\n          KTApp.initTooltips();\n        }\n      }\n    }\n  });\n});\n$(document).on('click', '#kt_modal_manager_edition .cancelCrop', function (event) {\n  event.preventDefault();\n  $('#cropImage').fadeOut();\n  $('#cropImage').html('');\n  $('.attachment-media-view').fadeIn();\n});\n\"use strict\";\n\nvar KTCropper = {\n  init: function init() {\n    var e, t, a;\n    e = document.getElementById(\"image-upload\"), t = {\n      crop: function crop(e) {\n        document.getElementById(\"dataX\").value = Math.round(e.detail.x), document.getElementById(\"dataY\").value = Math.round(e.detail.y), document.getElementById(\"dataWidth\").value = Math.round(e.detail.width), document.getElementById(\"dataHeight\").value = Math.round(e.detail.height), document.getElementById(\"dataRotate\").value = e.detail.rotate, document.getElementById(\"dataScaleX\").value = e.detail.scaleX, document.getElementById(\"dataScaleY\").value = e.detail.scaleY;\n        var t = document.getElementById(\"cropper-preview-lg\");\n        t.innerHTML = \"\", t.appendChild(a.getCroppedCanvas({\n          width: 256,\n          height: 160\n        }));\n        var n = document.getElementById(\"cropper-preview-md\");\n        n.innerHTML = \"\", n.appendChild(a.getCroppedCanvas({\n          width: 128,\n          height: 80\n        }));\n        var d = document.getElementById(\"cropper-preview-sm\");\n        d.innerHTML = \"\", d.appendChild(a.getCroppedCanvas({\n          width: 64,\n          height: 40\n        }));\n        var o = document.getElementById(\"cropper-preview-xs\");\n        o.innerHTML = \"\", o.appendChild(a.getCroppedCanvas({\n          width: 32,\n          height: 20\n        }));\n      },\n      cropmove: function cropmove(e) {\n        console.log(e.type, e.detail.action);\n      }\n    }, a = new Cropper(e, t), document.getElementById(\"cropper-buttons\").querySelectorAll(\"[data-method]\").forEach(function (e) {\n      e.addEventListener(\"click\", function (t) {\n        var n,\n            d = e.getAttribute(\"data-method\"),\n            o = e.getAttribute(\"data-option\") || undefined,\n            r = e.getAttribute(\"data-second-option\") || undefined;\n\n        try {\n          o = JSON.parse(o);\n        } catch (t) {}\n\n        if (n = r ? o ? '' : a[d]() : a[d](o, r), \"getCroppedCanvas\" === d) {// var i = document.getElementById(\"getCroppedCanvasModal\").querySelector(\".modal-body\");\n          // console.log(n);\n          // i.innerHTML = \"\", i.appendChild(n)\n        }\n\n        if (e.getAttribute(\"data-method\") == 'move') {\n          a.move(e.getAttribute(\"data-option\"), e.getAttribute(\"data-second-option\"));\n        }\n\n        if (e.getAttribute(\"data-method\") == 'getCroppedCanvas') {\n          option = '';\n\n          if (e.getAttribute(\"data-option\") != \"\") {\n            console.log(e.getAttribute(\"data-option\"));\n            option = JSON.parse(e.getAttribute(\"data-option\"));\n          }\n\n          a.getCroppedCanvas(option).toBlob(function (blob) {\n            var formData = new FormData(); // Pass the image file name as the third parameter if necessary.\n\n            formData.append('uuid', $('#image-upload').attr('data-uuid'));\n            formData.append('field', false);\n            formData.append('imageCustomEdition', true);\n            formData.append('croppedImage', blob, $('#image-upload').attr('data-mine'));\n            formData.append([crsftoken], $('meta[name=\"X-CSRF-TOKEN\"]').attr('content'));\n            $.ajax({\n              type: 'POST',\n              url: current_url + \"/cropFile\",\n              data: formData,\n              processData: false,\n              contentType: false,\n              dataType: \"json\",\n              success: function success(result, status, xhr) {\n                $.notify({\n                  title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n                  message: result.success.message ? result.success.message : result.error.message\n                }, {\n                  type: result.success.message ? 'success' : 'warning'\n                });\n\n                if (xhr.status == 200) {\n                  $('#cropImage').fadeOut();\n                  $('#cropImage').html('');\n                  $('.attachment-media-view').fadeIn();\n                  $('#imageCustom').html(result.imageCustomEdition);\n                }\n              }\n            });\n          }, $('#image-upload').attr('data-mine'));\n        }\n\n        var c = document.querySelector(\"#putData\");\n\n        try {\n          c.value = JSON.stringify(n);\n        } catch (t) {\n          n || (c.value = n);\n        }\n      });\n    }), document.getElementById(\"setAspectRatio\").querySelectorAll('[name=\"aspectRatio\"]').forEach(function (e) {\n      e.addEventListener(\"click\", function (e) {\n        a.setAspectRatio(e.target.value);\n      });\n    });\n  }\n}; // on supprime les fichiers custom\n\n$(document).on('click', '#kt_apps_manager_media .deleteFileCustom', function (event) {\n  var _data7;\n\n  event.preventDefault();\n  var deleteFileCustom = $(this);\n  $.ajax({\n    type: 'POST',\n    url: current_url + \"/deteteFileCustom\",\n    data: (_data7 = {}, _defineProperty(_data7, crsftoken, $('meta[name=\"X-CSRF-TOKEN\"]').attr('content')), _defineProperty(_data7, \"format\", $(this).data('format')), _defineProperty(_data7, \"uuid\", $(this).data('uuid')), _data7),\n    dataType: \"json\",\n    success: function success(result, status, xhr) {\n      $.notify({\n        title: result.success.message ? _LANG_.updated + \"!\" : _LANG_.warning + \"!\",\n        message: result.success.message ? result.success.message : result.error.message\n      }, {\n        type: result.success.message ? 'success' : 'warning'\n      });\n\n      if (xhr.status == 200) {\n        deleteFileCustom.parent().parent().remove();\n      }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvY3VzdG9tL21lZGlhcy9pbWFnZU1hbmFnZXIuanM/MWZkMyJdLCJuYW1lcyI6WyJEcm9wem9uZSIsImF1dG9EaXNjb3ZlciIsInByb3RvdHlwZSIsImRlZmF1bHRPcHRpb25zIiwiZGljdERlZmF1bHRNZXNzYWdlIiwiX0xBTkdfIiwiZGljdEZhbGxiYWNrTWVzc2FnZSIsImRpY3RGYWxsYmFja1RleHQiLCJkaWN0RmlsZVRvb0JpZyIsImRpY3RJbnZhbGlkRmlsZVR5cGUiLCJkaWN0UmVzcG9uc2VFcnJvciIsImRpY3RDYW5jZWxVcGxvYWQiLCJkaWN0Q2FuY2VsVXBsb2FkQ29uZmlybWF0aW9uIiwiZGljdFJlbW92ZUZpbGUiLCJkaWN0TWF4RmlsZXNFeGNlZWRlZCIsIm9wdGlvbnMiLCJkem9uZSIsImFjY2VwdGVkRmlsZXMiLCIkIiwiZmlsZXNEcm9wem9uZSIsInVybCIsImN1cnJlbnRfdXJsIiwibm93IiwiaGVhZGVycyIsImF0dHIiLCJwYXJhbXMiLCJmaWxlcyIsInhociIsImNodW5rIiwiZHpVdWlkIiwiZmlsZSIsInVwbG9hZCIsInV1aWQiLCJkekNodW5rSW5kZXgiLCJpbmRleCIsImR6VG90YWxGaWxlU2l6ZSIsInNpemUiLCJkekN1cnJlbnRDaHVua1NpemUiLCJkYXRhQmxvY2siLCJkYXRhIiwiZHpUb3RhbENodW5rQ291bnQiLCJ0b3RhbENodW5rQ291bnQiLCJkekNodW5rQnl0ZU9mZnNldCIsImNodW5rU2l6ZSIsImR6Q2h1bmtTaXplIiwiZHpGaWxlbmFtZSIsIm5hbWUiLCJ1c2VySUQiLCJ1cGxvYWRtdWx0aXBsZSIsImFkZFJlbW92ZUxpbmtzIiwidGltZW91dCIsIm1heEZpbGVzaXplIiwiTWVkaWFzIiwiY2h1bmtpbmciLCJmb3JjZUNodW5raW5nIiwicmV0cnlDaHVua3MiLCJyZXRyeUNodW5rc0xpbWl0IiwiaW5pdCIsIm9uIiwiY29uc29sZSIsImxvZyIsImFqYXgiLCJ0eXBlIiwiY29udGVudFR5cGUiLCJjcnNmdG9rZW4iLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJyZXNwb25zZSIsInN0YXR1cyIsImh0bWwiLCJwcmV2aWV3RWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInNldFRpbWVvdXQiLCJmYWRlT3V0IiwiZm9ybURhdGEiLCJLVEFwcCIsImJsb2NrIiwib3ZlcmxheUNvbG9yIiwic3RhdGUiLCJyZXMiLCJTVUNDRVNTIiwibm90aWZ5IiwidGl0bGUiLCJ1cGRhdGVkIiwibWVzc2FnZSIsInNhdmVkX2RhdGEiLCJ1bmJsb2NrIiwiZmFkZUluIiwiZXJyb3IiLCJzdGF0dXNUZXh0IiwicmVzdWx0IiwiZG9jdW1lbnQiLCJlIiwicHJldmVudERlZmF1bHQiLCJ1dWlkTWVkaWEiLCJtb2RhbCIsImV2ZW50Iiwic2VyaWFsaXplIiwid2FybmluZyIsImltYWdlTWFuYWdlciIsImJlZm9yZVNlbmQiLCJyZW1vdmUiLCJjcm9wIiwiY3JvcEltYWdlIiwiS1RDcm9wcGVyIiwiaW5pdFRvb2x0aXBzIiwidCIsImEiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwiTWF0aCIsInJvdW5kIiwiZGV0YWlsIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsInJvdGF0ZSIsInNjYWxlWCIsInNjYWxlWSIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwiZ2V0Q3JvcHBlZENhbnZhcyIsIm4iLCJkIiwibyIsImNyb3Btb3ZlIiwiYWN0aW9uIiwiQ3JvcHBlciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEF0dHJpYnV0ZSIsInVuZGVmaW5lZCIsInIiLCJKU09OIiwicGFyc2UiLCJtb3ZlIiwib3B0aW9uIiwidG9CbG9iIiwiYmxvYiIsIkZvcm1EYXRhIiwiYXBwZW5kIiwicHJvY2Vzc0RhdGEiLCJpbWFnZUN1c3RvbUVkaXRpb24iLCJjIiwicXVlcnlTZWxlY3RvciIsInN0cmluZ2lmeSIsInNldEFzcGVjdFJh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Q2E5QyxDQUFDLENBQUMsMkJBQUQsQ0FBRCxDQUErQk0sSUFBL0IsQ0FBb0MsU0FBcEMsQ0FEYixxQ0FFUU4sQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRcUIsSUFBUixDQUFhLFFBQWIsQ0FGUixtQ0FHTXJCLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUXFCLElBQVIsQ0FBYSxNQUFiLENBSE4sVUFIRDtBQVNIMEIsWUFBUSxFQUFFLE1BVFA7QUFVSEMsV0FBTyxFQUFFLGlCQUFTeUIsTUFBVCxFQUFpQnZCLE1BQWpCLEVBQXlCekMsR0FBekIsRUFBOEI7QUFFbkNULE9BQUMsQ0FBQ2dFLE1BQUYsQ0FBUztBQUNMQyxhQUFLLEVBQUdRLE1BQU0sQ0FBQ3pCLE9BQVAsQ0FBZW1CLE9BQWhCLEdBQTJCaEYsTUFBTSxDQUFDK0UsT0FBUCxHQUFpQixHQUE1QyxHQUFrRC9FLE1BQU0sQ0FBQzhGLE9BQVAsR0FBaUIsR0FEckU7QUFFTGQsZUFBTyxFQUFHTSxNQUFNLENBQUN6QixPQUFQLENBQWVtQixPQUFoQixHQUEyQk0sTUFBTSxDQUFDekIsT0FBUCxDQUFlbUIsT0FBMUMsR0FBb0RNLE1BQU0sQ0FBQ0YsS0FBUCxDQUFhSjtBQUZyRSxPQUFULEVBR0c7QUFDQ3ZCLFlBQUksRUFBRzZCLE1BQU0sQ0FBQ3pCLE9BQVAsQ0FBZW1CLE9BQWhCLEdBQTJCLFNBQTNCLEdBQXVDO0FBRDlDLE9BSEg7O0FBT0EsVUFBSTFELEdBQUcsQ0FBQ3lDLE1BQUosSUFBYyxHQUFsQixFQUF1QjtBQUNuQm1GLHdCQUFnQixDQUFDQyxNQUFqQixHQUEwQkEsTUFBMUIsR0FBbUNsRCxNQUFuQztBQUNIO0FBRUo7QUF2QkUsR0FBUDtBQXlCSCxDQS9CRCIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9wYWdlcy9jdXN0b20vbWVkaWFzL2ltYWdlTWFuYWdlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIkRyb3B6b25lLmF1dG9EaXNjb3ZlciA9IGZhbHNlO1xuRHJvcHpvbmUucHJvdG90eXBlLmRlZmF1bHRPcHRpb25zLmRpY3REZWZhdWx0TWVzc2FnZSA9IF9MQU5HXy5kaWN0RGVmYXVsdE1lc3NhZ2U7XG5Ecm9wem9uZS5wcm90b3R5cGUuZGVmYXVsdE9wdGlvbnMuZGljdEZhbGxiYWNrTWVzc2FnZSA9IF9MQU5HXy5kaWN0RmFsbGJhY2tNZXNzYWdlO1xuRHJvcHpvbmUucHJvdG90eXBlLmRlZmF1bHRPcHRpb25zLmRpY3RGYWxsYmFja1RleHQgPSBfTEFOR18uZGljdEZhbGxiYWNrVGV4dDtcbkRyb3B6b25lLnByb3RvdHlwZS5kZWZhdWx0T3B0aW9ucy5kaWN0RmlsZVRvb0JpZyA9IF9MQU5HXy5kaWN0RmlsZVRvb0JpZztcbkRyb3B6b25lLnByb3RvdHlwZS5kZWZhdWx0T3B0aW9ucy5kaWN0SW52YWxpZEZpbGVUeXBlID0gX0xBTkdfLmRpY3RJbnZhbGlkRmlsZVR5cGU7XG5Ecm9wem9uZS5wcm90b3R5cGUuZGVmYXVsdE9wdGlvbnMuZGljdFJlc3BvbnNlRXJyb3IgPSBfTEFOR18uZGljdFJlc3BvbnNlRXJyb3I7XG5Ecm9wem9uZS5wcm90b3R5cGUuZGVmYXVsdE9wdGlvbnMuZGljdENhbmNlbFVwbG9hZCA9IF9MQU5HXy5kaWN0Q2FuY2VsVXBsb2FkO1xuRHJvcHpvbmUucHJvdG90eXBlLmRlZmF1bHRPcHRpb25zLmRpY3RDYW5jZWxVcGxvYWRDb25maXJtYXRpb24gPSBfTEFOR18uZGljdENhbmNlbFVwbG9hZENvbmZpcm1hdGlvbjtcbkRyb3B6b25lLnByb3RvdHlwZS5kZWZhdWx0T3B0aW9ucy5kaWN0UmVtb3ZlRmlsZSA9IF9MQU5HXy5kaWN0UmVtb3ZlRmlsZTtcbkRyb3B6b25lLnByb3RvdHlwZS5kZWZhdWx0T3B0aW9ucy5kaWN0TWF4RmlsZXNFeGNlZWRlZCA9IF9MQU5HXy5kaWN0TWF4RmlsZXNFeGNlZWRlZDtcbkRyb3B6b25lLm9wdGlvbnMuZHpvbmUgPSB7XG4gICAgYWNjZXB0ZWRGaWxlczogXCJpbWFnZS9qcGVnLGltYWdlL3BuZyxpbWFnZS9naWZcIlxufVxuJChmdW5jdGlvbigpIHtcbiAgICB2YXIgZmlsZXNEcm9wem9uZSA9IG5ldyBEcm9wem9uZShcIiNrdF9kcm9wem9uZV9tZWRpYV9tYW5hZ2VyXCIsIHtcblxuICAgICAgICB1cmw6IGN1cnJlbnRfdXJsICsgXCIvdXBsb2FkP3RpbWU9XCIgKyAkLm5vdygpLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnWC1DU1JGLVRPS0VOJzogJCgnbWV0YVtuYW1lPVwiWC1DU1JGLVRPS0VOXCJdJykuYXR0cignY29udGVudCcpLFxuICAgICAgICAgICAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnXG4gICAgICAgIH0sXG4gICAgICAgIHBhcmFtczogZnVuY3Rpb24oZmlsZXMsIHhociwgY2h1bmspIHtcbiAgICAgICAgICAgIGlmIChjaHVuaykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGR6VXVpZDogY2h1bmsuZmlsZS51cGxvYWQudXVpZCxcbiAgICAgICAgICAgICAgICAgICAgZHpDaHVua0luZGV4OiBjaHVuay5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgZHpUb3RhbEZpbGVTaXplOiBjaHVuay5maWxlLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIGR6Q3VycmVudENodW5rU2l6ZTogY2h1bmsuZGF0YUJsb2NrLmRhdGEuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgZHpUb3RhbENodW5rQ291bnQ6IGNodW5rLmZpbGUudXBsb2FkLnRvdGFsQ2h1bmtDb3VudCxcbiAgICAgICAgICAgICAgICAgICAgZHpDaHVua0J5dGVPZmZzZXQ6IGNodW5rLmluZGV4ICogdGhpcy5vcHRpb25zLmNodW5rU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgZHpDaHVua1NpemU6IHRoaXMub3B0aW9ucy5jaHVua1NpemUsXG4gICAgICAgICAgICAgICAgICAgIGR6RmlsZW5hbWU6IGNodW5rLmZpbGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcklEOiAxLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFjY2VwdGVkRmlsZXM6IFwiaW1hZ2UvanBlZyxpbWFnZS9wbmcsaW1hZ2UvZ2lmXCIsXG4gICAgICAgIHVwbG9hZG11bHRpcGxlOiB0cnVlLFxuICAgICAgICBhZGRSZW1vdmVMaW5rczogITAsXG4gICAgICAgIHRpbWVvdXQ6IDAsXG4gICAgICAgIC8vIHBhcmFsbGVsVXBsb2FkczogMSwgLy8gc2luY2Ugd2UncmUgdXNpbmcgYSBnbG9iYWwgJ2N1cnJlbnRGaWxlJywgd2UgY291bGQgaGF2ZSBpc3N1ZXMgaWYgcGFyYWxsZWxVcGxvYWRzID4gMSwgc28gd2UnbGwgbWFrZSBpdCA9IDFcbiAgICAgICAgbWF4RmlsZXNpemU6IE1lZGlhcy5tYXhGaWxlc2l6ZSwgLy8gbWF4IGluZGl2aWR1YWwgZmlsZSBzaXplIDEwMjQgTUJcbiAgICAgICAgY2h1bmtpbmc6IHRydWUsIC8vIGVuYWJsZSBjaHVua2luZ1xuICAgICAgICBmb3JjZUNodW5raW5nOiB0cnVlLCAvLyBmb3JjZXMgY2h1bmtpbmcgd2hlbiBmaWxlLnNpemUgPCBjaHVua1NpemVcbiAgICAgICAgLy8gcGFyYWxsZWxDaHVua1VwbG9hZHM6IHRydWUsIC8vIGFsbG93cyBjaHVua3MgdG8gYmUgdXBsb2FkZWQgaW4gcGFyYWxsZWwgKHRoaXMgaXMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmFsbGVsVXBsb2FkcyBvcHRpb24pXG4gICAgICAgIGNodW5rU2l6ZTogNzUzODc2MDgsIC8vIGNodW5rIHNpemUgMSwwMDAsMDAwIGJ5dGVzICh+MU1CKVxuICAgICAgICByZXRyeUNodW5rczogdHJ1ZSwgLy8gcmV0cnkgY2h1bmtzIG9uIGZhaWx1cmVcbiAgICAgICAgcmV0cnlDaHVua3NMaW1pdDogMywgLy8gcmV0cnkgbWF4aW11bSBvZiAzIHRpbWVzIChkZWZhdWx0IGlzIDMpXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB0aGlzLm9uKFwiYWRkZWRmaWxlXCIsIGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYWRkZWRmaWxlJyk7XG4gICAgICAgICAgICAgICAgLy90aGlzLnJlbW92ZUZpbGUoZmlsZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbihcImNvbXBsZXRlXCIsIGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY29tcGxldGUnKTtcblxuICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGN1cnJlbnRfdXJsICsgXCIvZ2V0RGlzcGxheUltYWdlTWFuYWdlclwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtjcnNmdG9rZW5dOiAkKCdtZXRhW25hbWU9XCJYLUNTUkYtVE9LRU5cIl0nKS5hdHRyKCdjb250ZW50JyksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UsIHN0YXR1cywgeGhyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjaW1hZ2VNYW5hZ2VyJykuaHRtbChyZXNwb25zZS5odG1sKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbignc3VjY2VzcycsIGZ1bmN0aW9uKGZpbGUsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N1Y2Nlc3MnKTtcblxuICAgICAgICAgICAgICAgIGlmIChmaWxlLnByZXZpZXdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlLnByZXZpZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkei1zdWNjZXNzXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZHotc3VjY2VzcycpLmZhZGVPdXQoJ3Nsb3cnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMub24oXCJzZW5kaW5nXCIsIGZ1bmN0aW9uKGZpbGUsIHhociwgZm9ybURhdGEpIHtcblxuICAgICAgICAgICAgICAgIEtUQXBwLmJsb2NrKFwiI2ltYWdlTWFuYWdlclwiLCB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJsYXlDb2xvcjogXCIjMDAwMDAwXCIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbihcInF1ZXVlY29tcGxldGVcIiwgZnVuY3Rpb24oZmlsZSwgcmVzKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlc0Ryb3B6b25lKTtcblxuICAgICAgICAgICAgICAgIGlmIChmaWxlc0Ryb3B6b25lLmZpbGVzWzBdLnN0YXR1cyA9PSBEcm9wem9uZS5TVUNDRVNTKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF9MQU5HXy51cGRhdGVkICsgXCIhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfTEFOR18uc2F2ZWRfZGF0YVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcydcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgS1RBcHAudW5ibG9jayhcIiNpbWFnZU1hbmFnZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICQoJy5kei1zdWNjZXNzJykuZmFkZU91dCgnc2xvdycpO1xuICAgICAgICAgICAgICAgICAgICAkKCcuZHotbWVzc2FnZScpLmZhZGVJbignc2xvdycpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy5yZW1vdmVBbGxGaWxlcygpO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiAoaW1hZ2VNYW5hZ2VyID09ICdyZWxvYWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBLVEFwcC51bmJsb2NrKFwiI2ltYWdlTWFuYWdlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICQoJyNpbWFnZU1hbmFnZXInKS5odG1sKHJlc3VsdC5odG1sKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZmlsZSwgcmVzcG9uc2UsIHhocikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcmVkJywgZmlsZSwgcmVzcG9uc2UsIHhocik7IC8vIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHhociAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0T3B0aW9ucy5lcnJvcihmaWxlLCB4aHIuc3RhdHVzVGV4dCk7IC8vIHVzZSB4aHIgZXJyIChmcm9tIHNlcnZlcilcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRPcHRpb25zLmVycm9yKGZpbGUsIHJlc3BvbnNlKTsgLy8gdXNlIGRlZmF1bHQgKGZyb20gZHJvcHpvbmUpXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogX0xBTkdfLmVycm9yICsgXCIgOiA1MDAgXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLmVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMub24oXCJyZW1vdmVkZmlsZVwiLCBmdW5jdGlvbihmaWxlLCByZXNwb25zZSwgeGhyKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVtb3ZlZGZpbGUnLCBmaWxlLCByZXNwb25zZSwgeGhyKTsgLy8gZm9yIGRlYnVnZ2luZ1xuXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogY3VycmVudF91cmwgKyBcIi9yZW1vdmVkZmlsZS9cIiArIGZpbGUudXBsb2FkLnV1aWQsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgW2Nyc2Z0b2tlbl06ICQoJ21ldGFbbmFtZT1cIlgtQ1NSRi1UT0tFTlwiXScpLmF0dHIoJ2NvbnRlbnQnKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHQsIHN0YXR1cywgeGhyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICAvLyBEaXNwbGF5IG1hbmFnZXIgSW1hZ2VcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnLnNlbGVjdC1pbWFnZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgdmFyIHV1aWRNZWRpYSA9ICQodGhpcykuZGF0YShcInV1aWQtbWVkaWFcIik7XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogY3VycmVudF91cmwgKyBcIi9nZXRNYW5hZ2VyRWRpdGlvblwiLFxuICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgnLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIFtjcnNmdG9rZW5dOiAkKCdtZXRhW25hbWU9XCJYLUNTUkYtVE9LRU5cIl0nKS5hdHRyKCdjb250ZW50JyksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdXVpZDogdXVpZE1lZGlhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCwgc3RhdHVzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2ltYWdlTWFuYWdlcl9lZGl0aW9uJykuaHRtbChyZXN1bHQuaHRtbCk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNpbWFnZU1hbmFnZXJfZWRpdGlvbiA+ICNrdF9tb2RhbF9tYW5hZ2VyX2VkaXRpb24nKS5tb2RhbChcInNob3dcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIFNhdmUgZGF0YSBJbWFnZVxuICAgICQoZG9jdW1lbnQpLm9uKCdzdWJtaXQnLCAnI2t0X2FwcHNfbWFuYWdlcl9tZWRpYScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogY3VycmVudF91cmwgKyBcIi9zYXZlTWFuYWdlckVkaXRpb25cIixcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBbY3JzZnRva2VuXTogJCgnbWV0YVtuYW1lPVwiWC1DU1JGLVRPS0VOXCJdJykuYXR0cignY29udGVudCcpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAkKHRoaXMpLnNlcmlhbGl6ZSgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0LCBzdGF0dXMsIHhocikge1xuICAgICAgICAgICAgICAgICQubm90aWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChyZXN1bHQuc3VjY2Vzcy5tZXNzYWdlKSA/IF9MQU5HXy51cGRhdGVkICsgXCIhXCIgOiBfTEFOR18ud2FybmluZyArIFwiIVwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAocmVzdWx0LnN1Y2Nlc3MubWVzc2FnZSkgPyByZXN1bHQuc3VjY2Vzcy5tZXNzYWdlIDogcmVzdWx0LmVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IChyZXN1bHQuc3VjY2Vzcy5tZXNzYWdlKSA/ICdzdWNjZXNzJyA6ICd3YXJuaW5nJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIERlbGV0ZSBGaWxlXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5kZWxldGVGaWxlTWVkaWEnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgaW1hZ2VNYW5hZ2VyID0gJCh0aGlzKS5kYXRhKCdpbWFnZW1hbmFnZXInKTtcblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgdXJsOiBjdXJyZW50X3VybCArIFwiL3JlbW92ZUZpbGVcIixcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBbY3JzZnRva2VuXTogJCgnbWV0YVtuYW1lPVwiWC1DU1JGLVRPS0VOXCJdJykuYXR0cignY29udGVudCcpLFxuICAgICAgICAgICAgICAgIHV1aWQ6ICQodGhpcykuZGF0YSgndXVpZCcpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgICAgICAgICAgS1RBcHAuYmxvY2soXCIjaW1hZ2VNYW5hZ2VyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheUNvbG9yOiBcIiMwMDAwMDBcIixcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IFwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0LCBzdGF0dXMsIHhocikge1xuXG4gICAgICAgICAgICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogKHJlc3VsdC5zdWNjZXNzLm1lc3NhZ2UpID8gX0xBTkdfLnVwZGF0ZWQgKyBcIiFcIiA6IF9MQU5HXy53YXJuaW5nICsgXCIhXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IChyZXN1bHQuc3VjY2Vzcy5tZXNzYWdlKSA/IHJlc3VsdC5zdWNjZXNzLm1lc3NhZ2UgOiByZXN1bHQuZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogKHJlc3VsdC5zdWNjZXNzLm1lc3NhZ2UpID8gJ3N1Y2Nlc3MnIDogJ3dhcm5pbmcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJyNpbWFnZU1hbmFnZXJfZWRpdGlvbiAja3RfbW9kYWxfbWFuYWdlcl9lZGl0aW9uJykubW9kYWwoXCJoaWRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAkKCcubW9kYWwtYmFja2Ryb3AnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2ltYWdlTWFuYWdlcl9lZGl0aW9uJykuaHRtbChcIlwiKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VNYW5hZ2VyID09ICdyZWxvYWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBLVEFwcC51bmJsb2NrKFwiI2ltYWdlTWFuYWdlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNpbWFnZU1hbmFnZXInKS5odG1sKHJlc3VsdC5odG1sKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcblxuLy8gT04gY3JvcCBsZSBmaWNoaWVyIGRlbW5hbmTDqVxuLy9jcm9wcGVkRmlsZVxuJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNrdF9hcHBzX21hbmFnZXJfbWVkaWEgLmNyb3BwZWRGaWxlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgdXVpZCA9ICQodGhpcykuZGF0YSgndXVpZCcpO1xuXG4gICAgJC5hamF4KHtcbiAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICB1cmw6IGN1cnJlbnRfdXJsICsgXCIvZ2V0Q3JvcFRlbXBsYXRlXCIsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIFtjcnNmdG9rZW5dOiAkKCdtZXRhW25hbWU9XCJYLUNTUkYtVE9LRU5cIl0nKS5hdHRyKCdjb250ZW50JyksXG4gICAgICAgICAgICB1dWlkOiAkKHRoaXMpLmRhdGEoJ3V1aWQnKVxuICAgICAgICB9LFxuICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhocikge1xuICAgICAgICAgICAgS1RBcHAuYmxvY2soXCIudGh1bWJuYWlsLWltYWdlXCIsIHtcbiAgICAgICAgICAgICAgICBvdmVybGF5Q29sb3I6IFwiIzAwMDAwMFwiLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBcInByaW1hcnlcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlLCBzdGF0dXMsIHhocikge1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgS1RBcHAudW5ibG9jayhcIi50aHVtYm5haWwtaW1hZ2VcIik7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmNyb3AgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuYXR0YWNobWVudC1tZWRpYS12aWV3JykuZmFkZU91dCgpO1xuICAgICAgICAgICAgICAgICAgICAkKCcjY3JvcEltYWdlJykuaHRtbChyZXNwb25zZS5jcm9wSW1hZ2UpO1xuICAgICAgICAgICAgICAgICAgICAkKCcjY3JvcEltYWdlJykuZmFkZUluKCk7XG4gICAgICAgICAgICAgICAgICAgIEtUQ3JvcHBlci5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgIEtUQXBwLmluaXRUb29sdGlwcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSk7XG59KTtcblxuJChkb2N1bWVudCkub24oJ2NsaWNrJywgJyNrdF9tb2RhbF9tYW5hZ2VyX2VkaXRpb24gLmNhbmNlbENyb3AnLCBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgJCgnI2Nyb3BJbWFnZScpLmZhZGVPdXQoKTtcbiAgICAkKCcjY3JvcEltYWdlJykuaHRtbCgnJyk7XG4gICAgJCgnLmF0dGFjaG1lbnQtbWVkaWEtdmlldycpLmZhZGVJbigpO1xufSk7XG5cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgS1RDcm9wcGVyID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSwgdCwgYTtcbiAgICAgICAgZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW1hZ2UtdXBsb2FkXCIpLCB0ID0ge1xuICAgICAgICAgICAgY3JvcDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGF0YVhcIikudmFsdWUgPSBNYXRoLnJvdW5kKGUuZGV0YWlsLngpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhdGFZXCIpLnZhbHVlID0gTWF0aC5yb3VuZChlLmRldGFpbC55KSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRhV2lkdGhcIikudmFsdWUgPSBNYXRoLnJvdW5kKGUuZGV0YWlsLndpZHRoKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRhSGVpZ2h0XCIpLnZhbHVlID0gTWF0aC5yb3VuZChlLmRldGFpbC5oZWlnaHQpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRhdGFSb3RhdGVcIikudmFsdWUgPSBlLmRldGFpbC5yb3RhdGUsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGF0YVNjYWxlWFwiKS52YWx1ZSA9IGUuZGV0YWlsLnNjYWxlWCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkYXRhU2NhbGVZXCIpLnZhbHVlID0gZS5kZXRhaWwuc2NhbGVZO1xuICAgICAgICAgICAgICAgIHZhciB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjcm9wcGVyLXByZXZpZXctbGdcIik7XG4gICAgICAgICAgICAgICAgdC5pbm5lckhUTUwgPSBcIlwiLCB0LmFwcGVuZENoaWxkKGEuZ2V0Q3JvcHBlZENhbnZhcyh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyNTYsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTYwXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHZhciBuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjcm9wcGVyLXByZXZpZXctbWRcIik7XG4gICAgICAgICAgICAgICAgbi5pbm5lckhUTUwgPSBcIlwiLCBuLmFwcGVuZENoaWxkKGEuZ2V0Q3JvcHBlZENhbnZhcyh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMjgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogODBcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNyb3BwZXItcHJldmlldy1zbVwiKTtcbiAgICAgICAgICAgICAgICBkLmlubmVySFRNTCA9IFwiXCIsIGQuYXBwZW5kQ2hpbGQoYS5nZXRDcm9wcGVkQ2FudmFzKHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDY0LFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHZhciBvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjcm9wcGVyLXByZXZpZXcteHNcIik7XG4gICAgICAgICAgICAgICAgby5pbm5lckhUTUwgPSBcIlwiLCBvLmFwcGVuZENoaWxkKGEuZ2V0Q3JvcHBlZENhbnZhcyh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAzMixcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyMFxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyb3Btb3ZlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS50eXBlLCBlLmRldGFpbC5hY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBhID0gbmV3IENyb3BwZXIoZSwgdCksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3JvcHBlci1idXR0b25zXCIpLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1tZXRob2RdXCIpLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIHZhciBuLCBkID0gZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgbyA9IGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1vcHRpb25cIikgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICByID0gZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNlY29uZC1vcHRpb25cIikgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG8gPSBKU09OLnBhcnNlKG8pXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge31cbiAgICAgICAgICAgICAgICBpZiAobiA9IHIgPyBvID8gJycgOiBhW2RdKCkgOiBhW2RdKG8sIHIpLCBcImdldENyb3BwZWRDYW52YXNcIiA9PT0gZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgaSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2V0Q3JvcHBlZENhbnZhc01vZGFsXCIpLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtYm9keVwiKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobik7XG4gICAgICAgICAgICAgICAgICAgIC8vIGkuaW5uZXJIVE1MID0gXCJcIiwgaS5hcHBlbmRDaGlsZChuKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PSAnbW92ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5tb3ZlKGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1vcHRpb25cIiksIGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zZWNvbmQtb3B0aW9uXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikgPT0gJ2dldENyb3BwZWRDYW52YXMnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9wdGlvblwiKSAhPSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlLmdldEF0dHJpYnV0ZShcImRhdGEtb3B0aW9uXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9IEpTT04ucGFyc2UoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9wdGlvblwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhLmdldENyb3BwZWRDYW52YXMob3B0aW9uKS50b0Jsb2IoKGJsb2IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBhc3MgdGhlIGltYWdlIGZpbGUgbmFtZSBhcyB0aGUgdGhpcmQgcGFyYW1ldGVyIGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgndXVpZCcsICQoJyNpbWFnZS11cGxvYWQnKS5hdHRyKCdkYXRhLXV1aWQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpZWxkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdpbWFnZUN1c3RvbUVkaXRpb24nLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnY3JvcHBlZEltYWdlJywgYmxvYiwgJCgnI2ltYWdlLXVwbG9hZCcpLmF0dHIoJ2RhdGEtbWluZScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChbY3JzZnRva2VuXSwgJCgnbWV0YVtuYW1lPVwiWC1DU1JGLVRPS0VOXCJdJykuYXR0cignY29udGVudCcpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBjdXJyZW50X3VybCArIFwiL2Nyb3BGaWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0LCBzdGF0dXMsIHhocikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQubm90aWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAocmVzdWx0LnN1Y2Nlc3MubWVzc2FnZSkgPyBfTEFOR18udXBkYXRlZCArIFwiIVwiIDogX0xBTkdfLndhcm5pbmcgKyBcIiFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IChyZXN1bHQuc3VjY2Vzcy5tZXNzYWdlKSA/IHJlc3VsdC5zdWNjZXNzLm1lc3NhZ2UgOiByZXN1bHQuZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAocmVzdWx0LnN1Y2Nlc3MubWVzc2FnZSkgPyAnc3VjY2VzcycgOiAnd2FybmluZydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3JvcEltYWdlJykuZmFkZU91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Nyb3BJbWFnZScpLmh0bWwoJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmF0dGFjaG1lbnQtbWVkaWEtdmlldycpLmZhZGVJbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2ltYWdlQ3VzdG9tJykuaHRtbChyZXN1bHQuaW1hZ2VDdXN0b21FZGl0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sICQoJyNpbWFnZS11cGxvYWQnKS5hdHRyKCdkYXRhLW1pbmUnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwdXREYXRhXCIpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGMudmFsdWUgPSBKU09OLnN0cmluZ2lmeShuKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbiB8fCAoYy52YWx1ZSA9IG4pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2V0QXNwZWN0UmF0aW9cIikucXVlcnlTZWxlY3RvckFsbCgnW25hbWU9XCJhc3BlY3RSYXRpb1wiXScpLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGEuc2V0QXNwZWN0UmF0aW8oZS50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG4vLyBvbiBzdXBwcmltZSBsZXMgZmljaGllcnMgY3VzdG9tXG4kKGRvY3VtZW50KS5vbignY2xpY2snLCAnI2t0X2FwcHNfbWFuYWdlcl9tZWRpYSAuZGVsZXRlRmlsZUN1c3RvbScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciBkZWxldGVGaWxlQ3VzdG9tID0gJCh0aGlzKTtcblxuXG4gICAgJC5hamF4KHtcbiAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICB1cmw6IGN1cnJlbnRfdXJsICsgXCIvZGV0ZXRlRmlsZUN1c3RvbVwiLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBbY3JzZnRva2VuXTogJCgnbWV0YVtuYW1lPVwiWC1DU1JGLVRPS0VOXCJdJykuYXR0cignY29udGVudCcpLFxuICAgICAgICAgICAgZm9ybWF0OiAkKHRoaXMpLmRhdGEoJ2Zvcm1hdCcpLFxuICAgICAgICAgICAgdXVpZDogJCh0aGlzKS5kYXRhKCd1dWlkJylcbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3VsdCwgc3RhdHVzLCB4aHIpIHtcblxuICAgICAgICAgICAgJC5ub3RpZnkoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAocmVzdWx0LnN1Y2Nlc3MubWVzc2FnZSkgPyBfTEFOR18udXBkYXRlZCArIFwiIVwiIDogX0xBTkdfLndhcm5pbmcgKyBcIiFcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAocmVzdWx0LnN1Y2Nlc3MubWVzc2FnZSkgPyByZXN1bHQuc3VjY2Vzcy5tZXNzYWdlIDogcmVzdWx0LmVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAocmVzdWx0LnN1Y2Nlc3MubWVzc2FnZSkgPyAnc3VjY2VzcycgOiAnd2FybmluZydcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBkZWxldGVGaWxlQ3VzdG9tLnBhcmVudCgpLnBhcmVudCgpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/medias/imageManager.js\n");

/***/ }),

/***/ 120:
/*!*************************************************************************!*\
  !*** multi ./resources/metronic/js/pages/custom/medias/imageManager.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/spreadci4/public/admin/themes/metronic/resources/metronic/js/pages/custom/medias/imageManager.js */"./resources/metronic/js/pages/custom/medias/imageManager.js");


/***/ })

/******/ });