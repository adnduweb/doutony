/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/scripts.js":
/*!*********************************!*\
  !*** ./resources/js/scripts.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Keenthemes' plugins
window.KTUtil = __webpack_require__(/*! ../metronic/js/components/util.js */ "./resources/metronic/js/components/util.js");
window.KTApp = __webpack_require__(/*! ../metronic/js/components/app.js */ "./resources/metronic/js/components/app.js");
window.KTCard = __webpack_require__(/*! ../metronic/js/components/card.js */ "./resources/metronic/js/components/card.js");
window.KTCookie = __webpack_require__(/*! ../metronic/js/components/cookie.js */ "./resources/metronic/js/components/cookie.js");
window.KTDialog = __webpack_require__(/*! ../metronic/js/components/dialog.js */ "./resources/metronic/js/components/dialog.js");
window.KTHeader = __webpack_require__(/*! ../metronic/js/components/header.js */ "./resources/metronic/js/components/header.js");
window.KTImageInput = __webpack_require__(/*! ../metronic/js/components/image-input.js */ "./resources/metronic/js/components/image-input.js");
window.KTMenu = __webpack_require__(/*! ../metronic/js/components/menu.js */ "./resources/metronic/js/components/menu.js");
window.KTOffcanvas = __webpack_require__(/*! ../metronic/js/components/offcanvas.js */ "./resources/metronic/js/components/offcanvas.js");
window.KTScrolltop = __webpack_require__(/*! ../metronic/js/components/scrolltop.js */ "./resources/metronic/js/components/scrolltop.js");
window.KTToggle = __webpack_require__(/*! ../metronic/js/components/toggle.js */ "./resources/metronic/js/components/toggle.js");
window.KTWizard = __webpack_require__(/*! ../metronic/js/components/wizard.js */ "./resources/metronic/js/components/wizard.js");

__webpack_require__(/*! ../metronic/js/components/datatable/core.datatable.js */ "./resources/metronic/js/components/datatable/core.datatable.js");

__webpack_require__(/*! ../metronic/js/components/datatable/datatable.checkbox.js */ "./resources/metronic/js/components/datatable/datatable.checkbox.js");

__webpack_require__(/*! ../metronic/js/components/datatable/datatable.rtl.js */ "./resources/metronic/js/components/datatable/datatable.rtl.js"); // Metronic layout base js


window.KTLayoutAside = __webpack_require__(/*! ../metronic/js/layout/base/aside.js */ "./resources/metronic/js/layout/base/aside.js");
window.KTLayoutAsideMenu = __webpack_require__(/*! ../metronic/js/layout/base/aside-menu.js */ "./resources/metronic/js/layout/base/aside-menu.js");
window.KTLayoutAsideToggle = __webpack_require__(/*! ../metronic/js/layout/base/aside-toggle.js */ "./resources/metronic/js/layout/base/aside-toggle.js");
window.KTLayoutBrand = __webpack_require__(/*! ../metronic/js/layout/base/brand.js */ "./resources/metronic/js/layout/base/brand.js");
window.KTLayoutContent = __webpack_require__(/*! ../metronic/js/layout/base/content.js */ "./resources/metronic/js/layout/base/content.js");
window.KTLayoutFooter = __webpack_require__(/*! ../metronic/js/layout/base/footer.js */ "./resources/metronic/js/layout/base/footer.js");
window.KTLayoutHeader = __webpack_require__(/*! ../metronic/js/layout/base/header.js */ "./resources/metronic/js/layout/base/header.js");
window.KTLayoutHeaderMenu = __webpack_require__(/*! ../metronic/js/layout/base/header-menu.js */ "./resources/metronic/js/layout/base/header-menu.js");
window.KTLayoutHeaderTopbar = __webpack_require__(/*! ../metronic/js/layout/base/header-topbar.js */ "./resources/metronic/js/layout/base/header-topbar.js");
window.KTLayoutStickyCard = __webpack_require__(/*! ../metronic/js/layout/base/sticky-card.js */ "./resources/metronic/js/layout/base/sticky-card.js");
window.KTLayoutStretchedCard = __webpack_require__(/*! ../metronic/js/layout/base/stretched-card.js */ "./resources/metronic/js/layout/base/stretched-card.js");
window.KTLayoutSubheader = __webpack_require__(/*! ../metronic/js/layout/base/subheader.js */ "./resources/metronic/js/layout/base/subheader.js"); // Metronic layout extended js

window.KTLayoutChat = __webpack_require__(/*! ../metronic/js/layout/extended/chat.js */ "./resources/metronic/js/layout/extended/chat.js");
window.KTLayoutDemoPanel = __webpack_require__(/*! ../metronic/js/layout/extended/demo-panel.js */ "./resources/metronic/js/layout/extended/demo-panel.js");
window.KTLayoutExamples = __webpack_require__(/*! ../metronic/js/layout/extended/examples.js */ "./resources/metronic/js/layout/extended/examples.js");
window.KTLayoutQuickActions = __webpack_require__(/*! ../metronic/js/layout/extended/quick-actions.js */ "./resources/metronic/js/layout/extended/quick-actions.js");
window.KTLayoutQuickCartPanel = __webpack_require__(/*! ../metronic/js/layout/extended/quick-cart.js */ "./resources/metronic/js/layout/extended/quick-cart.js");
window.KTLayoutQuickNotifications = __webpack_require__(/*! ../metronic/js/layout/extended/quick-notifications.js */ "./resources/metronic/js/layout/extended/quick-notifications.js");
window.KTLayoutQuickPanel = __webpack_require__(/*! ../metronic/js/layout/extended/quick-panel.js */ "./resources/metronic/js/layout/extended/quick-panel.js");
window.KTLayoutQuickSearch = __webpack_require__(/*! ../metronic/js/layout/extended/quick-search.js */ "./resources/metronic/js/layout/extended/quick-search.js");
window.KTLayoutQuickUser = __webpack_require__(/*! ../metronic/js/layout/extended/quick-user.js */ "./resources/metronic/js/layout/extended/quick-user.js");
window.KTLayoutScrolltop = __webpack_require__(/*! ../metronic/js/layout/extended/scrolltop.js */ "./resources/metronic/js/layout/extended/scrolltop.js");
window.KTLayoutSearch = window.KTLayoutSearchOffcanvas = __webpack_require__(/*! ../metronic/js/layout/extended/search.js */ "./resources/metronic/js/layout/extended/search.js");

__webpack_require__(/*! ../metronic/js/layout/initialize.js */ "./resources/metronic/js/layout/initialize.js");

/***/ }),

/***/ "./resources/metronic/js/components/app.js":
/*!*************************************************!*\
  !*** ./resources/metronic/js/components/app.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition

var KTApp = function () {
  /** @type {object} colors State colors **/
  var settings = {};

  var _initTooltip = function initTooltip(el) {
    var theme = el.data('theme') ? 'tooltip-' + el.data('theme') : '';
    var width = el.data('width') == 'auto' ? 'tooltop-auto-width' : '';
    var trigger = el.data('trigger') ? el.data('trigger') : 'hover';
    $(el).tooltip({
      trigger: trigger,
      template: '<div class="tooltip ' + theme + ' ' + width + '" role="tooltip">\
                <div class="arrow"></div>\
                <div class="tooltip-inner"></div>\
            </div>'
    });
  };

  var _initTooltips = function initTooltips() {
    // init bootstrap tooltips
    $('[data-toggle="tooltip"]').each(function () {
      _initTooltip($(this));
    });
  };

  var _initPopover = function initPopover(el) {
    var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';
    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';
    el.popover({
      trigger: triggerValue,
      template: '\
            <div class="popover ' + skin + '" role="tooltip">\
                <div class="arrow"></div>\
                <h3 class="popover-header"></h3>\
                <div class="popover-body"></div>\
            </div>'
    });
  };

  var _initPopovers = function initPopovers() {
    // init bootstrap popover
    $('[data-toggle="popover"]').each(function () {
      _initPopover($(this));
    });
  };

  var initFileInput = function initFileInput() {
    // init bootstrap popover
    $('.custom-file-input').on('change', function () {
      var fileName = $(this).val();
      $(this).next('.custom-file-label').addClass("selected").html(fileName);
    });
  };

  var initScroll = function initScroll() {
    $('[data-scroll="true"]').each(function () {
      var el = $(this);
      KTUtil.scrollInit(this, {
        mobileNativeScroll: true,
        handleWindowResize: true,
        rememberPosition: el.data('remember-position') == 'true' ? true : false,
        height: function height() {
          if (KTUtil.isBreakpointDown('lg') && el.data('mobile-height')) {
            return el.data('mobile-height');
          } else {
            return el.data('height');
          }
        }
      });
    });
  };

  var initAlerts = function initAlerts() {
    // init bootstrap popover
    $('body').on('click', '[data-close=alert]', function () {
      $(this).closest('.alert').hide();
    });
  };

  var _initCard = function initCard(el, options) {
    // init card tools
    var el = $(el);
    var card = new KTCard(el[0], options);
  };

  var _initCards = function initCards() {
    // init card tools
    $('[data-card="true"]').each(function () {
      var el = $(this);
      var options = {};

      if (el.data('data-card-initialized') !== true) {
        _initCard(el, options);

        el.data('data-card-initialized', true);
      }
    });
  };

  var initStickyCard = function initStickyCard() {
    if (typeof Sticky === 'undefined') {
      return;
    }

    var sticky = new Sticky('[data-sticky="true"]');
  };

  var _initAbsoluteDropdown = function initAbsoluteDropdown(context) {
    var dropdownMenu;

    if (!context) {
      return;
    }

    $('body').on('show.bs.dropdown', context, function (e) {
      dropdownMenu = $(e.target).find('.dropdown-menu');
      $('body').append(dropdownMenu.detach());
      dropdownMenu.css('display', 'block');
      dropdownMenu.position({
        'my': 'right top',
        'at': 'right bottom',
        'of': $(e.relatedTarget)
      });
    }).on('hide.bs.dropdown', context, function (e) {
      $(e.target).append(dropdownMenu.detach());
      dropdownMenu.hide();
    });
  };

  var initAbsoluteDropdowns = function initAbsoluteDropdowns() {
    $('body').on('show.bs.dropdown', function (e) {
      // e.target is always parent (contains toggler and menu)
      var $toggler = $(e.target).find("[data-attach='body']");

      if ($toggler.length === 0) {
        return;
      }

      var $dropdownMenu = $(e.target).find('.dropdown-menu'); // save detached menu

      var $detachedDropdownMenu = $dropdownMenu.detach(); // save reference to detached menu inside data of toggler

      $toggler.data('dropdown-menu', $detachedDropdownMenu);
      $('body').append($detachedDropdownMenu);
      $detachedDropdownMenu.css('display', 'block');
      $detachedDropdownMenu.position({
        my: 'right top',
        at: 'right bottom',
        of: $(e.relatedTarget)
      });
    });
    $('body').on('hide.bs.dropdown', function (e) {
      var $toggler = $(e.target).find("[data-attach='body']");

      if ($toggler.length === 0) {
        return;
      } // access to reference of detached menu from data of toggler


      var $detachedDropdownMenu = $toggler.data('dropdown-menu'); // re-append detached menu inside parent

      $(e.target).append($detachedDropdownMenu.detach()); // hide dropdown

      $detachedDropdownMenu.hide();
    });
  };

  return {
    init: function init(settingsArray) {
      if (settingsArray) {
        settings = settingsArray;
      }

      KTApp.initComponents();
    },
    initComponents: function initComponents() {
      initScroll();

      _initTooltips();

      _initPopovers();

      initAlerts();
      initFileInput();

      _initCards();

      initStickyCard();
      initAbsoluteDropdowns();
    },
    initTooltips: function initTooltips() {
      _initTooltips();
    },
    initTooltip: function initTooltip(el) {
      _initTooltip(el);
    },
    initPopovers: function initPopovers() {
      _initPopovers();
    },
    initPopover: function initPopover(el) {
      _initPopover(el);
    },
    initCard: function initCard(el, options) {
      _initCard(el, options);
    },
    initCards: function initCards() {
      _initCards();
    },
    initSticky: function (_initSticky) {
      function initSticky() {
        return _initSticky.apply(this, arguments);
      }

      initSticky.toString = function () {
        return _initSticky.toString();
      };

      return initSticky;
    }(function () {
      initSticky();
    }),
    initAbsoluteDropdown: function initAbsoluteDropdown(context) {
      _initAbsoluteDropdown(context);
    },
    block: function block(target, options) {
      var el = $(target);
      options = $.extend(true, {
        opacity: 0.05,
        overlayColor: '#000000',
        type: '',
        size: '',
        state: 'primary',
        centerX: true,
        centerY: true,
        message: '',
        shadow: true,
        width: 'auto'
      }, options);
      var html;
      var version = options.type ? 'spinner-' + options.type : '';
      var state = options.state ? 'spinner-' + options.state : '';
      var size = options.size ? 'spinner-' + options.size : '';
      var spinner = '<span class="spinner ' + version + ' ' + state + ' ' + size + '"></span';

      if (options.message && options.message.length > 0) {
        var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');
        html = '<div class="' + classes + '"><span>' + options.message + '</span>' + spinner + '</div>';
        var el = document.createElement('div');
        $('body').prepend(el);
        KTUtil.addClass(el, classes);
        el.innerHTML = html;
        options.width = KTUtil.actualWidth(el) + 10;
        KTUtil.remove(el);

        if (target == 'body') {
          html = '<div class="' + classes + '" style="margin-left:-' + options.width / 2 + 'px;"><span>' + options.message + '</span><span>' + spinner + '</span></div>';
        }
      } else {
        html = spinner;
      }

      var params = {
        message: html,
        centerY: options.centerY,
        centerX: options.centerX,
        css: {
          top: '30%',
          left: '50%',
          border: '0',
          padding: '0',
          backgroundColor: 'none',
          width: options.width
        },
        overlayCSS: {
          backgroundColor: options.overlayColor,
          opacity: options.opacity,
          cursor: 'wait',
          zIndex: target == 'body' ? 1100 : 10
        },
        onUnblock: function onUnblock() {
          if (el && el[0]) {
            KTUtil.css(el[0], 'position', '');
            KTUtil.css(el[0], 'zoom', '');
          }
        }
      };

      if (target == 'body') {
        params.css.top = '50%';
        $.blockUI(params);
      } else {
        var el = $(target);
        el.block(params);
      }
    },
    unblock: function unblock(target) {
      if (target && target != 'body') {
        $(target).unblock();
      } else {
        $.unblockUI();
      }
    },
    blockPage: function blockPage(options) {
      return KTApp.block('body', options);
    },
    unblockPage: function unblockPage() {
      return KTApp.unblock('body');
    },
    getSettings: function getSettings() {
      return settings;
    }
  };
}(); // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTApp;
} // Initialize KTApp class on document ready


$(document).ready(function () {
  KTApp.init(KTAppSettings);
});

/***/ }),

/***/ "./resources/metronic/js/components/card.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/card.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition

var KTCard = function KTCard(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.getById(elementId);
  var body = KTUtil.getBody();

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    toggleSpeed: 400,
    sticky: {
      releseOnReverse: false,
      offset: 300,
      zIndex: 101
    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('card')) {
        the = KTUtil.data(element).get('card');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('card', the);
      }

      return the;
    },

    /**
     * Init card
     */
    init: function init(options) {
      the.element = element;
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.header = KTUtil.child(element, '.card-header');
      the.footer = KTUtil.child(element, '.card-footer');

      if (KTUtil.child(element, '.card-body')) {
        the.body = KTUtil.child(element, '.card-body');
      } else if (KTUtil.child(element, '.form')) {
        the.body = KTUtil.child(element, '.form');
      }
    },

    /**
     * Build Form Wizard
     */
    build: function build() {
      // Remove
      var remove = KTUtil.find(the.header, '[data-card-tool=remove]');

      if (remove) {
        KTUtil.addEvent(remove, 'click', function (e) {
          e.preventDefault();
          Plugin.remove();
        });
      } // Reload


      var reload = KTUtil.find(the.header, '[data-card-tool=reload]');

      if (reload) {
        KTUtil.addEvent(reload, 'click', function (e) {
          e.preventDefault();
          Plugin.reload();
        });
      } // Toggle


      var toggle = KTUtil.find(the.header, '[data-card-tool=toggle]');

      if (toggle) {
        KTUtil.addEvent(toggle, 'click', function (e) {
          e.preventDefault();
          Plugin.toggle();
        });
      }
    },

    /**
     * Enable stickt mode
     */
    initSticky: function initSticky() {
      var lastScrollTop = 0;
      var offset = the.options.sticky.offset;

      if (!the.header) {
        return;
      }

      window.addEventListener('scroll', Plugin.onScrollSticky);
    },

    /**
     * Window scroll handle event for sticky card
     */
    onScrollSticky: function onScrollSticky(e) {
      var offset = the.options.sticky.offset;
      if (isNaN(offset)) return;
      var st = KTUtil.getScrollTop();

      if (st >= offset && KTUtil.hasClass(body, 'card-sticky-on') === false) {
        Plugin.eventTrigger('stickyOn');
        KTUtil.addClass(body, 'card-sticky-on');
        Plugin.updateSticky();
      } else if (st * 1.5 <= offset && KTUtil.hasClass(body, 'card-sticky-on')) {
        // Back scroll mode
        Plugin.eventTrigger('stickyOff');
        KTUtil.removeClass(body, 'card-sticky-on');
        Plugin.resetSticky();
      }
    },
    updateSticky: function updateSticky() {
      if (!the.header) {
        return;
      }

      var top;

      if (KTUtil.hasClass(body, 'card-sticky-on')) {
        if (the.options.sticky.position.top instanceof Function) {
          top = parseInt(the.options.sticky.position.top.call(this, the));
        } else {
          top = parseInt(the.options.sticky.position.top);
        }

        var left;

        if (the.options.sticky.position.left instanceof Function) {
          left = parseInt(the.options.sticky.position.left.call(this, the));
        } else {
          left = parseInt(the.options.sticky.position.left);
        }

        var right;

        if (the.options.sticky.position.right instanceof Function) {
          right = parseInt(the.options.sticky.position.right.call(this, the));
        } else {
          right = parseInt(the.options.sticky.position.right);
        }

        KTUtil.css(the.header, 'z-index', the.options.sticky.zIndex);
        KTUtil.css(the.header, 'top', top + 'px');
        KTUtil.css(the.header, 'left', left + 'px');
        KTUtil.css(the.header, 'right', right + 'px');
      }
    },
    resetSticky: function resetSticky() {
      if (!the.header) {
        return;
      }

      if (KTUtil.hasClass(body, 'card-sticky-on') === false) {
        KTUtil.css(the.header, 'z-index', '');
        KTUtil.css(the.header, 'top', '');
        KTUtil.css(the.header, 'left', '');
        KTUtil.css(the.header, 'right', '');
      }
    },

    /**
     * Remove card
     */
    remove: function remove() {
      if (Plugin.eventTrigger('beforeRemove') === false) {
        return;
      }

      KTUtil.remove(element);
      Plugin.eventTrigger('afterRemove');
    },

    /**
     * Set content
     */
    setContent: function setContent(html) {
      if (html) {
        the.body.innerHTML = html;
      }
    },

    /**
     * Get body
     */
    getBody: function getBody() {
      return the.body;
    },

    /**
     * Get self
     */
    getSelf: function getSelf() {
      return element;
    },

    /**
     * Reload
     */
    reload: function reload() {
      Plugin.eventTrigger('reload');
    },

    /**
     * Toggle
     */
    toggle: function toggle() {
      if (KTUtil.hasClass(element, 'card-collapse') || KTUtil.hasClass(element, 'card-collapsed')) {
        Plugin.expand();
      } else {
        Plugin.collapse();
      }
    },

    /**
     * Collapse
     */
    collapse: function collapse() {
      if (Plugin.eventTrigger('beforeCollapse') === false) {
        return;
      }

      KTUtil.slideUp(the.body, the.options.toggleSpeed, function () {
        Plugin.eventTrigger('afterCollapse');
      });
      KTUtil.addClass(element, 'card-collapse');
    },

    /**
     * Expand
     */
    expand: function expand() {
      if (Plugin.eventTrigger('beforeExpand') === false) {
        return;
      }

      KTUtil.slideDown(the.body, the.options.toggleSpeed, function () {
        Plugin.eventTrigger('afterExpand');
      });
      KTUtil.removeClass(element, 'card-collapse');
      KTUtil.removeClass(element, 'card-collapsed');
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      //KTUtil.triggerCustomEvent(name);
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Remove card
   */


  the.remove = function () {
    return Plugin.remove(html);
  };
  /**
   * Init sticky card
   */


  the.initSticky = function () {
    return Plugin.initSticky();
  };
  /**
   * Rerender sticky layout
   */


  the.updateSticky = function () {
    return Plugin.updateSticky();
  };
  /**
   * Reset the sticky
   */


  the.resetSticky = function () {
    return Plugin.resetSticky();
  };
  /**
   * Destroy sticky card
   */


  the.destroySticky = function () {
    Plugin.resetSticky();
    window.removeEventListener('scroll', Plugin.onScrollSticky);
  };
  /**
   * Reload card
   */


  the.reload = function () {
    return Plugin.reload();
  };
  /**
   * Set card content
   */


  the.setContent = function (html) {
    return Plugin.setContent(html);
  };
  /**
   * Toggle card
   */


  the.toggle = function () {
    return Plugin.toggle();
  };
  /**
   * Collapse card
   */


  the.collapse = function () {
    return Plugin.collapse();
  };
  /**
   * Expand card
   */


  the.expand = function () {
    return Plugin.expand();
  };
  /**
   * Get cardbody
   * @returns {jQuery}
   */


  the.getBody = function () {
    return Plugin.getBody();
  };
  /**
   * Get cardbody
   * @returns {jQuery}
   */


  the.getSelf = function () {
    return Plugin.getSelf();
  };
  /**
   * Attach event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTCard;
}

/***/ }),

/***/ "./resources/metronic/js/components/cookie.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/cookie.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // DOCS: https://javascript.info/cookie
// Component Definition 

var KTCookie = function () {
  return {
    // returns the cookie with the given name,
    // or undefined if not found
    getCookie: function getCookie(name) {
      var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
      return matches ? decodeURIComponent(matches[1]) : undefined;
    },
    // Please note that a cookie value is encoded,
    // so getCookie uses a built-in decodeURIComponent function to decode it.
    setCookie: function setCookie(name, value, options) {
      if (!options) {
        options = {};
      }

      options = Object.assign({}, {
        path: '/'
      }, options);

      if (options.expires instanceof Date) {
        options.expires = options.expires.toUTCString();
      }

      var updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

      for (var optionKey in options) {
        if (!options.hasOwnProperty(optionKey)) {
          continue;
        }

        updatedCookie += "; " + optionKey;
        var optionValue = options[optionKey];

        if (optionValue !== true) {
          updatedCookie += "=" + optionValue;
        }
      }

      document.cookie = updatedCookie;
    },
    // To delete a cookie, we can call it with a negative expiration date:
    deleteCookie: function deleteCookie(name) {
      setCookie(name, "", {
        'max-age': -1
      });
    }
  };
}(); // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTCookie;
}

/***/ }),

/***/ "./resources/metronic/js/components/datatable/core.datatable.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/core.datatable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function ($) {
  var pluginName = 'KTDatatable';
  var pfx = '';
  var util = KTUtil;
  var app = KTApp;
  if (typeof util === 'undefined') throw new Error('Util class is required and must be included before ' + pluginName); // plugin setup

  $.fn[pluginName] = function (options) {
    if ($(this).length === 0) {
      console.warn('No ' + pluginName + ' element exist.');
      return;
    } // global variables


    var datatable = this; // debug enabled?
    // 1) state will be cleared on each refresh
    // 2) enable some logs
    // 3) etc.

    datatable.debug = false;
    datatable.API = {
      record: null,
      value: null,
      params: null
    };
    var Plugin = {
      /********************
       ** PRIVATE METHODS
       ********************/
      isInit: false,
      cellOffset: 110,
      iconOffset: 15,
      stateId: 'meta',
      ajaxParams: {},
      pagingObject: {},
      init: function init(options) {
        var isHtmlTable = false; // data source option empty is normal table

        if (options.data.source === null) {
          Plugin.extractTable();
          isHtmlTable = true;
        }

        Plugin.setupBaseDOM.call();
        Plugin.setupDOM(datatable.table); // on event after layout had done setup, show datatable

        $(datatable).on(pfx + 'datatable-on-layout-updated', Plugin.afterRender);

        if (datatable.debug) {
          Plugin.stateRemove(Plugin.stateId);
        }
        /*var es = Plugin.stateGet(Plugin.stateId);
        var eq = {};
        if (es && es.hasOwnProperty('query')) {
        	eq = es.query;
        }
        Plugin.setDataSourceQuery(Object.assign({}, eq, Plugin.getOption('data.source.read.params.query')));*/
        // set custom query from options


        Plugin.setDataSourceQuery(Plugin.getOption('data.source.read.params.query')); // initialize extensions

        $.each(Plugin.getOption('extensions'), function (extName, extOptions) {
          if (typeof $.fn[pluginName][extName] === 'function') {
            if (_typeof(extOptions) !== 'object') {
              extOptions = $.extend({}, extOptions);
            }

            new $.fn[pluginName][extName](datatable, extOptions);
          }
        });
        Plugin.spinnerCallback(true); // get data

        if (options.data.type === 'remote' || options.data.type === 'local') {
          if (options.data.saveState === false) {
            Plugin.stateRemove(Plugin.stateId);
          } // get data for local datatable and local table


          if (options.data.type === 'local' && _typeof(options.data.source) === 'object') {
            datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(options.data.source);
          }

          Plugin.dataRender();
        } // if html table, remove and setup a new header


        if (isHtmlTable) {
          $(datatable.tableHead).find('tr').remove();
          $(datatable.tableFoot).find('tr').remove();
        }

        Plugin.setHeadTitle();

        if (Plugin.getOption('layout.footer')) {
          Plugin.setHeadTitle(datatable.tableFoot);
        } // hide header


        if (typeof options.layout.header !== 'undefined' && options.layout.header === false) {
          $(datatable.table).find('thead').remove();
        } // hide footer


        if (typeof options.layout.footer !== 'undefined' && options.layout.footer === false) {
          $(datatable.table).find('tfoot').remove();
        } // for normal and local data type, run layoutUpdate


        if (options.data.type === null || options.data.type === 'local') {
          Plugin.setupCellField.call();
          Plugin.setupTemplateCell.call(); // setup nested datatable, if option enabled

          Plugin.setupSubDatatable.call(); // setup extra system column properties

          Plugin.setupSystemColumn.call();
          Plugin.redraw();
        }

        var width;
        var initialWidth = false;
        $(window).resize(function () {
          // issue: URL Bar Resizing on mobile, https://developers.google.com/web/updates/2016/12/url-bar-resizing
          // trigger datatable resize on width change only
          if ($(this).width() !== width) {
            width = $(this).width();
            Plugin.fullRender();
          } // get initial width


          if (!initialWidth) {
            width = $(this).width();
            initialWidth = true;
          }
        });
        $(datatable).height('');
        var prevKeyword = '';
        $(Plugin.getOption('search.input')).on('keyup', function (e) {
          if (Plugin.getOption('search.onEnter') && e.which !== 13) return;
          var keyword = $(this).val(); // prevent multiple search request on every button keyup

          if (prevKeyword !== keyword) {
            Plugin.search(keyword);
            prevKeyword = keyword;
          }
        });
        return datatable;
      },

      /**
       * Extract static HTML table content into datasource
       */
      extractTable: function extractTable() {
        var columns = [];
        var headers = $(datatable).find('tr:first-child th').get().map(function (cell, i) {
          var field = $(cell).data('field');
          var title = $(cell).data('title');

          if (typeof field === 'undefined') {
            field = $(cell).text().trim();
          }

          if (typeof title === 'undefined') {
            title = $(cell).text().trim();
          }

          var column = {
            field: field,
            title: title
          };

          for (var ii in options.columns) {
            if (options.columns[ii].field === field) {
              column = $.extend(true, {}, options.columns[ii], column);
            }
          }

          columns.push(column);
          return field;
        }); // auto create columns config

        options.columns = columns;
        var rowProp = [];
        var source = [];
        $(datatable).find('tr').each(function () {
          if ($(this).find('td').length) {
            rowProp.push($(this).prop('attributes'));
          }

          var td = {};
          $(this).find('td').each(function (i, cell) {
            td[headers[i]] = cell.innerHTML.trim();
          });

          if (!util.isEmpty(td)) {
            source.push(td);
          }
        });
        options.data.attr.rowProps = rowProp;
        options.data.source = source;
      },

      /**
       * One time layout update on init
       */
      layoutUpdate: function layoutUpdate() {
        // setup nested datatable, if option enabled
        Plugin.setupSubDatatable.call(); // setup extra system column properties

        Plugin.setupSystemColumn.call(); // setup cell hover event

        Plugin.setupHover.call();

        if (typeof options.detail === 'undefined' // temporary disable lock column in subtable
        && Plugin.getDepth() === 1) {
          // lock columns handler
          Plugin.lockTable.call();
        }

        Plugin.resetScroll(); // check if not is a locked column

        if (!Plugin.isLocked()) {
          Plugin.redraw.call(); // check if its not a subtable and has autoHide option enabled

          if (!Plugin.isSubtable() && Plugin.getOption('rows.autoHide') === true) {
            Plugin.autoHide();
          } // reset row


          $(datatable.table).find('.' + pfx + 'datatable-row').css('height', '');
        }

        Plugin.columnHide.call();
        Plugin.rowEvenOdd.call();
        Plugin.sorting.call();
        Plugin.scrollbar.call();

        if (!Plugin.isInit) {
          // run once dropdown inside datatable
          Plugin.dropdownFix();
          $(datatable).trigger(pfx + 'datatable-on-init', {
            table: $(datatable.wrap).attr('id'),
            options: options
          });
          Plugin.isInit = true;
        }

        $(datatable).trigger(pfx + 'datatable-on-layout-updated', {
          table: $(datatable.wrap).attr('id')
        });
      },
      dropdownFix: function dropdownFix() {
        var dropdownMenu;
        $('body').on('show.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {
          dropdownMenu = $(e.target).find('.dropdown-menu');
          $('body').append(dropdownMenu.detach());
          dropdownMenu.css('display', 'block');
          dropdownMenu.position({
            'my': 'right top',
            'at': 'right bottom',
            'of': $(e.relatedTarget)
          }); // if datatable is inside modal

          if (datatable.closest('.modal').length) {
            // increase dropdown z-index
            dropdownMenu.css('z-index', '2000');
          }
        }).on('hide.bs.dropdown', '.' + pfx + 'datatable .' + pfx + 'datatable-body', function (e) {
          $(e.target).append(dropdownMenu.detach());
          dropdownMenu.hide();
        }); // remove dropdown if window resize

        $(window).on('resize', function (e) {
          if (typeof dropdownMenu !== 'undefined') {
            dropdownMenu.hide();
          }
        });
      },
      lockTable: function lockTable() {
        var lock = {
          lockEnabled: false,
          init: function init() {
            // check if table should be locked columns
            lock.lockEnabled = Plugin.lockEnabledColumns();

            if (lock.lockEnabled.left.length === 0 && lock.lockEnabled.right.length === 0) {
              return;
            }

            lock.enable();
          },
          enable: function enable() {
            var enableLock = function enableLock(tablePart) {
              // check if already has lock column
              if ($(tablePart).find('.' + pfx + 'datatable-lock').length > 0) {
                Plugin.log('Locked container already exist in: ', tablePart);
                return;
              } // check if no rows exists


              if ($(tablePart).find('.' + pfx + 'datatable-row').length === 0) {
                Plugin.log('No row exist in: ', tablePart);
                return;
              } // locked div container


              var lockLeft = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-left');
              var lockScroll = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-scroll');
              var lockRight = $('<div/>').addClass(pfx + 'datatable-lock ' + pfx + 'datatable-lock-right');
              $(tablePart).find('.' + pfx + 'datatable-row').each(function () {
                // create new row for lock columns and pass the data
                var rowLeft = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockLeft);
                var rowScroll = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockScroll);
                var rowRight = $('<tr/>').addClass(pfx + 'datatable-row').data('obj', $(this).data('obj')).appendTo(lockRight);
                $(this).find('.' + pfx + 'datatable-cell').each(function () {
                  var locked = $(this).data('locked');

                  if (typeof locked !== 'undefined') {
                    if (typeof locked.left !== 'undefined' || locked === true) {
                      // default locked to left
                      $(this).appendTo(rowLeft);
                    }

                    if (typeof locked.right !== 'undefined') {
                      $(this).appendTo(rowRight);
                    }
                  } else {
                    $(this).appendTo(rowScroll);
                  }
                }); // remove old row

                $(this).remove();
              });

              if (lock.lockEnabled.left.length > 0) {
                $(datatable.wrap).addClass(pfx + 'datatable-lock');
                $(lockLeft).appendTo(tablePart);
              }

              if (lock.lockEnabled.left.length > 0 || lock.lockEnabled.right.length > 0) {
                $(lockScroll).appendTo(tablePart);
              }

              if (lock.lockEnabled.right.length > 0) {
                $(datatable.wrap).addClass(pfx + 'datatable-lock');
                $(lockRight).appendTo(tablePart);
              }
            };

            $(datatable.table).find('thead,tbody,tfoot').each(function () {
              var tablePart = this;

              if ($(this).find('.' + pfx + 'datatable-lock').length === 0) {
                $(this).ready(function () {
                  enableLock(tablePart);
                });
              }
            });
          }
        };
        lock.init();
        return lock;
      },

      /**
       * Render everything for resize
       */
      fullRender: function fullRender() {
        $(datatable.tableHead).empty();
        Plugin.setHeadTitle();

        if (Plugin.getOption('layout.footer')) {
          $(datatable.tableFoot).empty();
          Plugin.setHeadTitle(datatable.tableFoot);
        }

        Plugin.spinnerCallback(true);
        $(datatable.wrap).removeClass(pfx + 'datatable-loaded');
        Plugin.insertData();
      },
      lockEnabledColumns: function lockEnabledColumns() {
        var screen = $(window).width();
        var columns = options.columns;
        var enabled = {
          left: [],
          right: []
        };
        $.each(columns, function (i, column) {
          if (typeof column.locked !== 'undefined') {
            if (typeof column.locked.left !== 'undefined') {
              if (util.getBreakpoint(column.locked.left) <= screen) {
                enabled['left'].push(column.locked.left);
              }
            }

            if (typeof column.locked.right !== 'undefined') {
              if (util.getBreakpoint(column.locked.right) <= screen) {
                enabled['right'].push(column.locked.right);
              }
            }
          }
        });
        return enabled;
      },

      /**
       * After render event, called by "datatable-on-layout-updated"
       * @param e
       * @param args
       */
      afterRender: function afterRender(e, args) {
        $(datatable).ready(function () {
          // redraw locked columns table
          if (Plugin.isLocked()) {
            Plugin.redraw();
          }

          $(datatable.tableBody).css('visibility', '');
          $(datatable.wrap).addClass(pfx + 'datatable-loaded');
          Plugin.spinnerCallback(false);
        });
      },
      hoverTimer: 0,
      isScrolling: false,
      setupHover: function setupHover() {
        $(window).scroll(function (e) {
          // stop hover when scrolling
          clearTimeout(Plugin.hoverTimer);
          Plugin.isScrolling = true;
        });
        $(datatable.tableBody).find('.' + pfx + 'datatable-cell').off('mouseenter', 'mouseleave').on('mouseenter', function () {
          // reset scroll timer to hover class
          Plugin.hoverTimer = setTimeout(function () {
            Plugin.isScrolling = false;
          }, 200);
          if (Plugin.isScrolling) return; // normal table

          var row = $(this).closest('.' + pfx + 'datatable-row').addClass(pfx + 'datatable-row-hover');
          var index = $(row).index() + 1; // lock table

          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').addClass(pfx + 'datatable-row-hover');
        }).on('mouseleave', function () {
          // normal table
          var row = $(this).closest('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-hover');
          var index = $(row).index() + 1; // look table

          $(row).closest('.' + pfx + 'datatable-lock').parent().find('.' + pfx + 'datatable-row:nth-child(' + index + ')').removeClass(pfx + 'datatable-row-hover');
        });
      },

      /**
       * Adjust width of locked table containers by resize handler
       * @returns {number}
       */
      adjustLockContainer: function adjustLockContainer() {
        if (!Plugin.isLocked()) return 0; // refer to head dimension

        var containerWidth = $(datatable.tableHead).width();
        var lockLeft = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-left').width();
        var lockRight = $(datatable.tableHead).find('.' + pfx + 'datatable-lock-right').width();
        if (typeof lockLeft === 'undefined') lockLeft = 0;
        if (typeof lockRight === 'undefined') lockRight = 0;
        var lockScroll = Math.floor(containerWidth - lockLeft - lockRight);
        $(datatable.table).find('.' + pfx + 'datatable-lock-scroll').css('width', lockScroll);
        return lockScroll;
      },

      /**
       * todo; not in use
       */
      dragResize: function dragResize() {
        var pressed = false;
        var start = undefined;
        var startX, startWidth;
        $(datatable.tableHead).find('.' + pfx + 'datatable-cell').mousedown(function (e) {
          start = $(this);
          pressed = true;
          startX = e.pageX;
          startWidth = $(this).width();
          $(start).addClass(pfx + 'datatable-cell-resizing');
        }).mousemove(function (e) {
          if (pressed) {
            var i = $(start).index();
            var tableBody = $(datatable.tableBody);
            var ifLocked = $(start).closest('.' + pfx + 'datatable-lock');

            if (ifLocked) {
              var lockedIndex = $(ifLocked).index();
              tableBody = $(datatable.tableBody).find('.' + pfx + 'datatable-lock').eq(lockedIndex);
            }

            $(tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {
              $(tr).find('.' + pfx + 'datatable-cell').eq(i).width(startWidth + (e.pageX - startX)).children().width(startWidth + (e.pageX - startX));
            });
            $(start).children().css('width', startWidth + (e.pageX - startX));
          }
        }).mouseup(function () {
          $(start).removeClass(pfx + 'datatable-cell-resizing');
          pressed = false;
        });
        $(document).mouseup(function () {
          $(start).removeClass(pfx + 'datatable-cell-resizing');
          pressed = false;
        });
      },

      /**
       * To prepare placeholder for table before content is loading
       */
      initHeight: function initHeight() {
        if (options.layout.height && options.layout.scroll) {
          var theadHeight = $(datatable.tableHead).find('.' + pfx + 'datatable-row').outerHeight();
          var tfootHeight = $(datatable.tableFoot).find('.' + pfx + 'datatable-row').outerHeight();
          var bodyHeight = options.layout.height;

          if (theadHeight > 0) {
            bodyHeight -= theadHeight;
          }

          if (tfootHeight > 0) {
            bodyHeight -= tfootHeight;
          } // scrollbar offset


          bodyHeight -= 2;
          $(datatable.tableBody).css('max-height', Math.floor(parseFloat(bodyHeight))); // set scrollable area fixed height
          // $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll').css('height', Math.floor(parseFloat(bodyHeight)));
        }
      },

      /**
       * Setup base DOM (table, thead, tbody, tfoot) and create if not
       * exist.
       */
      setupBaseDOM: function setupBaseDOM() {
        // keep original state before datatable initialize
        datatable.initialDatatable = $(datatable).clone(); // main element

        if ($(datatable).prop('tagName') === 'TABLE') {
          // if main init element is <table>, wrap with div
          datatable.table = $(datatable).removeClass(pfx + 'datatable').addClass(pfx + 'datatable-table');

          if ($(datatable.table).parents('.' + pfx + 'datatable').length === 0) {
            datatable.table.wrap($('<div/>').addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme));
            datatable.wrap = $(datatable.table).parent();
          }
        } else {
          // create table
          datatable.wrap = $(datatable).addClass(pfx + 'datatable').addClass(pfx + 'datatable-' + options.layout.theme);
          datatable.table = $('<table/>').addClass(pfx + 'datatable-table').appendTo(datatable);
        }

        if (typeof options.layout["class"] !== 'undefined') {
          $(datatable.wrap).addClass(options.layout["class"]);
        }

        $(datatable.table).removeClass(pfx + 'datatable-destroyed').css('display', 'block'); // force disable save state

        if (typeof $(datatable).attr('id') === 'undefined') {
          Plugin.setOption('data.saveState', false);
          $(datatable.table).attr('id', util.getUniqueID(pfx + 'datatable-'));
        } // predefine table height


        if (Plugin.getOption('layout.minHeight')) $(datatable.table).css('min-height', Plugin.getOption('layout.minHeight'));
        if (Plugin.getOption('layout.height')) $(datatable.table).css('max-height', Plugin.getOption('layout.height')); // for normal table load

        if (options.data.type === null) {
          $(datatable.table).css('width', '').css('display', '');
        } // create table head element


        datatable.tableHead = $(datatable.table).find('thead');

        if ($(datatable.tableHead).length === 0) {
          datatable.tableHead = $('<thead/>').prependTo(datatable.table);
        } // create table head element


        datatable.tableBody = $(datatable.table).find('tbody');

        if ($(datatable.tableBody).length === 0) {
          datatable.tableBody = $('<tbody/>').appendTo(datatable.table);
        }

        if (typeof options.layout.footer !== 'undefined' && options.layout.footer) {
          // create table foot element
          datatable.tableFoot = $(datatable.table).find('tfoot');

          if ($(datatable.tableFoot).length === 0) {
            datatable.tableFoot = $('<tfoot/>').appendTo(datatable.table);
          }
        }
      },

      /**
       * Set column data before table manipulation.
       */
      setupCellField: function setupCellField(tableParts) {
        if (typeof tableParts === 'undefined') tableParts = $(datatable.table).children();
        var columns = options.columns;
        $.each(tableParts, function (part, tablePart) {
          $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {
            // prepare data
            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {
              if (typeof columns[tdi] !== 'undefined') {
                $(td).data(columns[tdi]);
              }
            });
          });
        });
      },

      /**
       * Set column template callback
       * @param tablePart
       */
      setupTemplateCell: function setupTemplateCell(tablePart) {
        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;
        var columns = options.columns;
        $(tablePart).find('.' + pfx + 'datatable-row').each(function (tri, tr) {
          // row data object, if any
          var obj = $(tr).data('obj');

          if (typeof obj === 'undefined') {
            return;
          } // @deprecated in v5.0.6
          // obj['getIndex'] = function() {
          // 	return tri;
          // };
          // @deprecated in v5.0.6
          // obj['getDatatable'] = function() {
          // 	return datatable;
          // };
          // @deprecated in v5.0.6


          var rowCallback = Plugin.getOption('rows.callback');

          if (typeof rowCallback === 'function') {
            rowCallback($(tr), obj, tri);
          } // before template row callback


          var beforeTemplate = Plugin.getOption('rows.beforeTemplate');

          if (typeof beforeTemplate === 'function') {
            beforeTemplate($(tr), obj, tri);
          } // if data object is undefined, collect from table


          if (typeof obj === 'undefined') {
            obj = {};
            $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {
              // get column settings by field
              var column = $.grep(columns, function (n, i) {
                return $(td).data('field') === n.field;
              })[0];

              if (typeof column !== 'undefined') {
                obj[column['field']] = $(td).text();
              }
            });
          }

          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {
            // get column settings by field
            var column = $.grep(columns, function (n, i) {
              return $(td).data('field') === n.field;
            })[0];

            if (typeof column !== 'undefined') {
              // column template
              if (typeof column.template !== 'undefined') {
                var finalValue = ''; // template string

                if (typeof column.template === 'string') {
                  finalValue = Plugin.dataPlaceholder(column.template, obj);
                } // template callback function


                if (typeof column.template === 'function') {
                  finalValue = column.template(obj, tri, datatable);
                } // sanitize using DOMPurify if installed


                if (typeof DOMPurify !== 'undefined') {
                  finalValue = DOMPurify.sanitize(finalValue);
                }

                var span = document.createElement('span');
                span.innerHTML = finalValue; // insert to cell, wrap with span

                $(td).html(span); // set span overflow

                if (typeof column.overflow !== 'undefined') {
                  $(span).css('overflow', column.overflow);
                  $(span).css('position', 'relative');
                }
              }
            }
          }); // after template row callback

          var afterTemplate = Plugin.getOption('rows.afterTemplate');

          if (typeof afterTemplate === 'function') {
            afterTemplate($(tr), obj, tri);
          }
        });
      },

      /**
       * Setup extra system column properties
       * Note: selector checkbox, subtable toggle
       */
      setupSystemColumn: function setupSystemColumn() {
        datatable.dataSet = datatable.dataSet || []; // no records available

        if (datatable.dataSet.length === 0) return;
        var columns = options.columns;
        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {
          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {
            // get column settings by field
            var column = $.grep(columns, function (n, i) {
              return $(td).data('field') === n.field;
            })[0];

            if (typeof column !== 'undefined') {
              var value = $(td).text(); // enable column selector

              if (typeof column.selector !== 'undefined' && column.selector !== false) {
                // check if checkbox exist
                if ($(td).find('.' + pfx + 'checkbox [type="checkbox"]').length > 0) return;
                $(td).addClass(pfx + 'datatable-cell-check'); // append checkbox

                var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single').append($('<input/>').attr('type', 'checkbox').attr('value', value).on('click', function () {
                  if ($(this).is(':checked')) {
                    // add checkbox active row class
                    Plugin.setActive(this);
                  } else {
                    // add checkbox active row class
                    Plugin.setInactive(this);
                  }
                })).append('&nbsp;<span></span>'); // checkbox selector has outline style

                if (typeof column.selector["class"] !== 'undefined') {
                  $(chk).addClass(column.selector["class"]);
                }

                $(td).children().html(chk);
              } // enable column subtable toggle


              if (typeof column.subtable !== 'undefined' && column.subtable) {
                // check if subtable toggle exist
                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return; // append subtable toggle

                $(td).children().html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).append($('<i/>').addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));
              }
            }
          });
        }); // init checkbox for header/footer

        var initCheckbox = function initCheckbox(tr) {
          // get column settings by field
          var column = $.grep(columns, function (n, i) {
            return typeof n.selector !== 'undefined' && n.selector !== false;
          })[0];

          if (typeof column !== 'undefined') {
            // enable column selector
            if (typeof column.selector !== 'undefined' && column.selector !== false) {
              var td = $(tr).find('[data-field="' + column.field + '"]'); // check if checkbox exist

              if ($(td).find('.' + pfx + 'checkbox [type="checkbox"]').length > 0) return;
              $(td).addClass(pfx + 'datatable-cell-check'); // append checkbox

              var chk = $('<label/>').addClass(pfx + 'checkbox ' + pfx + 'checkbox-single ' + pfx + 'checkbox-all').append($('<input/>').attr('type', 'checkbox').on('click', function () {
                if ($(this).is(':checked')) {
                  Plugin.setActiveAll(true);
                } else {
                  Plugin.setActiveAll(false);
                }
              })).append('&nbsp;<span></span>'); // checkbox selector has outline style

              if (typeof column.selector["class"] !== 'undefined') {
                $(chk).addClass(column.selector["class"]);
              }

              $(td).children().html(chk);
            }
          }
        };

        if (options.layout.header) {
          initCheckbox($(datatable.tableHead).find('.' + pfx + 'datatable-row').first());
        }

        if (options.layout.footer) {
          initCheckbox($(datatable.tableFoot).find('.' + pfx + 'datatable-row').first());
        }
      },
      maxWidthList: {},

      /**
       * Adjust width to match container size
       */
      adjustCellsWidth: function adjustCellsWidth() {
        // get table width
        var containerWidth = $(datatable.tableBody).innerWidth() - Plugin.iconOffset; // get total number of columns

        var columns = $(datatable.tableBody).find('.' + pfx + 'datatable-row:first-child').find('.' + pfx + 'datatable-cell'). // exclude expand icon
        not('.' + pfx + 'datatable-toggle-detail').not(':hidden').length;

        if (columns > 0) {
          //  remove reserved sort icon width
          containerWidth = containerWidth - Plugin.iconOffset * columns;
          var minWidth = Math.floor(containerWidth / columns); // minimum width

          if (minWidth <= Plugin.cellOffset) {
            minWidth = Plugin.cellOffset;
          }

          $(datatable.table).find('.' + pfx + 'datatable-row').find('.' + pfx + 'datatable-cell'). // exclude expand icon
          not('.' + pfx + 'datatable-toggle-detail').not(':hidden').each(function (tdi, td) {
            var width = minWidth;
            var dataWidth = $(td).data('width');

            if (typeof dataWidth !== 'undefined') {
              if (dataWidth === 'auto') {
                var field = $(td).data('field');

                if (Plugin.maxWidthList[field]) {
                  width = Plugin.maxWidthList[field];
                } else {
                  var cells = $(datatable.table).find('.' + pfx + 'datatable-cell[data-field="' + field + '"]');
                  width = Plugin.maxWidthList[field] = Math.max.apply(null, $(cells).map(function () {
                    return $(this).outerWidth();
                  }).get());
                }
              } else {
                width = dataWidth;
              }
            }

            $(td).children().css('width', Math.ceil(width));
          });
        }

        return datatable;
      },

      /**
       * Adjust height to match container size
       */
      adjustCellsHeight: function adjustCellsHeight() {
        $.each($(datatable.table).children(), function (part, tablePart) {
          var totalRows = $(tablePart).find('.' + pfx + 'datatable-row').first().parent().find('.' + pfx + 'datatable-row').length;

          for (var i = 1; i <= totalRows; i++) {
            var rows = $(tablePart).find('.' + pfx + 'datatable-row:nth-child(' + i + ')');

            if ($(rows).length > 0) {
              var maxHeight = Math.max.apply(null, $(rows).map(function () {
                return $(this).outerHeight();
              }).get());
              $(rows).css('height', Math.ceil(maxHeight));
            }
          }
        });
      },

      /**
       * Setup table DOM and classes
       */
      setupDOM: function setupDOM(table) {
        // set table classes
        $(table).find('> thead').addClass(pfx + 'datatable-head');
        $(table).find('> tbody').addClass(pfx + 'datatable-body');
        $(table).find('> tfoot').addClass(pfx + 'datatable-foot');
        $(table).find('tr').addClass(pfx + 'datatable-row');
        $(table).find('tr > th, tr > td').addClass(pfx + 'datatable-cell');
        $(table).find('tr > th, tr > td').each(function (i, td) {
          if ($(td).find('span').length === 0) {
            $(td).wrapInner($('<span/>').css('width', Plugin.cellOffset));
          }
        });
      },

      /**
       * Default scrollbar
       * @returns {{tableLocked: null, init: init, onScrolling:
       *     onScrolling}}
       */
      scrollbar: function scrollbar() {
        var scroll = {
          scrollable: null,
          tableLocked: null,
          initPosition: null,
          init: function init() {
            var screen = util.getViewPort().width; // setup scrollable datatable

            if (options.layout.scroll) {
              // add scrollable datatable class
              $(datatable.wrap).addClass(pfx + 'datatable-scroll');
              var scrollable = $(datatable.tableBody).find('.' + pfx + 'datatable-lock-scroll'); // check if scrollable area have rows

              if ($(scrollable).find('.' + pfx + 'datatable-row').length > 0 && $(scrollable).length > 0) {
                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');
                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');
                scroll.tableLocked = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:not(.' + pfx + 'datatable-lock-scroll)');

                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {
                  scroll.initCustomScrollbar(scrollable[0]);
                } else {
                  scroll.initDefaultScrollbar(scrollable);
                }
              } else if ($(datatable.tableBody).find('.' + pfx + 'datatable-row').length > 0) {
                scroll.scrollHead = $(datatable.tableHead).find('> .' + pfx + 'datatable-row');
                scroll.scrollFoot = $(datatable.tableFoot).find('> .' + pfx + 'datatable-row');

                if (Plugin.getOption('layout.customScrollbar') && util.detectIE() != 10 && screen > util.getBreakpoint('lg')) {
                  scroll.initCustomScrollbar(datatable.tableBody);
                } else {
                  scroll.initDefaultScrollbar(datatable.tableBody);
                }
              }
            }
          },
          initDefaultScrollbar: function initDefaultScrollbar(scrollable) {
            // get initial scroll position
            scroll.initPosition = $(scrollable).scrollLeft();
            $(scrollable).css('overflow-y', 'auto').off().on('scroll', scroll.onScrolling);
            $(scrollable).css('overflow-x', 'auto');
          },
          onScrolling: function onScrolling(e) {
            var left = $(this).scrollLeft();
            var top = $(this).scrollTop();

            if (util.isRTL()) {
              // deduct initial position for RTL
              left = left - scroll.initPosition;
            }

            $(scroll.scrollHead).css('left', -left);
            $(scroll.scrollFoot).css('left', -left);
            $(scroll.tableLocked).each(function (i, table) {
              if (Plugin.isLocked()) {
                // scrollbar offset
                top -= 1;
              }

              $(table).css('top', -top);
            });
          },
          initCustomScrollbar: function initCustomScrollbar(scrollable) {
            scroll.scrollable = scrollable; // create a new instance for table body with scrollbar

            Plugin.initScrollbar(scrollable); // get initial scroll position

            scroll.initPosition = $(scrollable).scrollLeft();
            $(scrollable).off().on('scroll', scroll.onScrolling);
          }
        };
        scroll.init();
        return scroll;
      },

      /**
       * Init custom scrollbar and reset position
       * @param element
       * @param options
       */
      initScrollbar: function initScrollbar(element, options) {
        if (!element || !element.nodeName) {
          return;
        }

        $(datatable.tableBody).css('overflow', '');
        var ps = $(element).data('ps');

        if (util.hasClass(element, 'ps') && typeof ps !== 'undefined') {
          ps.update();
        } else {
          ps = new PerfectScrollbar(element, Object.assign({}, {
            wheelSpeed: 0.5,
            swipeEasing: true,
            // wheelPropagation: false,
            minScrollbarLength: 40,
            maxScrollbarLength: 300,
            suppressScrollX: Plugin.getOption('rows.autoHide') && !Plugin.isLocked()
          }, options));
          $(element).data('ps', ps);
        } // reset perfect scrollbar on resize


        $(window).resize(function () {
          ps.update();
        });
      },

      /**
       * Set column title from options.columns settings
       */
      setHeadTitle: function setHeadTitle(tablePart) {
        if (typeof tablePart === 'undefined') tablePart = datatable.tableHead;
        tablePart = $(tablePart)[0];
        var columns = options.columns;
        var row = tablePart.getElementsByTagName('tr')[0];
        var ths = tablePart.getElementsByTagName('td');

        if (typeof row === 'undefined') {
          row = document.createElement('tr');
          tablePart.appendChild(row);
        }

        $.each(columns, function (i, column) {
          var th = ths[i];

          if (typeof th === 'undefined') {
            th = document.createElement('th');
            row.appendChild(th);
          } // set column title


          if (typeof column['title'] !== 'undefined') {
            th.innerHTML = column.title;
            th.setAttribute('data-field', column.field);
            util.addClass(th, column["class"]); // set disable autoHide or force enable

            if (typeof column.autoHide !== 'undefined') {
              if (column.autoHide !== true) {
                th.setAttribute('data-autohide-disabled', column.autoHide);
              } else {
                th.setAttribute('data-autohide-enabled', column.autoHide);
              }
            }

            $(th).data(column);
          } // set header attr option


          if (typeof column.attr !== 'undefined') {
            $.each(column.attr, function (key, val) {
              th.setAttribute(key, val);
            });
          } // apply text align to thead/tfoot


          if (typeof column.textAlign !== 'undefined') {
            var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';
            util.addClass(th, align);
          }
        });
        Plugin.setupDOM(tablePart);
      },

      /**
       * Initiate to get remote or local data via ajax
       */
      dataRender: function dataRender(action) {
        $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded');

        var buildMeta = function buildMeta() {
          datatable.dataSet = datatable.dataSet || [];
          Plugin.localDataUpdate(); // local pagination meta

          var meta = Plugin.getDataSourceParam('pagination');

          if (meta.perpage === 0) {
            meta.perpage = options.data.pageSize || 10;
          }

          meta.total = datatable.dataSet.length;
          var start = Math.max(meta.perpage * (meta.page - 1), 0);
          var end = Math.min(start + meta.perpage, meta.total);
          datatable.dataSet = $(datatable.dataSet).slice(start, end);
          return meta;
        };

        var afterGetData = function afterGetData(result) {
          var localPagingCallback = function localPagingCallback(ctx, meta) {
            if (!$(ctx.pager).hasClass(pfx + 'datatable-paging-loaded')) {
              $(ctx.pager).remove();
              ctx.init(meta);
            }

            $(ctx.pager).off().on(pfx + 'datatable-on-goto-page', function (e) {
              $(ctx.pager).remove();
              ctx.init(meta);
            });
            var start = Math.max(meta.perpage * (meta.page - 1), 0);
            var end = Math.min(start + meta.perpage, meta.total);
            Plugin.localDataUpdate();
            datatable.dataSet = $(datatable.dataSet).slice(start, end); // insert data into table content

            Plugin.insertData();
          };

          $(datatable.wrap).removeClass(pfx + 'datatable-error'); // pagination enabled

          if (options.pagination) {
            if (options.data.serverPaging && options.data.type !== 'local') {
              // server pagination
              var serverMeta = Plugin.getObject('meta', result || null);

              if (serverMeta !== null) {
                Plugin.pagingObject = Plugin.paging(serverMeta);
              } else {
                // no meta object from server response, fallback to local pagination
                Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);
              }
            } else {
              // local pagination can be used by remote data also
              Plugin.pagingObject = Plugin.paging(buildMeta(), localPagingCallback);
            }
          } else {
            // pagination is disabled
            Plugin.localDataUpdate();
          } // insert data into table content


          Plugin.insertData();
        }; // get local datasource


        if (options.data.type === 'local' // for remote json datasource
        // || typeof options.data.source.read === 'undefined' && datatable.dataSet !== null
        // for remote datasource, server sorting is disabled and data already received from remote
        || options.data.serverSorting === false && action === 'sort' || options.data.serverFiltering === false && action === 'search') {
          setTimeout(function () {
            afterGetData();
            Plugin.setAutoColumns();
          });
          return;
        } // getting data from remote only


        Plugin.getData().done(afterGetData);
      },

      /**
       * Process ajax data
       */
      insertData: function insertData() {
        datatable.dataSet = datatable.dataSet || [];
        var params = Plugin.getDataSourceParam(); // get row attributes

        var pagination = params.pagination;
        var start = (Math.max(pagination.page, 1) - 1) * pagination.perpage;
        var end = Math.min(pagination.page, pagination.pages) * pagination.perpage;
        var rowProps = {};

        if (typeof options.data.attr.rowProps !== 'undefined' && options.data.attr.rowProps.length) {
          rowProps = options.data.attr.rowProps.slice(start, end);
        }

        var tableBody = document.createElement('tbody');
        tableBody.style.visibility = 'hidden';
        var colLength = options.columns.length;
        $.each(datatable.dataSet, function (rowIndex, row) {
          var tr = document.createElement('tr');
          tr.setAttribute('data-row', rowIndex); // keep data object to row

          $(tr).data('obj', row);

          if (typeof rowProps[rowIndex] !== 'undefined') {
            $.each(rowProps[rowIndex], function () {
              tr.setAttribute(this.name, this.value);
            });
          }

          var cellIndex = 0;
          var tds = [];

          for (var a = 0; a < colLength; a += 1) {
            var column = options.columns[a];
            var classes = []; // add sorted class to cells

            if (Plugin.getObject('sort.field', params) === column.field) {
              classes.push(pfx + 'datatable-cell-sorted');
            } // apply text align


            if (typeof column.textAlign !== 'undefined') {
              var align = typeof datatable.textAlign[column.textAlign] !== 'undefined' ? datatable.textAlign[column.textAlign] : '';
              classes.push(align);
            } // var classAttr = '';


            if (typeof column["class"] !== 'undefined') {
              classes.push(column["class"]);
            }

            var td = document.createElement('td');
            util.addClass(td, classes.join(' '));
            td.setAttribute('data-field', column.field); // set disable autoHide or force enable

            if (typeof column.autoHide !== 'undefined') {
              if (column.autoHide !== true) {
                td.setAttribute('data-autohide-disabled', column.autoHide);
              } else {
                td.setAttribute('data-autohide-enabled', column.autoHide);
              }
            }

            td.innerHTML = Plugin.getObject(column.field, row);
            td.setAttribute('aria-label', Plugin.getObject(column.field, row));
            tr.appendChild(td);
          }

          tableBody.appendChild(tr);
        }); // display no records message

        if (datatable.dataSet.length === 0) {
          var errorSpan = document.createElement('span');
          util.addClass(errorSpan, pfx + 'datatable-error');
          errorSpan.innerHTML = Plugin.getOption('translate.records.noRecords');
          tableBody.appendChild(errorSpan);
          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');
          Plugin.spinnerCallback(false);
        } // replace existing table body


        $(datatable.tableBody).replaceWith(tableBody);
        datatable.tableBody = tableBody; // layout update

        Plugin.setupDOM(datatable.table);
        Plugin.setupCellField([datatable.tableBody]);
        Plugin.setupTemplateCell(datatable.tableBody);
        Plugin.layoutUpdate();
      },
      updateTableComponents: function updateTableComponents() {
        datatable.tableHead = $(datatable.table).children('thead').get(0);
        datatable.tableBody = $(datatable.table).children('tbody').get(0);
        datatable.tableFoot = $(datatable.table).children('tfoot').get(0);
      },

      /**
       * Call ajax for raw JSON data
       */
      getData: function getData() {
        // Plugin.spinnerCallback(true);
        var ajaxParams = {
          dataType: 'json',
          method: 'POST',
          data: {},
          timeout: Plugin.getOption('data.source.read.timeout') || 30000
        };

        if (options.data.type === 'local') {
          ajaxParams.url = options.data.source;
        }

        if (options.data.type === 'remote') {
          var data = Plugin.getDataSourceParam(); // remove if server params is not enabled

          if (!Plugin.getOption('data.serverPaging')) {
            delete data['pagination'];
          }

          if (!Plugin.getOption('data.serverSorting')) {
            delete data['sort'];
          }

          ajaxParams.data = $.extend({}, ajaxParams.data, Plugin.getOption('data.source.read.params'), data);
          ajaxParams = $.extend({}, ajaxParams, Plugin.getOption('data.source.read'));
          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source.read');
          if (typeof ajaxParams.url !== 'string') ajaxParams.url = Plugin.getOption('data.source'); // ajaxParams.data = $.extend(ajaxParams.data, data.pagination);
        }

        return $.ajax(ajaxParams).done(function (response, textStatus, jqXHR) {
          datatable.lastResponse = response; // extendible data map callback for custom datasource

          datatable.dataSet = datatable.originalDataSet = Plugin.dataMapCallback(response);
          Plugin.setAutoColumns();
          $(datatable).trigger(pfx + 'datatable-on-ajax-done', [datatable.dataSet]);
        }).fail(function (jqXHR, textStatus, errorThrown) {
          $(datatable).trigger(pfx + 'datatable-on-ajax-fail', [jqXHR]);
          $(datatable.tableBody).html($('<span/>').addClass(pfx + 'datatable-error').html(Plugin.getOption('translate.records.noRecords')));
          $(datatable.wrap).addClass(pfx + 'datatable-error ' + pfx + 'datatable-loaded');
          Plugin.spinnerCallback(false);
        }).always(function () {});
      },

      /**
       * Pagination object
       * @param meta if null, local pagination, otherwise remote
       *     pagination
       * @param callback for update data when navigating page
       */
      paging: function paging(meta, callback) {
        var pg = {
          meta: null,
          pager: null,
          paginateEvent: null,
          pagerLayout: {
            pagination: null,
            info: null
          },
          callback: null,
          init: function init(meta) {
            pg.meta = meta; // parse pagination meta to integer

            pg.meta.page = parseInt(pg.meta.page);
            pg.meta.pages = parseInt(pg.meta.pages);
            pg.meta.perpage = parseInt(pg.meta.perpage);
            pg.meta.total = parseInt(pg.meta.total); // always recount total pages

            pg.meta.pages = Math.max(Math.ceil(pg.meta.total / pg.meta.perpage), 1); // current page must be not over than total pages

            if (pg.meta.page > pg.meta.pages) pg.meta.page = pg.meta.pages; // set unique event name between tables

            pg.paginateEvent = Plugin.getTablePrefix('paging');
            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');
            if ($(pg.pager).hasClass(pfx + 'datatable-paging-loaded')) return; // if class .'+pfx+'datatable-paging-loaded not exist, recreate pagination

            $(pg.pager).remove(); // if no pages available

            if (pg.meta.pages === 0) return; // update datasource params

            Plugin.setDataSourceParam('pagination', {
              page: pg.meta.page,
              pages: pg.meta.pages,
              perpage: pg.meta.perpage,
              total: pg.meta.total
            }); // default callback function, contains remote pagination handler

            pg.callback = pg.serverCallback; // custom callback function

            if (typeof callback === 'function') pg.callback = callback;
            pg.addPaginateEvent();
            pg.populate();
            pg.meta.page = Math.max(pg.meta.page || 1, pg.meta.page);
            $(datatable).trigger(pg.paginateEvent, pg.meta);
            pg.pagingBreakpoint.call();
            $(window).resize(pg.pagingBreakpoint);
          },
          serverCallback: function serverCallback(ctx, meta) {
            Plugin.dataRender();
          },
          populate: function populate() {
            datatable.dataSet = datatable.dataSet || []; // no records available

            if (datatable.dataSet.length === 0) return;
            var icons = Plugin.getOption('layout.icons.pagination');
            var title = Plugin.getOption('translate.toolbar.pagination.items.default'); // pager root element

            pg.pager = $('<div/>').addClass(pfx + 'datatable-pager ' + pfx + 'datatable-paging-loaded'); // numbering links

            var pagerNumber = $('<ul/>').addClass(pfx + 'datatable-pager-nav mb-5 mb-sm-0');
            pg.pagerLayout['pagination'] = pagerNumber; // pager first/previous button

            $('<li/>').append($('<a/>').attr('title', title.first).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-first').append($('<i/>').addClass(icons.first)).on('click', pg.gotoMorePage).attr('data-page', 1)).appendTo(pagerNumber);
            $('<li/>').append($('<a/>').attr('title', title.prev).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-prev').append($('<i/>').addClass(icons.prev)).on('click', pg.gotoMorePage)).appendTo(pagerNumber); // more previous pages

            $('<li/>').append($('<a/>').attr('title', title.more).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-more-prev').html($('<i/>').addClass(icons.more)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);
            $('<li/>').append($('<input/>').attr('type', 'text').addClass(pfx + 'datatable-pager-input form-control').attr('title', title.input).on('keyup', function () {
              // on keyup update [data-page]
              $(this).attr('data-page', Math.abs($(this).val()));
            }).on('keypress', function (e) {
              // on keypressed enter button
              if (e.which === 13) pg.gotoMorePage(e);
            })).appendTo(pagerNumber);
            var pagesNumber = Plugin.getOption('toolbar.items.pagination.pages.desktop.pagesNumber');
            var end = Math.ceil(pg.meta.page / pagesNumber) * pagesNumber;
            var start = end - pagesNumber;

            if (end > pg.meta.pages) {
              end = pg.meta.pages;
            } // keep pagination 1 if there is no records


            if (start < 0) {
              start = 0;
            }

            for (var x = start; x < (end || 1); x++) {
              var pageNumber = x + 1;
              $('<li/>').append($('<a/>').addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-number').text(pageNumber).attr('data-page', pageNumber).attr('title', pageNumber).on('click', pg.gotoPage)).appendTo(pagerNumber);
            } // more next pages


            $('<li/>').append($('<a/>').attr('title', title.more).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-more-next').html($('<i/>').addClass(icons.more)).on('click', pg.gotoMorePage)).appendTo(pagerNumber); // pager next/last button

            $('<li/>').append($('<a/>').attr('title', title.next).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-next').append($('<i/>').addClass(icons.next)).on('click', pg.gotoMorePage)).appendTo(pagerNumber);
            $('<li/>').append($('<a/>').attr('title', title.last).addClass(pfx + 'datatable-pager-link ' + pfx + 'datatable-pager-link-last').append($('<i/>').addClass(icons.last)).on('click', pg.gotoMorePage).attr('data-page', pg.meta.pages)).appendTo(pagerNumber); // page info

            if (Plugin.getOption('toolbar.items.info')) {
              pg.pagerLayout['info'] = $('<div/>').addClass(pfx + 'datatable-pager-info').append($('<span/>').addClass(pfx + 'datatable-pager-detail'));
            }

            $.each(Plugin.getOption('toolbar.layout'), function (i, layout) {
              $(pg.pagerLayout[layout]).appendTo(pg.pager);
            }); // page size select

            var pageSizeSelect = $('<select/>').addClass('selectpicker ' + pfx + 'datatable-pager-size').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select')).attr('data-width', '60px').attr('data-container', 'body').val(pg.meta.perpage).on('change', pg.updatePerpage).prependTo(pg.pagerLayout['info']);
            var pageSizes = Plugin.getOption('toolbar.items.pagination.pageSizeSelect'); // default value here, to fix override option by user

            if (pageSizes.length == 0) pageSizes = [5, 10, 20, 30, 50, 100];
            $.each(pageSizes, function (i, size) {
              var display = size;
              if (size === -1) display = Plugin.getOption('translate.toolbar.pagination.items.default.all');
              $('<option/>').attr('value', size).html(display).appendTo(pageSizeSelect);
            }); // init selectpicker to dropdown

            $(datatable).ready(function () {
              $('.selectpicker').selectpicker().on('hide.bs.select', function () {
                // fix dropup arrow icon on hide
                $(this).closest('.bootstrap-select').removeClass('dropup');
              }).siblings('.dropdown-toggle').attr('title', Plugin.getOption('translate.toolbar.pagination.items.default.select'));
            });
            pg.paste();
          },
          paste: function paste() {
            // insert pagination based on placement position, top|bottom
            $.each($.unique(Plugin.getOption('toolbar.placement')), function (i, position) {
              if (position === 'bottom') {
                $(pg.pager).clone(true).insertAfter(datatable.table);
              }

              if (position === 'top') {
                // pager top need some extra space
                $(pg.pager).clone(true).addClass(pfx + 'datatable-pager-top').insertBefore(datatable.table);
              }
            });
          },
          gotoMorePage: function gotoMorePage(e) {
            e.preventDefault(); // $(this) is a link of .'+pfx+'datatable-pager-link

            if ($(this).attr('disabled') === 'disabled') return false;
            var page = $(this).attr('data-page'); // event from text input

            if (typeof page === 'undefined') {
              page = $(e.target).attr('data-page');
            }

            pg.openPage(parseInt(page));
            return false;
          },
          gotoPage: function gotoPage(e) {
            e.preventDefault(); // prevent from click same page number

            if ($(this).hasClass(pfx + 'datatable-pager-link-active')) return;
            pg.openPage(parseInt($(this).data('page')));
          },
          openPage: function openPage(page) {
            // currentPage is 1-based index
            pg.meta.page = parseInt(page);
            $(datatable).trigger(pg.paginateEvent, pg.meta);
            pg.callback(pg, pg.meta); // update page callback function

            $(pg.pager).trigger(pfx + 'datatable-on-goto-page', pg.meta);
          },
          updatePerpage: function updatePerpage(e) {
            e.preventDefault(); // if (Plugin.getOption('layout.height') === null) {
            // fix white space, when perpage is set from many records to less records
            // $('html, body').animate({scrollTop: $(datatable).position().top});
            // }
            // hide dropdown after select

            $(this).selectpicker('toggle');
            pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').removeClass(pfx + 'datatable-paging-loaded'); // on change select page size

            if (e.originalEvent) {
              pg.meta.perpage = parseInt($(this).val());
            }

            $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(pg.meta.perpage).attr('data-selected', pg.meta.perpage); // update datasource params

            Plugin.setDataSourceParam('pagination', {
              page: pg.meta.page,
              pages: pg.meta.pages,
              perpage: pg.meta.perpage,
              total: pg.meta.total
            }); // update page callback function

            $(pg.pager).trigger(pfx + 'datatable-on-update-perpage', pg.meta);
            $(datatable).trigger(pg.paginateEvent, pg.meta);
            pg.callback(pg, pg.meta); // update pagination info

            pg.updateInfo.call();
          },
          addPaginateEvent: function addPaginateEvent(e) {
            // pagination event
            $(datatable).off(pg.paginateEvent).on(pg.paginateEvent, function (e, meta) {
              Plugin.spinnerCallback(true);
              pg.pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager');
              var pagerNumber = $(pg.pager).find('.' + pfx + 'datatable-pager-nav'); // set sync active page class

              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-active').removeClass(pfx + 'datatable-pager-link-active');
              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number[data-page="' + meta.page + '"]').addClass(pfx + 'datatable-pager-link-active'); // set next and previous link page number

              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-prev').attr('data-page', Math.max(meta.page - 1, 1));
              $(pagerNumber).find('.' + pfx + 'datatable-pager-link-next').attr('data-page', Math.min(meta.page + 1, meta.pages)); // current page input value sync

              $(pg.pager).each(function () {
                $(this).find('.' + pfx + 'datatable-pager-input[type="text"]').prop('value', meta.page);
              }); // if only 1 page, should hide page?
              // $(pg.pager).find('.' + pfx + 'datatable-pager-nav').show();
              // if (meta.pages <= 1) {
              // 	// hide pager if has 1 page
              // 	$(pg.pager).find('.' + pfx + 'datatable-pager-nav').hide();
              // }
              // update datasource params

              Plugin.setDataSourceParam('pagination', {
                page: pg.meta.page,
                pages: pg.meta.pages,
                perpage: pg.meta.perpage,
                total: pg.meta.total
              });
              $(pg.pager).find('select.' + pfx + 'datatable-pager-size').val(meta.perpage).attr('data-selected', meta.perpage); // clear active rows

              $(datatable.table).find('.' + pfx + 'checkbox > [type="checkbox"]').prop('checked', false);
              $(datatable.table).find('.' + pfx + 'datatable-row-active').removeClass(pfx + 'datatable-row-active');
              pg.updateInfo.call();
              pg.pagingBreakpoint.call(); // Plugin.resetScroll();
            });
          },
          updateInfo: function updateInfo() {
            var start = Math.max(pg.meta.perpage * (pg.meta.page - 1) + 1, 1);
            var end = Math.min(start + pg.meta.perpage - 1, pg.meta.total); // page info update

            $(pg.pager).find('.' + pfx + 'datatable-pager-info').find('.' + pfx + 'datatable-pager-detail').html(Plugin.dataPlaceholder(Plugin.getOption('translate.toolbar.pagination.items.info'), {
              // set start page 0 if the is no records. eg. Showing 0 - 0 of 0
              start: pg.meta.total === 0 ? 0 : start,
              end: pg.meta.perpage === -1 ? pg.meta.total : end,
              pageSize: pg.meta.perpage === -1 || pg.meta.perpage >= pg.meta.total ? pg.meta.total : pg.meta.perpage,
              total: pg.meta.total
            }));
          },

          /**
           * Update pagination layout breakpoint
           */
          pagingBreakpoint: function pagingBreakpoint() {
            // keep page links reference
            var pagerNumber = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav');
            if ($(pagerNumber).length === 0) return;
            var currentPage = Plugin.getCurrentPage();
            var pagerInput = $(pagerNumber).find('.' + pfx + 'datatable-pager-input').closest('li'); // reset

            $(pagerNumber).find('li').show(); // pagination update

            $.each(Plugin.getOption('toolbar.items.pagination.pages'), function (mode, option) {
              if (util.isInResponsiveRange(mode)) {
                switch (mode) {
                  case 'desktop':
                  case 'tablet':
                    var end = Math.ceil(currentPage / option.pagesNumber) * option.pagesNumber;
                    var start = end - option.pagesNumber;
                    $(pagerInput).hide();
                    pg.meta = Plugin.getDataSourceParam('pagination');
                    pg.paginationUpdate();
                    break;

                  case 'mobile':
                    $(pagerInput).show();
                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-prev').closest('li').hide();
                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-more-next').closest('li').hide();
                    $(pagerNumber).find('.' + pfx + 'datatable-pager-link-number').closest('li').hide();
                    break;
                }

                return false;
              }
            });
          },

          /**
           * Update pagination number and button display
           */
          paginationUpdate: function paginationUpdate() {
            var pager = $(datatable.table).siblings('.' + pfx + 'datatable-pager').find('.' + pfx + 'datatable-pager-nav'),
                pagerMorePrev = $(pager).find('.' + pfx + 'datatable-pager-link-more-prev'),
                pagerMoreNext = $(pager).find('.' + pfx + 'datatable-pager-link-more-next'),
                pagerFirst = $(pager).find('.' + pfx + 'datatable-pager-link-first'),
                pagerPrev = $(pager).find('.' + pfx + 'datatable-pager-link-prev'),
                pagerNext = $(pager).find('.' + pfx + 'datatable-pager-link-next'),
                pagerLast = $(pager).find('.' + pfx + 'datatable-pager-link-last'); // get visible page

            var pagerNumber = $(pager).find('.' + pfx + 'datatable-pager-link-number'); // get page before of first visible

            var morePrevPage = Math.max($(pagerNumber).first().data('page') - 1, 1);
            $(pagerMorePrev).each(function (i, prev) {
              $(prev).attr('data-page', morePrevPage);
            }); // show/hide <li>

            if (morePrevPage === 1) {
              $(pagerMorePrev).parent().hide();
            } else {
              $(pagerMorePrev).parent().show();
            } // get page after of last visible


            var moreNextPage = Math.min($(pagerNumber).last().data('page') + 1, pg.meta.pages);
            $(pagerMoreNext).each(function (i, prev) {
              $(pagerMoreNext).attr('data-page', moreNextPage).show();
            }); // show/hide <li>

            if (moreNextPage === pg.meta.pages // missing dot fix when last hidden page is one left
            && moreNextPage === $(pagerNumber).last().data('page')) {
              $(pagerMoreNext).parent().hide();
            } else {
              $(pagerMoreNext).parent().show();
            } // begin/end of pages


            if (pg.meta.page === 1) {
              $(pagerFirst).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');
              $(pagerPrev).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');
            } else {
              $(pagerFirst).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');
              $(pagerPrev).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');
            }

            if (pg.meta.page === pg.meta.pages) {
              $(pagerNext).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');
              $(pagerLast).attr('disabled', true).addClass(pfx + 'datatable-pager-link-disabled');
            } else {
              $(pagerNext).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');
              $(pagerLast).removeAttr('disabled').removeClass(pfx + 'datatable-pager-link-disabled');
            } // display more buttons


            var nav = Plugin.getOption('toolbar.items.pagination.navigation');
            if (!nav.first) $(pagerFirst).remove();
            if (!nav.prev) $(pagerPrev).remove();
            if (!nav.next) $(pagerNext).remove();
            if (!nav.last) $(pagerLast).remove();

            if (!nav.more) {
              $(pagerMorePrev).remove();
              $(pagerMoreNext).remove();
            }
          }
        };
        pg.init(meta);
        return pg;
      },

      /**
       * Hide/show table cell defined by
       * options[columns][i][responsive][visible/hidden]
       */
      columnHide: function columnHide() {
        var screen = util.getViewPort().width; // foreach columns setting

        $.each(options.columns, function (i, column) {
          if (typeof column.responsive !== 'undefined' || typeof column.visible !== 'undefined') {
            var field = column.field;
            var tds = $.grep($(datatable.table).find('.' + pfx + 'datatable-cell'), function (n, i) {
              return field === $(n).data('field');
            });
            setTimeout(function () {
              // hide by force
              if (Plugin.getObject('visible', column) === false) {
                $(tds).hide();
              } else {
                // show/hide by responsive breakpoint
                if (util.getBreakpoint(Plugin.getObject('responsive.hidden', column)) >= screen) {
                  $(tds).hide();
                } else {
                  $(tds).show();
                }

                if (util.getBreakpoint(Plugin.getObject('responsive.visible', column)) <= screen) {
                  $(tds).show();
                } else {
                  $(tds).hide();
                }
              }
            });
          }
        });
      },

      /**
       * Setup sub datatable
       */
      setupSubDatatable: function setupSubDatatable() {
        var subTableCallback = Plugin.getOption('detail.content');
        if (typeof subTableCallback !== 'function') return; // subtable already exist

        if ($(datatable.table).find('.' + pfx + 'datatable-subtable').length > 0) return;
        $(datatable.wrap).addClass(pfx + 'datatable-subtable');
        options.columns[0]['subtable'] = true; // toggle on open sub table

        var toggleSubTable = function toggleSubTable(e) {
          e.preventDefault(); // get parent row of this subtable

          var parentRow = $(this).closest('.' + pfx + 'datatable-row'); // get subtable row for sub table

          var subTableRow = $(parentRow).next('.' + pfx + 'datatable-row-subtable');

          if ($(subTableRow).length === 0) {
            // prepare DOM for sub table, each <tr> as parent and add <tr> as child table
            subTableRow = $('<tr/>').addClass(pfx + 'datatable-row-subtable ' + pfx + 'datatable-row-loading').hide().append($('<td/>').addClass(pfx + 'datatable-subtable').attr('colspan', Plugin.getTotalColumns()));
            $(parentRow).after(subTableRow); // add class to even row

            if ($(parentRow).hasClass(pfx + 'datatable-row-even')) {
              $(subTableRow).addClass(pfx + 'datatable-row-subtable-even');
            }
          }

          $(subTableRow).toggle();
          var subTable = $(subTableRow).find('.' + pfx + 'datatable-subtable'); // get id from first column of parent row

          var primaryKey = $(this).closest('[data-field]:first-child').find('.' + pfx + 'datatable-toggle-subtable').data('value');
          var icon = $(this).find('i').removeAttr('class'); // prevent duplicate datatable init

          if ($(parentRow).hasClass(pfx + 'datatable-row-subtable-expanded')) {
            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.collapse')); // remove expand class from parent row

            $(parentRow).removeClass(pfx + 'datatable-row-subtable-expanded'); // trigger event on collapse

            $(datatable).trigger(pfx + 'datatable-on-collapse-subtable', [parentRow]);
          } else {
            // expand and run callback function
            $(icon).addClass(Plugin.getOption('layout.icons.rowDetail.expand')); // add expand class to parent row

            $(parentRow).addClass(pfx + 'datatable-row-subtable-expanded'); // trigger event on expand

            $(datatable).trigger(pfx + 'datatable-on-expand-subtable', [parentRow]);
          } // prevent duplicate datatable init


          if ($(subTable).find('.' + pfx + 'datatable').length === 0) {
            // get data by primary id
            $.map(datatable.dataSet, function (n, i) {
              // primary id must be at the first column, otherwise e.data will be undefined
              if (primaryKey === n[options.columns[0].field]) {
                e.data = n;
                return true;
              }

              return false;
            }); // deprecated in v5.0.6

            e.detailCell = subTable;
            e.parentRow = parentRow;
            e.subTable = subTable; // run callback with event

            subTableCallback(e);
            $(subTable).children('.' + pfx + 'datatable').on(pfx + 'datatable-on-init', function (e) {
              $(subTableRow).removeClass(pfx + 'datatable-row-loading');
            });

            if (Plugin.getOption('data.type') === 'local') {
              $(subTableRow).removeClass(pfx + 'datatable-row-loading');
            }
          }
        };

        var columns = options.columns;
        $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function (tri, tr) {
          $(tr).find('.' + pfx + 'datatable-cell').each(function (tdi, td) {
            // get column settings by field
            var column = $.grep(columns, function (n, i) {
              return $(td).data('field') === n.field;
            })[0];

            if (typeof column !== 'undefined') {
              var value = $(td).text(); // enable column subtable toggle

              if (typeof column.subtable !== 'undefined' && column.subtable) {
                // check if subtable toggle exist
                if ($(td).find('.' + pfx + 'datatable-toggle-subtable').length > 0) return; // append subtable toggle

                $(td).html($('<a/>').addClass(pfx + 'datatable-toggle-subtable').attr('href', '#').attr('data-value', value).attr('title', Plugin.getOption('detail.title')).on('click', toggleSubTable).append($('<i/>').css('width', $(td).data('width')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'))));
              }
            }
          });
        }); // $(datatable.tableHead).find('.'+pfx+'-datatable-row').first()
      },

      /**
       * Datasource mapping callback
       */
      dataMapCallback: function dataMapCallback(raw) {
        // static dataset array
        var dataSet = raw; // dataset mapping callback

        if (typeof Plugin.getOption('data.source.read.map') === 'function') {
          return Plugin.getOption('data.source.read.map')(raw);
        } else {
          // default data mapping fallback
          if (typeof raw !== 'undefined' && typeof raw.data !== 'undefined') {
            dataSet = raw.data;
          }
        }

        return dataSet;
      },
      isSpinning: false,

      /**
       * BlockUI spinner callback
       * @param block
       * @param target
       */
      spinnerCallback: function spinnerCallback(block, target) {
        if (typeof target === 'undefined') target = datatable; // get spinner options

        var spinnerOptions = Plugin.getOption('layout.spinner'); // spinner is disabled

        if (typeof spinnerOptions === 'undefined' || !spinnerOptions) {
          return;
        }

        if (block) {
          if (!Plugin.isSpinning) {
            if (typeof spinnerOptions.message !== 'undefined' && spinnerOptions.message === true) {
              // use default spinner message from translation
              spinnerOptions.message = Plugin.getOption('translate.records.processing');
            }

            Plugin.isSpinning = true;

            if (typeof app !== 'undefined') {
              app.block(target, spinnerOptions);
            }
          }
        } else {
          Plugin.isSpinning = false;

          if (typeof app !== 'undefined') {
            app.unblock(target);
          }
        }
      },

      /**
       * Default sort callback function
       * @param data
       * @param sort
       * @param column
       * @returns {*|Array.<T>|{sort, field}|{asc, desc}}
       */
      sortCallback: function sortCallback(data, sort, column) {
        var type = column['type'] || 'string';
        var format = column['format'] || '';
        var field = column['field'];
        return $(data).sort(function (a, b) {
          var aField = a[field];
          var bField = b[field];

          switch (type) {
            case 'date':
              if (typeof moment === 'undefined') {
                throw new Error('Moment.js is required.');
              }

              var diff = moment(aField, format).diff(moment(bField, format));

              if (sort === 'asc') {
                return diff > 0 ? 1 : diff < 0 ? -1 : 0;
              } else {
                return diff < 0 ? 1 : diff > 0 ? -1 : 0;
              }

              break;

            case 'number':
              if (isNaN(parseFloat(aField)) && aField != null) {
                aField = Number(aField.replace(/[^0-9\.-]+/g, ''));
              }

              if (isNaN(parseFloat(bField)) && bField != null) {
                bField = Number(bField.replace(/[^0-9\.-]+/g, ''));
              }

              aField = parseFloat(aField);
              bField = parseFloat(bField);

              if (sort === 'asc') {
                return aField > bField ? 1 : aField < bField ? -1 : 0;
              } else {
                return aField < bField ? 1 : aField > bField ? -1 : 0;
              }

              break;

            case 'html':
              return $(data).sort(function (a, b) {
                // get the text only from html
                aField = $(a[field]).text();
                bField = $(b[field]).text(); // sort

                if (sort === 'asc') {
                  return aField > bField ? 1 : aField < bField ? -1 : 0;
                } else {
                  return aField < bField ? 1 : aField > bField ? -1 : 0;
                }
              });
              break;

            case 'string':
            default:
              if (sort === 'asc') {
                return aField > bField ? 1 : aField < bField ? -1 : 0;
              } else {
                return aField < bField ? 1 : aField > bField ? -1 : 0;
              }

              break;
          }
        });
      },

      /**
       * Custom debug log
       * @param text
       * @param obj
       */
      log: function log(text, obj) {
        if (typeof obj === 'undefined') obj = '';

        if (datatable.debug) {
          console.log(text, obj);
        }
      },

      /**
       * Auto hide columnds overflow in row
       */
      autoHide: function autoHide() {
        var hiddenExist = false; // force hide enabled

        var hidDefault = $(datatable.table).find('[data-autohide-enabled]');

        if (hidDefault.length) {
          hiddenExist = true;
          hidDefault.hide();
        }

        var toggleHiddenColumns = function toggleHiddenColumns(e) {
          e.preventDefault();
          var row = $(this).closest('.' + pfx + 'datatable-row');
          var detailRow = $(row).next();

          if (!$(detailRow).hasClass(pfx + 'datatable-row-detail')) {
            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.collapse')).addClass(Plugin.getOption('layout.icons.rowDetail.expand'));
            var hiddenCells = $(row).find('.' + pfx + 'datatable-cell:hidden');
            var clonedCells = hiddenCells.clone().show();
            detailRow = $('<tr/>').addClass(pfx + 'datatable-row-detail').insertAfter(row);
            var detailRowTd = $('<td/>').addClass(pfx + 'datatable-detail').attr('colspan', Plugin.getTotalColumns()).appendTo(detailRow);
            var detailSubTable = $('<table/>');
            $(clonedCells).each(function () {
              var field = $(this).data('field');
              var column = $.grep(options.columns, function (n, i) {
                return field === n.field;
              })[0];

              if (typeof column === 'undefined' || column.visible !== false) {
                $(detailSubTable).append($('<tr class="' + pfx + 'datatable-row"></tr>').append($('<td class="' + pfx + 'datatable-cell"></td>').append($('<span/>').append(column.title))).append(this));
              }
            });
            $(detailRowTd).append(detailSubTable);
          } else {
            $(this).find('i').removeClass(Plugin.getOption('layout.icons.rowDetail.expand')).addClass(Plugin.getOption('layout.icons.rowDetail.collapse'));
            $(detailRow).remove();
          }
        };

        setTimeout(function () {
          $(datatable.table).find('.' + pfx + 'datatable-cell').show();
          $(datatable.tableBody).each(function () {
            var recursive = 0;

            while ($(this)[0].offsetWidth < $(this)[0].scrollWidth && recursive < options.columns.length) {
              $(datatable.table).find('.' + pfx + 'datatable-row').each(function (i) {
                var cell = $(this).find('.' + pfx + 'datatable-cell:not(:hidden):not([data-autohide-disabled])').last();
                $(cell).hide();
                hiddenExist = true;
              });
              recursive++;
            }
          });

          if (hiddenExist) {
            // toggle show hidden columns
            $(datatable.tableBody).find('.' + pfx + 'datatable-row').each(function () {
              // if no toggle yet
              if ($(this).find('.' + pfx + 'datatable-toggle-detail').length === 0) {
                // add toggle
                $(this).prepend($('<td/>').addClass(pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail').append($('<a/>').addClass(pfx + 'datatable-toggle-detail').attr('href', '').on('click', toggleHiddenColumns).append('<i class="' + Plugin.getOption('layout.icons.rowDetail.collapse') + '"></i>')));
              } // check if subtable toggle exist


              if ($(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').length === 0) {
                // add empty column to the header and footer
                $(datatable.tableHead).find('.' + pfx + 'datatable-row').first().prepend('<th class="' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail"><span></span></th>');
                $(datatable.tableFoot).find('.' + pfx + 'datatable-row').first().prepend('<th class="' + pfx + 'datatable-cell ' + pfx + 'datatable-toggle-detail"><span></span></th>');
              } else {
                $(datatable.tableHead).find('.' + pfx + 'datatable-toggle-detail').find('span');
              }
            });
          }
        });
        Plugin.adjustCellsWidth.call();
      },

      /**
       * To enable auto columns features for remote data source
       */
      setAutoColumns: function setAutoColumns() {
        if (Plugin.getOption('data.autoColumns')) {
          $.each(datatable.dataSet[0], function (k, v) {
            var found = $.grep(options.columns, function (n, i) {
              return k === n.field;
            });

            if (found.length === 0) {
              options.columns.push({
                field: k,
                title: k
              });
            }
          });
          $(datatable.tableHead).find('.' + pfx + 'datatable-row').remove();
          Plugin.setHeadTitle();

          if (Plugin.getOption('layout.footer')) {
            $(datatable.tableFoot).find('.' + pfx + 'datatable-row').remove();
            Plugin.setHeadTitle(datatable.tableFoot);
          }
        }
      },

      /********************
       ** HELPERS
       ********************/

      /**
       * Check if table is a locked colums table
       */
      isLocked: function isLocked() {
        var isLocked = Plugin.lockEnabledColumns();
        return isLocked.left.length > 0 || isLocked.right.length > 0;
      },
      isSubtable: function isSubtable() {
        return util.hasClass(datatable.wrap[0], pfx + 'datatable-subtable') || false;
      },

      /**
       * Get total extra space of an element for width calculation,
       * including padding, margin, border
       * @param element
       * @returns {number}
       */
      getExtraSpace: function getExtraSpace(element) {
        var padding = parseInt($(element).css('paddingRight')) + parseInt($(element).css('paddingLeft'));
        var margin = parseInt($(element).css('marginRight')) + parseInt($(element).css('marginLeft'));
        var border = Math.ceil($(element).css('border-right-width').replace('px', ''));
        return padding + margin + border;
      },

      /**
       * Insert data of array into {{ }} template placeholder
       * @param template
       * @param data
       * @returns {*}
       */
      dataPlaceholder: function dataPlaceholder(template, data) {
        var result = template;
        $.each(data, function (key, val) {
          result = result.replace('{{' + key + '}}', val);
        });
        return result;
      },

      /**
       * Get table unique ID
       * Note: table unique change each time refreshed
       * @param suffix
       * @returns {*}
       */
      getTableId: function getTableId(suffix) {
        if (typeof suffix === 'undefined') suffix = '';
        var id = $(datatable).attr('id');

        if (typeof id === 'undefined') {
          id = $(datatable).attr('class').split(' ')[0];
        }

        return id + suffix;
      },

      /**
       * Get table prefix with depth number
       */
      getTablePrefix: function getTablePrefix(suffix) {
        if (typeof suffix !== 'undefined') suffix = '-' + suffix;
        return Plugin.getTableId() + '-' + Plugin.getDepth() + suffix;
      },

      /**
       * Get current table depth of sub table
       * @returns {number}
       */
      getDepth: function getDepth() {
        var depth = 0;
        var table = datatable.table;

        do {
          table = $(table).parents('.' + pfx + 'datatable-table');
          depth++;
        } while ($(table).length > 0);

        return depth;
      },

      /**
       * Keep state item
       * @param key
       * @param value
       */
      stateKeep: function stateKeep(key, value) {
        key = Plugin.getTablePrefix(key);
        if (Plugin.getOption('data.saveState') === false) return;

        if (localStorage) {
          localStorage.setItem(key, JSON.stringify(value));
        }
      },

      /**
       * Get state item
       * @param key
       * @param defValue
       */
      stateGet: function stateGet(key, defValue) {
        key = Plugin.getTablePrefix(key);
        if (Plugin.getOption('data.saveState') === false) return;
        var value = null;

        if (localStorage) {
          value = localStorage.getItem(key);
        }

        if (typeof value !== 'undefined' && value !== null) {
          return JSON.parse(value);
        }
      },

      /**
       * Update data in state without clear existing
       * @param key
       * @param value
       */
      stateUpdate: function stateUpdate(key, value) {
        var ori = Plugin.stateGet(key);
        if (typeof ori === 'undefined' || ori === null) ori = {};
        Plugin.stateKeep(key, $.extend({}, ori, value));
      },

      /**
       * Remove state item
       * @param key
       */
      stateRemove: function stateRemove(key) {
        key = Plugin.getTablePrefix(key);

        if (localStorage) {
          localStorage.removeItem(key);
        }
      },

      /**
       * Get total columns.
       */
      getTotalColumns: function getTotalColumns(tablePart) {
        if (typeof tablePart === 'undefined') tablePart = datatable.tableBody;
        return $(tablePart).find('.' + pfx + 'datatable-row').first().find('.' + pfx + 'datatable-cell').length;
      },

      /**
       * Get table row. Useful to get row when current table is in lock
       * mode. Can be used for both lock and normal table mode. By
       * default, returning result will be in a list of <td>.
       * @param tablePart
       * @param row 1-based index
       * @param tdOnly Optional. Default true
       * @returns {*}
       */
      getOneRow: function getOneRow(tablePart, row, tdOnly) {
        if (typeof tdOnly === 'undefined') tdOnly = true; // get list of <tr>

        var result = $(tablePart).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):nth-child(' + row + ')');

        if (tdOnly) {
          // get list of <td> or <th>
          result = result.find('.' + pfx + 'datatable-cell');
        }

        return result;
      },

      /**
       * Sort table row at HTML level by column index.
       * todo; Not in use.
       * @param header Header sort clicked
       * @param sort asc|desc. Optional. Default asc
       * @param int Boolean. Optional. Comparison value parse to integer.
       *     Default false
       */
      sortColumn: function sortColumn(header, sort, _int) {
        if (typeof sort === 'undefined') sort = 'asc'; // desc

        if (typeof _int === 'undefined') _int = false;
        var column = $(header).index();
        var rows = $(datatable.tableBody).find('.' + pfx + 'datatable-row');
        var hIndex = $(header).closest('.' + pfx + 'datatable-lock').index();

        if (hIndex !== -1) {
          rows = $(datatable.tableBody).find('.' + pfx + 'datatable-lock:nth-child(' + (hIndex + 1) + ')').find('.' + pfx + 'datatable-row');
        }

        var container = $(rows).parent();
        $(rows).sort(function (a, b) {
          var tda = $(a).find('td:nth-child(' + column + ')').text();
          var tdb = $(b).find('td:nth-child(' + column + ')').text();

          if (_int) {
            // useful for integer type sorting
            tda = parseInt(tda);
            tdb = parseInt(tdb);
          }

          if (sort === 'asc') {
            return tda > tdb ? 1 : tda < tdb ? -1 : 0;
          } else {
            return tda < tdb ? 1 : tda > tdb ? -1 : 0;
          }
        }).appendTo(container);
      },

      /**
       * Perform sort remote and local
       */
      sorting: function sorting() {
        var sortObj = {
          init: function init() {
            if (options.sortable) {
              $(datatable.tableHead).find('.' + pfx + 'datatable-cell:not(.' + pfx + 'datatable-cell-check)').addClass(pfx + 'datatable-cell-sort').off('click').on('click', sortObj.sortClick); // first init

              sortObj.setIcon();
            }
          },
          setIcon: function setIcon() {
            var meta = Plugin.getDataSourceParam('sort');
            if ($.isEmptyObject(meta)) return;
            var column = Plugin.getColumnByField(meta.field); // sort is disabled for this column

            if (typeof column === 'undefined') return;
            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;
            if (typeof column.selector !== 'undefined' && column.selector === true) return; // sort icon beside column header

            var td = $(datatable.tableHead).find('.' + pfx + 'datatable-cell[data-field="' + meta.field + '"]').attr('data-sort', meta.sort);
            var sorting = $(td).find('span');
            var icon = $(sorting).find('i');
            var icons = Plugin.getOption('layout.icons.sort'); // update sort icon; desc & asc

            if ($(icon).length > 0) {
              $(icon).removeAttr('class').addClass(icons[meta.sort]);
            } else {
              $(sorting).append($('<i/>').addClass(icons[meta.sort]));
            } // set sorted class to header on init


            $(td).addClass(pfx + 'datatable-cell-sorted');
          },
          sortClick: function sortClick(e) {
            var meta = Plugin.getDataSourceParam('sort');
            var field = $(this).data('field');
            var column = Plugin.getColumnByField(field); // sort is disabled for this column

            if (typeof column === 'undefined') return;
            if (typeof column.sortable !== 'undefined' && column.sortable === false) return;
            if (typeof column.selector !== 'undefined' && column.selector === true) return; // set sorted class to header

            $(datatable.tableHead).find('th').removeClass(pfx + 'datatable-cell-sorted');
            util.addClass(this, pfx + 'datatable-cell-sorted');
            $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();

            if (options.sortable) {
              Plugin.spinnerCallback(true);
              var sort = 'desc';

              if (Plugin.getObject('field', meta) === field) {
                sort = Plugin.getObject('sort', meta);
              } // toggle sort


              sort = typeof sort === 'undefined' || sort === 'desc' ? 'asc' : 'desc'; // update field and sort params

              meta = {
                field: field,
                sort: sort
              };
              Plugin.setDataSourceParam('sort', meta);
              sortObj.setIcon();
              setTimeout(function () {
                Plugin.dataRender('sort');
                $(datatable).trigger(pfx + 'datatable-on-sort', meta);
              }, 300);
            }
          }
        };
        sortObj.init();
      },

      /**
       * Update JSON data list linked with sort, filter and pagination.
       * Call this method, before using dataSet variable.
       * @returns {*|null}
       */
      localDataUpdate: function localDataUpdate() {
        var params = Plugin.getDataSourceParam();

        if (typeof datatable.originalDataSet === 'undefined') {
          datatable.originalDataSet = datatable.dataSet;
        }

        var field = Plugin.getObject('sort.field', params);
        var sort = Plugin.getObject('sort.sort', params);
        var column = Plugin.getColumnByField(field);

        if (typeof column !== 'undefined' && Plugin.getOption('data.serverSorting') !== true) {
          if (typeof column.sortCallback === 'function') {
            datatable.dataSet = column.sortCallback(datatable.originalDataSet, sort, column);
          } else {
            datatable.dataSet = Plugin.sortCallback(datatable.originalDataSet, sort, column);
          }
        } else {
          datatable.dataSet = datatable.originalDataSet;
        } // if server filter enable, don't pass local filter


        if (_typeof(params.query) === 'object' && !Plugin.getOption('data.serverFiltering')) {
          params.query = params.query || {};

          var nestedSearch = function nestedSearch(obj) {
            for (var field in obj) {
              if (!obj.hasOwnProperty(field)) continue;

              if (typeof obj[field] === 'string') {
                if (obj[field].toLowerCase() == search || obj[field].toLowerCase().indexOf(search) !== -1) {
                  return true;
                }
              } else if (typeof obj[field] === 'number') {
                if (obj[field] === search) {
                  return true;
                }
              } else if (_typeof(obj[field]) === 'object') {
                if (nestedSearch(obj[field])) {
                  return true;
                }
              }
            }

            return false;
          };

          var search = $(Plugin.getOption('search.input')).val();

          if (typeof search !== 'undefined' && search !== '') {
            search = search.toLowerCase();
            datatable.dataSet = $.grep(datatable.dataSet, nestedSearch); // remove generalSearch as we don't need this for next columns filter

            delete params.query[Plugin.getGeneralSearchKey()];
          } // remove empty element from array


          $.each(params.query, function (k, v) {
            if (v === '') {
              delete params.query[k];
            }
          }); // filter array by query

          datatable.dataSet = Plugin.filterArray(datatable.dataSet, params.query); // reset array index

          datatable.dataSet = datatable.dataSet.filter(function () {
            return true;
          });
        }

        return datatable.dataSet;
      },

      /**
       * Utility helper to filter array by object pair of {key:value}
       * @param list
       * @param args
       * @param operator
       * @returns {*}
       */
      filterArray: function filterArray(list, args, operator) {
        if (_typeof(list) !== 'object') {
          return [];
        }

        if (typeof operator === 'undefined') operator = 'AND';

        if (_typeof(args) !== 'object') {
          return list;
        }

        operator = operator.toUpperCase();

        if ($.inArray(operator, ['AND', 'OR', 'NOT']) === -1) {
          return [];
        }

        var count = Object.keys(args).length;
        var filtered = [];
        $.each(list, function (key, obj) {
          var to_match = obj;
          var matched = 0;
          $.each(args, function (m_key, m_value) {
            m_value = m_value instanceof Array ? m_value : [m_value];
            var match_property = Plugin.getObject(m_key, to_match);

            if (typeof match_property !== 'undefined' && match_property) {
              var lhs = match_property.toString().toLowerCase();
              m_value.forEach(function (item, index) {
                if (item.toString().toLowerCase() == lhs || lhs.indexOf(item.toString().toLowerCase()) !== -1) {
                  matched++;
                }
              });
            }
          });

          if ('AND' == operator && matched == count || 'OR' == operator && matched > 0 || 'NOT' == operator && 0 == matched) {
            filtered[key] = obj;
          }
        });
        list = filtered;
        return list;
      },

      /**
       * Reset lock column scroll to 0 when resize
       */
      resetScroll: function resetScroll() {
        if (typeof options.detail === 'undefined' && Plugin.getDepth() === 1) {
          $(datatable.table).find('.' + pfx + 'datatable-row').css('left', 0);
          $(datatable.table).find('.' + pfx + 'datatable-lock').css('top', 0);
          $(datatable.tableBody).scrollTop(0);
        }
      },

      /**
       * Get column options by field
       * @param field
       * @returns {boolean}
       */
      getColumnByField: function getColumnByField(field) {
        if (typeof field === 'undefined') return;
        var result;
        $.each(options.columns, function (i, column) {
          if (field === column.field) {
            result = column;
            return false;
          }
        });
        return result;
      },

      /**
       * Get default sort column
       */
      getDefaultSortColumn: function getDefaultSortColumn() {
        var result;
        $.each(options.columns, function (i, column) {
          if (typeof column.sortable !== 'undefined' && $.inArray(column.sortable, ['asc', 'desc']) !== -1) {
            result = {
              sort: column.sortable,
              field: column.field
            };
            return false;
          }
        });
        return result;
      },

      /**
       * Helper to get element dimensions, when the element is hidden
       * @param element
       * @param includeMargin
       * @returns {{width: number, height: number, innerWidth: number,
       *     innerHeight: number, outerWidth: number, outerHeight:
       *     number}}
       */
      getHiddenDimensions: function getHiddenDimensions(element, includeMargin) {
        var props = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        },
            dim = {
          width: 0,
          height: 0,
          innerWidth: 0,
          innerHeight: 0,
          outerWidth: 0,
          outerHeight: 0
        },
            hiddenParents = $(element).parents().addBack().not(':visible');
        includeMargin = typeof includeMargin === 'boolean' ? includeMargin : false;
        var oldProps = [];
        hiddenParents.each(function () {
          var old = {};

          for (var name in props) {
            old[name] = this.style[name];
            this.style[name] = props[name];
          }

          oldProps.push(old);
        });
        dim.width = $(element).width();
        dim.outerWidth = $(element).outerWidth(includeMargin);
        dim.innerWidth = $(element).innerWidth();
        dim.height = $(element).height();
        dim.innerHeight = $(element).innerHeight();
        dim.outerHeight = $(element).outerHeight(includeMargin);
        hiddenParents.each(function (i) {
          var old = oldProps[i];

          for (var name in props) {
            this.style[name] = old[name];
          }
        });
        return dim;
      },
      getGeneralSearchKey: function getGeneralSearchKey() {
        var searchInput = $(Plugin.getOption('search.input'));
        return Plugin.getOption('search.key') || $(searchInput).prop('name');
      },

      /**
       * Get value by dot notation path string and to prevent undefined
       * errors
       * @param path String Dot notation path in string
       * @param object Object to iterate
       * @returns {*}
       */
      getObject: function getObject(path, object) {
        return path.split('.').reduce(function (obj, i) {
          return obj !== null && typeof obj[i] !== 'undefined' ? obj[i] : null;
        }, object);
      },

      /**
       * Extend object
       * @param obj
       * @param path
       * @param value
       * @returns {*}
       */
      extendObj: function extendObj(obj, path, value) {
        var levels = path.split('.'),
            i = 0;

        function createLevel(child) {
          var name = levels[i++];

          if (typeof child[name] !== 'undefined' && child[name] !== null) {
            if (_typeof(child[name]) !== 'object' && typeof child[name] !== 'function') {
              child[name] = {};
            }
          } else {
            child[name] = {};
          }

          if (i === levels.length) {
            child[name] = value;
          } else {
            createLevel(child[name]);
          }
        }

        createLevel(obj);
        return obj;
      },
      rowEvenOdd: function rowEvenOdd() {
        // row even class
        $(datatable.tableBody).find('.' + pfx + 'datatable-row').removeClass(pfx + 'datatable-row-even');

        if ($(datatable.wrap).hasClass(pfx + 'datatable-subtable')) {
          $(datatable.tableBody).find('.' + pfx + 'datatable-row:not(.' + pfx + 'datatable-row-detail):even').addClass(pfx + 'datatable-row-even');
        } else {
          $(datatable.tableBody).find('.' + pfx + 'datatable-row:nth-child(even)').addClass(pfx + 'datatable-row-even');
        }
      },

      /********************
       ** PUBLIC API METHODS
       ********************/
      // delay timer
      timer: 0,

      /**
       * Redraw datatable by recalculating its DOM elements, etc.
       * @returns {jQuery}
       */
      redraw: function redraw() {
        Plugin.adjustCellsWidth.call();

        if (Plugin.isLocked()) {
          // fix hiding cell width issue
          Plugin.scrollbar();
          Plugin.resetScroll();
          Plugin.adjustCellsHeight.call();
        }

        Plugin.adjustLockContainer.call();
        Plugin.initHeight.call();
        return datatable;
      },

      /**
       * Shortcode to reload
       * @returns {jQuery}
       */
      load: function load() {
        Plugin.reload();
        return datatable;
      },

      /**
       * Datasource reload
       * @returns {jQuery}
       */
      reload: function reload() {
        var delay = function () {
          return function (callback, ms) {
            clearTimeout(Plugin.timer);
            Plugin.timer = setTimeout(callback, ms);
          };
        }();

        delay(function () {
          // local only. remote pagination will skip this block
          if (!options.data.serverFiltering) {
            Plugin.localDataUpdate();
          }

          Plugin.dataRender();
          $(datatable).trigger(pfx + 'datatable-on-reloaded');
        }, Plugin.getOption('search.delay'));
        return datatable;
      },

      /**
       * Get record by record ID
       * @param id
       * @returns {jQuery}
       */
      getRecord: function getRecord(id) {
        if (typeof datatable.tableBody === 'undefined') datatable.tableBody = $(datatable.table).children('tbody');
        $(datatable.tableBody).find('.' + pfx + 'datatable-cell:first-child').each(function (i, cell) {
          if (id == $(cell).text()) {
            var rowNumber = $(cell).closest('.' + pfx + 'datatable-row').index() + 1;
            datatable.API.record = datatable.API.value = Plugin.getOneRow(datatable.tableBody, rowNumber);
            return datatable;
          }
        });
        return datatable;
      },

      /**
       * @deprecated in v5.0.6
       * Get column of current record ID
       * @param columnName
       * @returns {jQuery}
       */
      getColumn: function getColumn(columnName) {
        Plugin.setSelectedRecords();
        datatable.API.value = $(datatable.API.record).find('[data-field="' + columnName + '"]');
        return datatable;
      },

      /**
       * Destroy datatable to original DOM state before datatable was
       * initialized
       * @returns {jQuery}
       */
      destroy: function destroy() {
        $(datatable).parent().find('.' + pfx + 'datatable-pager').remove();
        var initialDatatable = $(datatable.initialDatatable).addClass(pfx + 'datatable-destroyed').show();
        $(datatable).replaceWith(initialDatatable);
        datatable = initialDatatable;
        $(datatable).trigger(pfx + 'datatable-on-destroy');
        Plugin.isInit = false; // clean up variables

        initialDatatable = null;
        datatable.dataSet = null;
        datatable.originalDataSet = null;
        datatable.tableHead = null;
        datatable.tableBody = null;
        datatable.table = null;
        datatable.wrap = null;
        datatable.API = {
          record: null,
          value: null,
          params: null
        };
        Plugin.ajaxParams = {};
        Plugin.pagingObject = {};
        Plugin.nodeTr = [];
        Plugin.nodeTd = [];
        Plugin.nodeCols = [];
        Plugin.recentNode = [];
        return initialDatatable;
      },

      /**
       * Sort by column field
       * @param field
       * @param sort
       */
      sort: function sort(field, _sort) {
        // toggle sort
        _sort = typeof _sort === 'undefined' ? 'asc' : _sort;
        Plugin.spinnerCallback(true); // update field and sort params

        var meta = {
          field: field,
          sort: _sort
        };
        Plugin.setDataSourceParam('sort', meta);
        setTimeout(function () {
          Plugin.dataRender('sort');
          $(datatable).trigger(pfx + 'datatable-on-sort', meta);
          $(datatable.tableHead).find('.' + pfx + 'datatable-cell > span > i').remove();
        }, 300);
        return datatable;
      },

      /**
       * @deprecated in v5.0.6
       * Get current selected column value
       * @returns {jQuery}
       */
      getValue: function getValue() {
        return $(datatable.API.value).text();
      },

      /**
       * Set checkbox active
       * @param cell JQuery selector or checkbox ID
       */
      setActive: function setActive(cell) {
        if (typeof cell === 'string') {
          // set by checkbox id
          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type="checkbox"][value="' + cell + '"]');
        }

        $(cell).prop('checked', true);
        var ids = [];
        $(cell).each(function (i, td) {
          // normal table
          var row = $(td).closest('tr').addClass(pfx + 'datatable-row-active');
          var id = $(td).attr('value');

          if (typeof id !== 'undefined') {
            ids.push(id);
          }
        });
        $(datatable).trigger(pfx + 'datatable-on-check', [ids]);
      },

      /**
       * Set checkbox inactive
       * @param cell JQuery selector or checkbox ID
       */
      setInactive: function setInactive(cell) {
        if (typeof cell === 'string') {
          // set by checkbox id
          cell = $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type="checkbox"][value="' + cell + '"]');
        }

        $(cell).prop('checked', false);
        var ids = [];
        $(cell).each(function (i, td) {
          // normal table
          var row = $(td).closest('tr').removeClass(pfx + 'datatable-row-active');
          var id = $(td).attr('value');

          if (typeof id !== 'undefined') {
            ids.push(id);
          }
        });
        $(datatable).trigger(pfx + 'datatable-on-uncheck', [ids]);
      },

      /**
       * Set all checkboxes active or inactive
       * @param active
       */
      setActiveAll: function setActiveAll(active) {
        var checkboxes = $(datatable.table).find('> tbody, > thead').find('tr').not('.' + pfx + 'datatable-row-subtable').find('.' + pfx + 'datatable-cell-check [type="checkbox"]');

        if (active) {
          Plugin.setActive(checkboxes);
        } else {
          Plugin.setInactive(checkboxes);
        }
      },

      /**
       * @deprecated in v5.0.6
       * Get selected rows which are active
       * @returns {jQuery}
       */
      setSelectedRecords: function setSelectedRecords() {
        datatable.API.record = $(datatable.tableBody).find('.' + pfx + 'datatable-row-active');
        return datatable;
      },

      /**
       * Get selected records
       * @returns {null}
       */
      getSelectedRecords: function getSelectedRecords() {
        // support old method
        Plugin.setSelectedRecords();
        datatable.API.record = datatable.rows('.' + pfx + 'datatable-row-active').nodes();
        return datatable.API.record;
      },

      /**
       * Get options by dots notation path
       * @param path String Dot notation path in string
       * @returns {*}
       */
      getOption: function getOption(path) {
        return Plugin.getObject(path, options);
      },

      /**
       * Set global options nodes by dots notation path
       * @param path
       * @param object
       */
      setOption: function setOption(path, object) {
        options = Plugin.extendObj(options, path, object);
      },

      /**
       * Search filter for local & remote
       * @param value
       * @param columns. Optional list of columns to be filtered.
       */
      search: function search(value, columns) {
        if (typeof columns !== 'undefined') columns = $.makeArray(columns);

        var delay = function () {
          return function (callback, ms) {
            clearTimeout(Plugin.timer);
            Plugin.timer = setTimeout(callback, ms);
          };
        }();

        delay(function () {
          // get query parameters
          var query = Plugin.getDataSourceQuery(); // search not by columns

          if (typeof columns === 'undefined' && typeof value !== 'undefined') {
            var key = Plugin.getGeneralSearchKey();
            query[key] = value;
          } // search by columns, support multiple columns


          if (_typeof(columns) === 'object') {
            $.each(columns, function (k, column) {
              query[column] = value;
            }); // remove empty element from arrays

            $.each(query, function (k, v) {
              if (v === '' || $.isEmptyObject(v)) {
                delete query[k];
              }
            });
          }

          Plugin.setDataSourceQuery(query); // reset pagination to 1 when doing seearching

          datatable.setDataSourceParam('pagination', Object.assign({}, datatable.getDataSourceParam('pagination'), {
            page: 1
          })); // local filter only. remote pagination will skip this block

          if (!options.data.serverFiltering) {
            Plugin.localDataUpdate();
          }

          Plugin.dataRender('search');
        }, Plugin.getOption('search.delay'));
      },

      /**
       * Set datasource params extract
       * @param param
       * @param value
       */
      setDataSourceParam: function setDataSourceParam(param, value) {
        datatable.API.params = $.extend({}, {
          pagination: {
            page: 1,
            perpage: Plugin.getOption('data.pageSize')
          },
          sort: Plugin.getDefaultSortColumn(),
          query: {}
        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));
        datatable.API.params = Plugin.extendObj(datatable.API.params, param, value);
        Plugin.stateKeep(Plugin.stateId, datatable.API.params);
      },

      /**
       * Get datasource params
       * @param param
       */
      getDataSourceParam: function getDataSourceParam(param) {
        datatable.API.params = $.extend({}, {
          pagination: {
            page: 1,
            perpage: Plugin.getOption('data.pageSize')
          },
          sort: Plugin.getDefaultSortColumn(),
          query: {}
        }, datatable.API.params, Plugin.stateGet(Plugin.stateId));

        if (typeof param === 'string') {
          return Plugin.getObject(param, datatable.API.params);
        }

        return datatable.API.params;
      },

      /**
       * Shortcode to datatable.getDataSourceParam('query');
       * @returns {*}
       */
      getDataSourceQuery: function getDataSourceQuery() {
        return Plugin.getDataSourceParam('query') || {};
      },

      /**
       * Shortcode to datatable.setDataSourceParam('query', query);
       * @param query
       */
      setDataSourceQuery: function setDataSourceQuery(query) {
        Plugin.setDataSourceParam('query', query);
      },

      /**
       * Get current page number
       * @returns {number}
       */
      getCurrentPage: function getCurrentPage() {
        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('.' + pfx + 'datatable-pager-nav').find('.' + pfx + 'datatable-pager-link.' + pfx + 'datatable-pager-link-active').data('page') || 1;
      },

      /**
       * Get selected dropdown page size
       * @returns {*|number}
       */
      getPageSize: function getPageSize() {
        return $(datatable.table).siblings('.' + pfx + 'datatable-pager').last().find('select.' + pfx + 'datatable-pager-size').val() || 10;
      },

      /**
       * Get total rows
       */
      getTotalRows: function getTotalRows() {
        return datatable.API.params.pagination.total;
      },

      /**
       * Get full dataset in grid
       * @returns {*|null|Array}
       */
      getDataSet: function getDataSet() {
        return datatable.originalDataSet;
      },
      nodeTr: [],
      nodeTd: [],
      nodeCols: [],
      recentNode: [],
      table: function table() {
        if (typeof datatable.table !== 'undefined') {
          return datatable.table;
        }
      },

      /**
       * Select a single row from the table
       * @param selector
       * @returns {jQuery}
       */
      row: function row(selector) {
        Plugin.rows(selector);
        Plugin.nodeTr = Plugin.recentNode = $(Plugin.nodeTr).first();
        return datatable;
      },

      /**
       * Select multiple rows from the table
       * @param selector
       * @returns {jQuery}
       */
      rows: function rows(selector) {
        if (Plugin.isLocked()) {
          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-lock-scroll > .' + pfx + 'datatable-row');
        } else {
          Plugin.nodeTr = Plugin.recentNode = $(datatable.tableBody).find(selector).filter('.' + pfx + 'datatable-row');
        }

        return datatable;
      },

      /**
       * Select a single column from the table
       * @param index zero-based index
       * @returns {jQuery}
       */
      column: function column(index) {
        Plugin.nodeCols = Plugin.recentNode = $(datatable.tableBody).find('.' + pfx + 'datatable-cell:nth-child(' + (index + 1) + ')');
        return datatable;
      },

      /**
       * Select multiple columns from the table
       * @param selector
       * @returns {jQuery}
       */
      columns: function columns(selector) {
        var context = datatable.table;

        if (Plugin.nodeTr === Plugin.recentNode) {
          context = Plugin.nodeTr;
        }

        var columns = $(context).find('.' + pfx + 'datatable-cell[data-field="' + selector + '"]');

        if (columns.length > 0) {
          Plugin.nodeCols = Plugin.recentNode = columns;
        } else {
          Plugin.nodeCols = Plugin.recentNode = $(context).find(selector).filter('.' + pfx + 'datatable-cell');
        }

        return datatable;
      },
      cell: function cell(selector) {
        Plugin.cells(selector);
        Plugin.nodeTd = Plugin.recentNode = $(Plugin.nodeTd).first();
        return datatable;
      },
      cells: function cells(selector) {
        var cells = $(datatable.tableBody).find('.' + pfx + 'datatable-cell');

        if (typeof selector !== 'undefined') {
          cells = $(cells).filter(selector);
        }

        Plugin.nodeTd = Plugin.recentNode = cells;
        return datatable;
      },

      /**
       * Delete the selected row from the table
       * @returns {jQuery}
       */
      remove: function remove() {
        if ($(Plugin.nodeTr.length) && Plugin.nodeTr === Plugin.recentNode) {
          $(Plugin.nodeTr).remove();
        }

        Plugin.layoutUpdate();
        return datatable;
      },

      /**
       * Show or hide the columns or rows
       */
      visible: function visible(bool) {
        if ($(Plugin.recentNode.length)) {
          var locked = Plugin.lockEnabledColumns();

          if (Plugin.recentNode === Plugin.nodeCols) {
            var index = Plugin.recentNode.index();

            if (Plugin.isLocked()) {
              var scrollColumns = $(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-scroll').length;

              if (scrollColumns) {
                // is at center of scrollable area
                index += locked.left.length + 1;
              } else if ($(Plugin.recentNode).closest('.' + pfx + 'datatable-lock-right').length) {
                // is at the right locked table
                index += locked.left.length + scrollColumns + 1;
              }
            }
          }

          if (bool) {
            if (Plugin.recentNode === Plugin.nodeCols) {
              delete options.columns[index].visible;
            }

            $(Plugin.recentNode).show();
          } else {
            if (Plugin.recentNode === Plugin.nodeCols) {
              Plugin.setOption('columns.' + index + '.visible', false);
            }

            $(Plugin.recentNode).hide();
          }

          Plugin.columnHide();
          Plugin.redraw();
        }
      },

      /**
       * Get the the DOM element for the selected rows or columns
       * @returns {Array}
       */
      nodes: function nodes() {
        return Plugin.recentNode;
      },

      /**
       * will be implemented soon
       * @returns {jQuery}
       */
      dataset: function dataset() {
        return datatable;
      },

      /**
       * Open page by number
       * @param page number
       */
      gotoPage: function gotoPage(page) {
        if (typeof Plugin.pagingObject !== 'undefined') {
          Plugin.isInit = true;
          Plugin.pagingObject.openPage(page);
        }
      }
    };
    /**
     * Public API methods can be used directly by datatable
     */

    $.each(Plugin, function (funcName, func) {
      datatable[funcName] = func;
    }); // initialize main datatable plugin

    if (typeof options !== 'undefined') {
      if (typeof options === 'string') {
        var method = options;
        datatable = $(this).data(pluginName);

        if (typeof datatable !== 'undefined') {
          options = datatable.options;
          Plugin[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }
      } else {
        if (!datatable.data(pluginName) && !$(this).hasClass(pfx + 'datatable-loaded')) {
          datatable.dataSet = null;
          datatable.textAlign = {
            left: pfx + 'datatable-cell-left',
            center: pfx + 'datatable-cell-center',
            right: pfx + 'datatable-cell-right'
          }; // merge default and user defined options

          options = $.extend(true, {}, $.fn[pluginName].defaults, options);
          datatable.options = options; // init plugin process

          Plugin.init.apply(this, [options]);
          $(datatable.wrap).data(pluginName, datatable);
        }
      }
    } else {
      // get existing instance datatable
      datatable = $(this).data(pluginName);

      if (typeof datatable === 'undefined') {
        $.error(pluginName + ' not initialized');
      }

      options = datatable.options;
    }

    return datatable;
  }; // default options


  $.fn[pluginName].defaults = {
    // datasource definition
    data: {
      type: 'local',
      source: null,
      pageSize: 10,
      // display records per page
      saveState: true,
      serverPaging: false,
      serverFiltering: false,
      serverSorting: false,
      autoColumns: false,
      attr: {
        rowProps: []
      }
    },
    // layout definition
    layout: {
      theme: 'default',
      // datatable will support multiple themes and designs
      "class": pfx + 'datatable-primary',
      // custom wrapper class
      scroll: false,
      // enable/disable datatable scroll both horizontal and vertical when needed.
      height: null,
      // datatable's body's fixed height
      minHeight: null,
      footer: false,
      // display/hide footer
      header: true,
      // display/hide header
      customScrollbar: true,
      // set false to disable custom scrollbar
      // datatable spinner
      spinner: {
        overlayColor: '#000000',
        opacity: 0,
        type: 'loader',
        state: 'primary',
        message: true
      },
      // datatable UI icons
      icons: {
        sort: {
          asc: 'flaticon2-arrow-up',
          desc: 'flaticon2-arrow-down'
        },
        pagination: {
          next: 'flaticon2-next',
          prev: 'flaticon2-back',
          first: 'flaticon2-fast-back',
          last: 'flaticon2-fast-next',
          more: 'flaticon-more-1'
        },
        rowDetail: {
          expand: 'fa fa-caret-down',
          collapse: 'fa fa-caret-right'
        }
      }
    },
    // column sorting
    sortable: true,
    // resize column size with mouse drag coming soon)
    resizable: false,
    // column based filtering (coming soon)
    filterable: false,
    pagination: true,
    // inline and bactch editing (cooming soon)
    editable: false,
    // columns definition
    columns: [],
    search: {
      // enable trigger search by keyup enter
      onEnter: false,
      // input text for search
      input: null,
      // search delay in milliseconds
      delay: 400,
      //	remote server search key value
      key: null
    },
    rows: {
      // deprecated
      callback: function callback() {},
      // call before row template
      beforeTemplate: function beforeTemplate() {},
      // call after row template
      afterTemplate: function afterTemplate() {},
      autoHide: true
    },
    // toolbar
    toolbar: {
      // place pagination and displayInfo blocks according to the array order
      layout: ['pagination', 'info'],
      // toolbar placement can be at top or bottom or both top and bottom repeated
      placement: ['bottom'],
      //'top', 'bottom'
      // toolbar items
      items: {
        // pagination
        pagination: {
          // pagination type(default or scroll)
          type: 'default',
          // number of pages to display by breakpoints
          pages: {
            desktop: {
              layout: 'default',
              pagesNumber: 5
            },
            tablet: {
              layout: 'default',
              pagesNumber: 3
            },
            mobile: {
              layout: 'compact'
            }
          },
          // navigation buttons
          navigation: {
            prev: true,
            // display prev button
            next: true,
            // display next button
            first: true,
            // display first button
            last: true,
            // display last button
            more: false // display more button

          },
          // page size select
          pageSizeSelect: [] // display dropdown to select pagination size. -1 is used for "ALl" option

        },
        // records info
        info: true
      }
    },
    // here we will keep all strings and message used by datatable UI so developer can easiliy translate to any language.
    // By default the stirngs will be in the plugin source and here can override it
    translate: {
      records: {
        processing: 'Please wait...',
        noRecords: 'No records found'
      },
      toolbar: {
        pagination: {
          items: {
            "default": {
              first: 'First',
              prev: 'Previous',
              next: 'Next',
              last: 'Last',
              more: 'More pages',
              input: 'Page number',
              select: 'Select page size',
              all: 'all'
            },
            info: 'Showing {{start}} - {{end}} of {{total}}'
          }
        }
      }
    },
    extensions: {}
  };
})(jQuery);

/***/ }),

/***/ "./resources/metronic/js/components/datatable/datatable.checkbox.js":
/*!**************************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/datatable.checkbox.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function ($) {
  var pluginName = 'KTDatatable';
  var pfx = '';
  $.fn[pluginName] = $.fn[pluginName] || {};
  /**
   * @param datatable Main datatable plugin instance
   * @param options Extension options
   * @returns {*}
   */

  $.fn[pluginName].checkbox = function (datatable, options) {
    var Extension = {
      selectedAllRows: false,
      selectedRows: [],
      unselectedRows: [],
      init: function init() {
        if (Extension.selectorEnabled()) {
          // reset
          datatable.setDataSourceParam(options.vars.selectedAllRows, false);
          datatable.stateRemove('checkbox'); // requestIds is not null

          if (options.vars.requestIds) {
            // request ids in response
            datatable.setDataSourceParam(options.vars.requestIds, true);
          } // remove selected checkbox on datatable reload


          $(datatable).on(pfx + 'datatable-on-reloaded', function () {
            datatable.stateRemove('checkbox');
            datatable.setDataSourceParam(options.vars.selectedAllRows, false);
            Extension.selectedAllRows = false;
            Extension.selectedRows = [];
            Extension.unselectedRows = [];
          }); // select all on extension init

          Extension.selectedAllRows = datatable.getDataSourceParam(options.vars.selectedAllRows);
          $(datatable).on(pfx + 'datatable-on-layout-updated', function (e, args) {
            if (args.table != $(datatable.wrap).attr('id')) {
              return;
            }

            datatable.ready(function () {
              Extension.initVars();
              Extension.initEvent();
              Extension.initSelect();
            });
          });
          $(datatable).on(pfx + 'datatable-on-check', function (e, ids) {
            ids.forEach(function (id) {
              Extension.selectedRows.push(id); // // remove from unselected rows

              Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);
            });
            var storage = {};
            storage['selectedRows'] = $.unique(Extension.selectedRows);
            storage['unselectedRows'] = $.unique(Extension.unselectedRows);
            datatable.stateKeep('checkbox', storage);
          });
          $(datatable).on(pfx + 'datatable-on-uncheck', function (e, ids) {
            ids.forEach(function (id) {
              Extension.unselectedRows.push(id); // // remove from selected rows

              Extension.selectedRows = Extension.remove(Extension.selectedRows, id);
            });
            var storage = {};
            storage['selectedRows'] = $.unique(Extension.selectedRows);
            storage['unselectedRows'] = $.unique(Extension.unselectedRows);
            datatable.stateKeep('checkbox', storage);
          });
        }
      },

      /**
       * Init checkbox clicks event
       */
      initEvent: function initEvent() {
        // select all checkbox click
        $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type="checkbox"]').click(function (e) {
          // clear selected and unselected rows
          Extension.selectedRows = Extension.unselectedRows = [];
          datatable.stateRemove('checkbox'); // select all rows

          Extension.selectedAllRows = !!$(this).is(':checked'); // local select all current page rows

          if (!options.vars.requestIds) {
            if ($(this).is(':checked')) {
              Extension.selectedRows = $.makeArray($(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type="checkbox"]').map(function (i, chk) {
                return $(chk).val();
              }));
            }

            var storage = {};
            storage['selectedRows'] = $.unique(Extension.selectedRows);
            datatable.stateKeep('checkbox', storage);
          } // keep selectedAllRows in datasource params


          datatable.setDataSourceParam(options.vars.selectedAllRows, Extension.selectedAllRows);
          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);
        }); // single row checkbox click

        $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type="checkbox"]').click(function (e) {
          var id = $(this).val();

          if ($(this).is(':checked')) {
            Extension.selectedRows.push(id); // remove from unselected rows

            Extension.unselectedRows = Extension.remove(Extension.unselectedRows, id);
          } else {
            Extension.unselectedRows.push(id); // remove from selected rows

            Extension.selectedRows = Extension.remove(Extension.selectedRows, id);
          } // local checkbox header check


          if (!options.vars.requestIds && Extension.selectedRows.length < 1) {
            // remove select all checkbox, if there is no checked checkbox left
            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type="checkbox"]').prop('checked', false);
          }

          var storage = {};
          storage['selectedRows'] = Extension.selectedRows.filter(Extension.unique);
          storage['unselectedRows'] = Extension.unselectedRows.filter(Extension.unique);
          datatable.stateKeep('checkbox', storage);
          $(datatable).trigger(pfx + 'datatable-on-click-checkbox', [$(this)]);
        });
      },
      unique: function unique(value, index, self) {
        return self.indexOf(value) === index;
      },
      initSelect: function initSelect() {
        // selected all rows from server
        if (Extension.selectedAllRows && options.vars.requestIds) {
          if (!datatable.hasClass(pfx + 'datatable-error')) {
            // set header select all checkbox checked
            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type="checkbox"]').prop('checked', true);
          } // set all checkbox in table body


          datatable.setActiveAll(true); // remove unselected rows

          Extension.unselectedRows.forEach(function (id) {
            datatable.setInactive(id);
          });
        } else {
          // single check for server and local
          Extension.selectedRows.forEach(function (id) {
            datatable.setActive(id);
          }); // local checkbox; check if all checkboxes of currect page are checked

          if (!datatable.hasClass(pfx + 'datatable-error') && $(datatable.tableBody).find('.' + pfx + 'checkbox-single > [type="checkbox"]').not(':checked').length < 1) {
            // set header select all checkbox checked
            $(datatable.tableHead).find('.' + pfx + 'checkbox-all > [type="checkbox"]').prop('checked', true);
          }
        }
      },

      /**
       * Check if selector is enabled from options
       */
      selectorEnabled: function selectorEnabled() {
        return $.grep(datatable.options.columns, function (n, i) {
          return n.selector || false;
        })[0];
      },
      initVars: function initVars() {
        // get single select/unselect from localstorage
        var storage = datatable.stateGet('checkbox');

        if (typeof storage !== 'undefined') {
          Extension.selectedRows = storage['selectedRows'] || [];
          Extension.unselectedRows = storage['unselectedRows'] || [];
        }
      },
      getSelectedId: function getSelectedId(path) {
        Extension.initVars(); // server selected all rows

        if (Extension.selectedAllRows && options.vars.requestIds) {
          if (typeof path === 'undefined') {
            path = options.vars.rowIds;
          } // if selected all rows, return id from response meta


          var selectedAllRows = datatable.getObject(path, datatable.lastResponse) || [];

          if (selectedAllRows.length > 0) {
            // remove single unselected rows from selectedAllRows ids from server response emta
            Extension.unselectedRows.forEach(function (id) {
              selectedAllRows = Extension.remove(selectedAllRows, parseInt(id));
            });
          }

          return $.unique(selectedAllRows);
        } // else return single checked selected rows


        return Extension.selectedRows;
      },
      remove: function remove(array, element) {
        return array.filter(function (e) {
          return e !== element;
        });
      }
    }; // make the extension accessible from datatable init

    datatable.checkbox = function () {
      return Extension;
    };

    if (_typeof(options) === 'object') {
      options = $.extend(true, {}, $.fn[pluginName].checkbox["default"], options);
      Extension.init.apply(this, [options]);
    }

    return datatable;
  };

  $.fn[pluginName].checkbox["default"] = {
    vars: {
      // select all rows flag to be sent to the server
      selectedAllRows: 'selectedAllRows',
      // request id parameter's name
      requestIds: 'requestIds',
      // response path to all rows id
      rowIds: 'meta.rowIds'
    }
  };
})(jQuery);

/***/ }),

/***/ "./resources/metronic/js/components/datatable/datatable.rtl.js":
/*!*********************************************************************!*\
  !*** ./resources/metronic/js/components/datatable/datatable.rtl.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var defaults = {
  layout: {
    icons: {
      pagination: {
        next: 'flaticon2-next',
        prev: 'flaticon2-back',
        first: 'flaticon2-fast-back',
        last: 'flaticon2-fast-next',
        more: 'flaticon-more-1'
      },
      rowDetail: {
        expand: 'fa fa-caret-down',
        collapse: 'fa fa-caret-right'
      }
    }
  }
};

if (KTUtil.isRTL()) {
  defaults = {
    layout: {
      icons: {
        pagination: {
          next: 'flaticon2-back',
          prev: 'flaticon2-next',
          first: 'flaticon2-fast-next',
          last: 'flaticon2-fast-back'
        },
        rowDetail: {
          collapse: 'fa fa-caret-down',
          expand: 'fa fa-caret-right'
        }
      }
    }
  };
}

$.extend(true, $.fn.KTDatatable.defaults, defaults);

/***/ }),

/***/ "./resources/metronic/js/components/dialog.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/dialog.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition 

var KTDialog = function KTDialog(options) {
  // Main object
  var the = this; // Get element object

  var element;
  var body = KTUtil.getBody(); // Default options

  var defaultOptions = {
    'placement': 'top center',
    'type': 'loader',
    'width': 100,
    'state': 'default',
    'message': 'Loading...'
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      Plugin.init(options);
      return the;
    },

    /**
     * Handles subtoggle click toggle
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.state = false;
    },

    /**
     * Show dialog
     */
    show: function show() {
      Plugin.eventTrigger('show');
      element = document.createElement("DIV");
      KTUtil.setHTML(element, the.options.message);
      KTUtil.addClass(element, 'dialog dialog-shown');
      KTUtil.addClass(element, 'dialog-' + the.options.state);
      KTUtil.addClass(element, 'dialog-' + the.options.type);

      if (the.options.placement == 'top center') {
        KTUtil.addClass(element, 'dialog-top-center');
      }

      body.appendChild(element);
      the.state = 'shown';
      Plugin.eventTrigger('shown');
      return the;
    },

    /**
     * Hide dialog
     */
    hide: function hide() {
      if (element) {
        Plugin.eventTrigger('hide');
        element.remove();
        the.state = 'hidden';
        Plugin.eventTrigger('hidden');
      }

      return the;
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Check shown state
   */


  the.shown = function () {
    return the.state == 'shown';
  };
  /**
   * Check hidden state
   */


  the.hidden = function () {
    return the.state == 'hidden';
  };
  /**
   * Show dialog
   */


  the.show = function () {
    return Plugin.show();
  };
  /**
   * Hide dialog
   */


  the.hide = function () {
    return Plugin.hide();
  };
  /**
   * Attach event
   * @returns {KTToggle}
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   * @returns {KTToggle}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTDialog;
}

/***/ }),

/***/ "./resources/metronic/js/components/header.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/header.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition

var KTHeader = function KTHeader(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.getById(elementId);
  var body = KTUtil.getBody();

  if (element === undefined) {
    return;
  } // Default options


  var defaultOptions = {
    offset: {
      desktop: true,
      tabletAndMobile: true
    },
    releseOnReverse: {
      desktop: false,
      tabletAndMobile: false
    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {KTHeader}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('header')) {
        the = KTUtil.data(element).get('header');
      } else {
        // reset header
        Plugin.init(options); // build header

        Plugin.build();
        KTUtil.data(element).set('header', the);
      }

      return the;
    },

    /**
     * Handles subheader click toggle
     * @returns {KTHeader}
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },

    /**
     * Reset header
     * @returns {KTHeader}
     */
    build: function build() {
      var eventTriggerState = true;
      var lastScrollTop = 0;
      window.addEventListener('scroll', function () {
        var offset = 0,
            st,
            attrName;

        if (KTUtil.isBreakpointDown('lg') && the.options.offset.tabletAndMobile === false) {
          return;
        }

        if (KTUtil.isBreakpointUp('lg') && the.options.offset.desktop === false) {
          return;
        }

        if (KTUtil.isBreakpointUp('lg')) {
          offset = the.options.offset.desktop;
        } else if (KTUtil.isBreakpointDown('lg')) {
          offset = the.options.offset.tabletAndMobile;
        }

        st = KTUtil.getScrollTop();

        if (KTUtil.isBreakpointDown('lg') && the.options.releseOnReverse.tabletAndMobile || KTUtil.isBreakpointUp('lg') && the.options.releseOnReverse.desktop) {
          if (st > offset && lastScrollTop < st) {
            // down scroll mode
            if (body.hasAttribute('data-header-scroll') === false) {
              body.setAttribute('data-header-scroll', 'on');
            }

            if (eventTriggerState) {
              Plugin.eventTrigger('scrollOn', the);
              eventTriggerState = false;
            }
          } else {
            // back scroll mode
            if (body.hasAttribute('data-header-scroll') === true) {
              body.removeAttribute('data-header-scroll');
            }

            if (eventTriggerState == false) {
              Plugin.eventTrigger('scrollOff', the);
              eventTriggerState = true;
            }
          }

          lastScrollTop = st;
        } else {
          if (st > offset) {
            // down scroll mode
            if (body.hasAttribute('data-header-scroll') === false) {
              body.setAttribute('data-header-scroll', 'on');
            }

            if (eventTriggerState) {
              Plugin.eventTrigger('scrollOn', the);
              eventTriggerState = false;
            }
          } else {
            // back scroll mode
            if (body.hasAttribute('data-header-scroll') === true) {
              body.removeAttribute('data-header-scroll');
            }

            if (eventTriggerState == false) {
              Plugin.eventTrigger('scrollOff', the);
              eventTriggerState = true;
            }
          }
        }
      });
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Register event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTHeader;
}

/***/ }),

/***/ "./resources/metronic/js/components/image-input.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/components/image-input.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition 

var KTImageInput = function KTImageInput(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.getById(elementId);
  var body = KTUtil.getBody();

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    editMode: false
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('imageinput')) {
        the = KTUtil.data(element).get('imageinput');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('imageinput', the);
      }

      return the;
    },

    /**
     * Init avatar
     */
    init: function init(options) {
      the.element = element;
      the.events = [];
      the.input = KTUtil.find(element, 'input[type="file"]');
      the.wrapper = KTUtil.find(element, '.image-input-wrapper');
      the.cancel = KTUtil.find(element, '[data-action="cancel"]');
      the.remove = KTUtil.find(element, '[data-action="remove"]');
      the.src = KTUtil.css(the.wrapper, 'backgroundImage');
      the.hidden = KTUtil.find(element, 'input[type="hidden"]'); // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },

    /**
     * Build
     */
    build: function build() {
      // Handle change
      KTUtil.addEvent(the.input, 'change', function (e) {
        e.preventDefault();

        if (the.input && the.input.files && the.input.files[0]) {
          var reader = new FileReader();

          reader.onload = function (e) {
            KTUtil.css(the.wrapper, 'background-image', 'url(' + e.target.result + ')');
          };

          reader.readAsDataURL(the.input.files[0]);
          KTUtil.addClass(the.element, 'image-input-changed');
          KTUtil.removeClass(the.element, 'image-input-empty'); // Fire change event

          Plugin.eventTrigger('change');
        }
      }); // Handle cancel

      KTUtil.addEvent(the.cancel, 'click', function (e) {
        e.preventDefault(); // Fire cancel event

        Plugin.eventTrigger('cancel');
        KTUtil.removeClass(the.element, 'image-input-changed');
        KTUtil.removeClass(the.element, 'image-input-empty');
        KTUtil.css(the.wrapper, 'background-image', the.src);
        the.input.value = "";

        if (the.hidden) {
          the.hidden.value = "0";
        }
      }); // Handle remove

      KTUtil.addEvent(the.remove, 'click', function (e) {
        e.preventDefault(); // Fire cancel event

        Plugin.eventTrigger('remove');
        KTUtil.removeClass(the.element, 'image-input-changed');
        KTUtil.addClass(the.element, 'image-input-empty');
        KTUtil.css(the.wrapper, 'background-image', "none");
        the.input.value = "";

        if (the.hidden) {
          the.hidden.value = "1";
        }
      });
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      //KTUtil.triggerCustomEvent(name);
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Attach event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTImageInput;
}

/***/ }),

/***/ "./resources/metronic/js/components/menu.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/menu.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition

var KTMenu = function KTMenu(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.getById(elementId);
  var body = KTUtil.getBody();

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    // scrollable area with Perfect Scroll
    scroll: {
      rememberPosition: false
    },
    // accordion submenu mode
    accordion: {
      slideSpeed: 200,
      // accordion toggle slide speed in milliseconds
      autoScroll: false,
      // enable auto scrolling(focus) to the clicked menu item
      autoScrollSpeed: 1200,
      expandAll: true // allow having multiple expanded accordions in the menu

    },
    // dropdown submenu mode
    dropdown: {
      timeout: 500 // timeout in milliseconds to show and hide the hoverable submenu dropdown

    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {KTMenu}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('menu')) {
        the = KTUtil.data(element).get('menu');
      } else {
        // reset menu
        Plugin.init(options); // reset menu

        Plugin.reset(); // build menu

        Plugin.build();
        KTUtil.data(element).set('menu', the);
      }

      return the;
    },

    /**
     * Handles submenu click toggle
     * @returns {KTMenu}
     */
    init: function init(options) {
      the.events = [];
      the.eventHandlers = {}; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu

      the.pauseDropdownHoverTime = 0;
      the.uid = KTUtil.getUniqueID();
    },
    update: function update(options) {
      // merge default and user defined options
      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu

      the.pauseDropdownHoverTime = 0; // reset menu

      Plugin.reset();
      the.eventHandlers = {}; // build menu

      Plugin.build();
      KTUtil.data(element).set('menu', the);
    },
    reload: function reload() {
      // reset menu
      Plugin.reset(); // build menu

      Plugin.build(); // reset submenu props

      Plugin.resetSubmenuProps();
    },

    /**
     * Reset menu
     * @returns {KTMenu}
     */
    build: function build() {
      // General accordion submenu toggle
      the.eventHandlers['event_1'] = KTUtil.on(element, '.menu-toggle', 'click', Plugin.handleSubmenuAccordion); // Dropdown mode(hoverable)

      if (Plugin.getSubmenuMode() === 'dropdown' || Plugin.isConditionalSubmenuDropdown()) {
        // dropdown submenu - hover toggle
        the.eventHandlers['event_2'] = KTUtil.on(element, '[data-menu-toggle="hover"]', 'mouseover', Plugin.handleSubmenuDrodownHoverEnter);
        the.eventHandlers['event_3'] = KTUtil.on(element, '[data-menu-toggle="hover"]', 'mouseout', Plugin.handleSubmenuDrodownHoverExit); // dropdown submenu - click toggle

        the.eventHandlers['event_4'] = KTUtil.on(element, '[data-menu-toggle="click"] > .menu-toggle, [data-menu-toggle="click"] > .menu-link .menu-toggle', 'click', Plugin.handleSubmenuDropdownClick);
        the.eventHandlers['event_5'] = KTUtil.on(element, '[data-menu-toggle="tab"] > .menu-toggle, [data-menu-toggle="tab"] > .menu-link .menu-toggle', 'click', Plugin.handleSubmenuDropdownTabClick);
      } // Handle general link click


      the.eventHandlers['event_6'] = KTUtil.on(element, '.menu-item > .menu-link:not(.menu-toggle):not(.menu-link-toggle-skip)', 'click', Plugin.handleLinkClick); // Init scrollable menu

      if (the.options.scroll && the.options.scroll.height) {
        Plugin.scrollInit();
      }
    },

    /**
     * Reset menu
     * @returns {KTMenu}
     */
    reset: function reset() {
      KTUtil.off(element, 'click', the.eventHandlers['event_1']); // dropdown submenu - hover toggle

      KTUtil.off(element, 'mouseover', the.eventHandlers['event_2']);
      KTUtil.off(element, 'mouseout', the.eventHandlers['event_3']); // dropdown submenu - click toggle

      KTUtil.off(element, 'click', the.eventHandlers['event_4']);
      KTUtil.off(element, 'click', the.eventHandlers['event_5']); // handle link click

      KTUtil.off(element, 'click', the.eventHandlers['event_6']);
    },

    /**
     * Init scroll menu
     *
    */
    scrollInit: function scrollInit() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollDestroy(element, true);
        KTUtil.scrollInit(element, {
          mobileNativeScroll: true,
          windowScroll: false,
          resetHeightOnDestroy: true,
          handleWindowResize: true,
          height: the.options.scroll.height,
          rememberPosition: the.options.scroll.rememberPosition
        });
      } else {
        KTUtil.scrollDestroy(element, true);
      }
    },

    /**
     * Update scroll menu
    */
    scrollUpdate: function scrollUpdate() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollUpdate(element);
      }
    },

    /**
     * Scroll top
    */
    scrollTop: function scrollTop() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollTop(element);
      }
    },

    /**
     * Get submenu mode for current breakpoint and menu state
     * @returns {KTMenu}
     */
    getSubmenuMode: function getSubmenuMode(el) {
      if (KTUtil.isBreakpointUp('lg')) {
        if (el && KTUtil.hasAttr(el, 'data-menu-toggle') && KTUtil.attr(el, 'data-menu-toggle') == 'hover') {
          return 'dropdown';
        }

        if (KTUtil.isset(the.options.submenu, 'desktop.state.body')) {
          if (KTUtil.hasClasses(body, the.options.submenu.desktop.state.body)) {
            return the.options.submenu.desktop.state.mode;
          } else {
            return the.options.submenu.desktop["default"];
          }
        } else if (KTUtil.isset(the.options.submenu, 'desktop')) {
          return the.options.submenu.desktop;
        }
      } else if (KTUtil.isBreakpointUp('md') && KTUtil.isBreakpointDown('lg') && KTUtil.isset(the.options.submenu, 'tablet')) {
        return the.options.submenu.tablet;
      } else if (KTUtil.isBreakpointDown('md') && KTUtil.isset(the.options.submenu, 'mobile')) {
        return the.options.submenu.mobile;
      } else {
        return false;
      }
    },

    /**
     * Get submenu mode for current breakpoint and menu state
     * @returns {KTMenu}
     */
    isConditionalSubmenuDropdown: function isConditionalSubmenuDropdown() {
      if (KTUtil.isBreakpointUp('lg') && KTUtil.isset(the.options.submenu, 'desktop.state.body')) {
        return true;
      } else {
        return false;
      }
    },

    /**
     * Reset submenu attributes
     * @returns {KTMenu}
     */
    resetSubmenuProps: function resetSubmenuProps(e) {
      var submenus = KTUtil.findAll(element, '.menu-submenu');

      if (submenus) {
        for (var i = 0, len = submenus.length; i < len; i++) {
          var submenu = submenus[0];
          KTUtil.css(submenu, 'display', '');
          KTUtil.css(submenu, 'overflow', '');

          if (submenu.hasAttribute('data-hor-direction')) {
            KTUtil.removeClass(submenu, 'menu-submenu-left');
            KTUtil.removeClass(submenu, 'menu-submenu-right');
            KTUtil.addClass(submenu, submenu.getAttribute('data-hor-direction'));
          }
        }
      }
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    handleSubmenuDrodownHoverEnter: function handleSubmenuDrodownHoverEnter(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      if (the.resumeDropdownHover() === false) {
        return;
      }

      var item = this;

      if (item.getAttribute('data-hover') == '1') {
        item.removeAttribute('data-hover');
        clearTimeout(item.getAttribute('data-timeout'));
        item.removeAttribute('data-timeout');
      }

      Plugin.showSubmenuDropdown(item);
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    handleSubmenuDrodownHoverExit: function handleSubmenuDrodownHoverExit(e) {
      if (the.resumeDropdownHover() === false) {
        return;
      }

      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this;
      var time = the.options.dropdown.timeout;
      var timeout = setTimeout(function () {
        if (item.getAttribute('data-hover') == '1') {
          Plugin.hideSubmenuDropdown(item, true);
        }
      }, time);
      item.setAttribute('data-hover', '1');
      item.setAttribute('data-timeout', timeout);
    },

    /**
     * Handles submenu click toggle
     * @returns {KTMenu}
     */
    handleSubmenuDropdownClick: function handleSubmenuDropdownClick(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this.closest('.menu-item'); // Trigger click event handlers

      var result = Plugin.eventTrigger('submenuToggle', this, e);

      if (result === false) {
        return;
      }

      if (item.getAttribute('data-menu-submenu-mode') == 'accordion') {
        return;
      }

      if (KTUtil.hasClass(item, 'menu-item-hover') === false) {
        KTUtil.addClass(item, 'menu-item-open-dropdown');
        Plugin.showSubmenuDropdown(item);
      } else {
        KTUtil.removeClass(item, 'menu-item-open-dropdown');
        Plugin.hideSubmenuDropdown(item, true);
      }

      e.preventDefault();
    },

    /**
     * Handles tab click toggle
     * @returns {KTMenu}
     */
    handleSubmenuDropdownTabClick: function handleSubmenuDropdownTabClick(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this.closest('.menu-item'); // Trigger click event handlers

      var result = Plugin.eventTrigger('submenuToggle', this, e);

      if (result === false) {
        return;
      }

      if (item.getAttribute('data-menu-submenu-mode') == 'accordion') {
        return;
      }

      if (KTUtil.hasClass(item, 'menu-item-hover') == false) {
        KTUtil.addClass(item, 'menu-item-open-dropdown');
        Plugin.showSubmenuDropdown(item);
      }

      e.preventDefault();
    },

    /**
     * Handles link click
     * @returns {KTMenu}
     */
    handleLinkClick: function handleLinkClick(e) {
      var submenu = this.closest('.menu-item.menu-item-submenu'); // Trigger click event handlers

      var result = Plugin.eventTrigger('linkClick', this, e);

      if (result === false) {
        return;
      }

      if (submenu && Plugin.getSubmenuMode(submenu) === 'dropdown') {
        Plugin.hideSubmenuDropdowns();
      }
    },

    /**
     * Handles submenu dropdown close on link click
     * @returns {KTMenu}
     */
    handleSubmenuDropdownClose: function handleSubmenuDropdownClose(e, el) {
      // exit if its not submenu dropdown mode
      if (Plugin.getSubmenuMode(el) === 'accordion') {
        return;
      }

      var shown = element.querySelectorAll('.menu-item.menu-item-submenu.menu-item-hover:not(.menu-item-tabs)'); // check if currently clicked link's parent item ha

      if (shown.length > 0 && KTUtil.hasClass(el, 'menu-toggle') === false && el.querySelectorAll('.menu-toggle').length === 0) {
        // close opened dropdown menus
        for (var i = 0, len = shown.length; i < len; i++) {
          Plugin.hideSubmenuDropdown(shown[0], true);
        }
      }
    },

    /**
     * helper functions
     * @returns {KTMenu}
     */
    handleSubmenuAccordion: function handleSubmenuAccordion(e, el) {
      var query;
      var item = el ? el : this; // Trigger click event handlers

      var result = Plugin.eventTrigger('submenuToggle', this, e);

      if (result === false) {
        return;
      }

      if (Plugin.getSubmenuMode(el) === 'dropdown' && (query = item.closest('.menu-item'))) {
        if (query.getAttribute('data-menu-submenu-mode') != 'accordion') {
          e.preventDefault();
          return;
        }
      }

      var li = item.closest('.menu-item');
      var submenu = KTUtil.child(li, '.menu-submenu, .menu-inner');

      if (KTUtil.hasClass(item.closest('.menu-item'), 'menu-item-open-always')) {
        return;
      }

      if (li && submenu) {
        e.preventDefault();
        var speed = the.options.accordion.slideSpeed;
        var hasClosables = false;

        if (KTUtil.hasClass(li, 'menu-item-open') === false) {
          // hide other accordions
          if (the.options.accordion.expandAll === false) {
            var subnav = item.closest('.menu-nav, .menu-subnav');
            var closables = KTUtil.children(subnav, '.menu-item.menu-item-open.menu-item-submenu:not(.menu-item-here):not(.menu-item-open-always)');

            if (subnav && closables) {
              for (var i = 0, len = closables.length; i < len; i++) {
                var el_ = closables[0];
                var submenu_ = KTUtil.child(el_, '.menu-submenu');

                if (submenu_) {
                  KTUtil.slideUp(submenu_, speed, function () {
                    Plugin.scrollUpdate();
                    KTUtil.removeClass(el_, 'menu-item-open');
                  });
                }
              }
            }
          }

          KTUtil.slideDown(submenu, speed, function () {
            Plugin.scrollToItem(item);
            Plugin.scrollUpdate();
            Plugin.eventTrigger('submenuToggle', submenu, e);
          });
          KTUtil.addClass(li, 'menu-item-open');
        } else {
          KTUtil.slideUp(submenu, speed, function () {
            Plugin.scrollToItem(item);
            Plugin.eventTrigger('submenuToggle', submenu, e);
          });
          KTUtil.removeClass(li, 'menu-item-open');
        }
      }
    },

    /**
     * scroll to item function
     * @returns {KTMenu}
     */
    scrollToItem: function scrollToItem(item) {
      // handle auto scroll for accordion submenus
      if (KTUtil.isBreakpointUp('lg') && the.options.accordion.autoScroll && element.getAttribute('data-menu-scroll') !== '1') {
        KTUtil.scrollTo(item, the.options.accordion.autoScrollSpeed);
      }
    },

    /**
     * Hide submenu dropdown
     * @returns {KTMenu}
     */
    hideSubmenuDropdown: function hideSubmenuDropdown(item, classAlso) {
      // remove submenu activation class
      if (classAlso) {
        KTUtil.removeClass(item, 'menu-item-hover');
        KTUtil.removeClass(item, 'menu-item-active-tab');
      } // clear timeout


      item.removeAttribute('data-hover');

      if (item.getAttribute('data-menu-toggle-class')) {
        KTUtil.removeClass(body, item.getAttribute('data-menu-toggle-class'));
      }

      var timeout = item.getAttribute('data-timeout');
      item.removeAttribute('data-timeout');
      clearTimeout(timeout);
    },

    /**
     * Hide submenu dropdowns
     * @returns {KTMenu}
     */
    hideSubmenuDropdowns: function hideSubmenuDropdowns() {
      var items;

      if (items = element.querySelectorAll('.menu-item-submenu.menu-item-hover:not(.menu-item-tabs):not([data-menu-toggle="tab"])')) {
        for (var j = 0, cnt = items.length; j < cnt; j++) {
          Plugin.hideSubmenuDropdown(items[j], true);
        }
      }
    },

    /**
     * helper functions
     * @returns {KTMenu}
     */
    showSubmenuDropdown: function showSubmenuDropdown(item) {
      // close active submenus
      var list = element.querySelectorAll('.menu-item-submenu.menu-item-hover, .menu-item-submenu.menu-item-active-tab');

      if (list) {
        for (var i = 0, len = list.length; i < len; i++) {
          var el = list[i];

          if (item !== el && el.contains(item) === false && item.contains(el) === false) {
            Plugin.hideSubmenuDropdown(el, true);
          }
        }
      } // add submenu activation class


      KTUtil.addClass(item, 'menu-item-hover'); // Change the alignment of submenu is offscreen.

      var submenu = KTUtil.find(item, '.menu-submenu');

      if (submenu && submenu.hasAttribute('data-hor-direction') === false) {
        if (KTUtil.hasClass(submenu, 'menu-submenu-left')) {
          submenu.setAttribute('data-hor-direction', 'menu-submenu-left');
        } else if (KTUtil.hasClass(submenu, 'menu-submenu-right')) {
          submenu.setAttribute('data-hor-direction', 'menu-submenu-right');
        }
      }

      if (submenu && KTUtil.isOffscreen(submenu, 'left', 15) === true) {
        KTUtil.removeClass(submenu, 'menu-submenu-left');
        KTUtil.addClass(submenu, 'menu-submenu-right');
      } else if (submenu && KTUtil.isOffscreen(submenu, 'right', 15) === true) {
        KTUtil.removeClass(submenu, 'menu-submenu-right');
        KTUtil.addClass(submenu, 'menu-submenu-left');
      }

      if (item.getAttribute('data-menu-toggle-class')) {
        KTUtil.addClass(body, item.getAttribute('data-menu-toggle-class'));
      }
    },

    /**
     * Handles submenu slide toggle
     * @returns {KTMenu}
     */
    createSubmenuDropdownClickDropoff: function createSubmenuDropdownClickDropoff(el) {
      var query;
      var zIndex = (query = KTUtil.child(el, '.menu-submenu') ? KTUtil.css(query, 'z-index') : 0) - 1;
      var dropoff = document.createElement('<div class="menu-dropoff" style="background: transparent; position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: ' + zIndex + '"></div>');
      body.appendChild(dropoff);
      KTUtil.addEvent(dropoff, 'click', function (e) {
        e.stopPropagation();
        e.preventDefault();
        KTUtil.remove(this);
        Plugin.hideSubmenuDropdown(el, true);
      });
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    pauseDropdownHover: function pauseDropdownHover(time) {
      var date = new Date();
      the.pauseDropdownHoverTime = date.getTime() + time;
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    resumeDropdownHover: function resumeDropdownHover() {
      var date = new Date();
      return date.getTime() > the.pauseDropdownHoverTime ? true : false;
    },

    /**
     * Reset menu's current active item
     * @returns {KTMenu}
     */
    resetActiveItem: function resetActiveItem(item) {
      var list;
      var parents;
      list = element.querySelectorAll('.menu-item-active');

      for (var i = 0, len = list.length; i < len; i++) {
        var el = list[0];
        KTUtil.removeClass(el, 'menu-item-active');
        KTUtil.hide(KTUtil.child(el, '.menu-submenu'));
        parents = KTUtil.parents(el, '.menu-item-submenu') || [];

        for (var i_ = 0, len_ = parents.length; i_ < len_; i_++) {
          var el_ = parents[i];
          KTUtil.removeClass(el_, 'menu-item-open');
          KTUtil.hide(KTUtil.child(el_, '.menu-submenu'));
        }
      } // close open submenus


      if (the.options.accordion.expandAll === false) {
        if (list = element.querySelectorAll('.menu-item-open')) {
          for (var i = 0, len = list.length; i < len; i++) {
            KTUtil.removeClass(parents[0], 'menu-item-open');
          }
        }
      }
    },

    /**
     * Sets menu's active item
     * @returns {KTMenu}
     */
    setActiveItem: function setActiveItem(item) {
      // reset current active item
      Plugin.resetActiveItem();
      var parents = KTUtil.parents(item, '.menu-item-submenu') || [];

      for (var i = 0, len = parents.length; i < len; i++) {
        KTUtil.addClass(parents[i], 'menu-item-open');
      }

      KTUtil.addClass(item, 'menu-item-active');
    },

    /**
     * Returns page breadcrumbs for the menu's active item
     * @returns {KTMenu}
     */
    getBreadcrumbs: function getBreadcrumbs(item) {
      var query;
      var breadcrumbs = [];
      var link = KTUtil.child(item, '.menu-link');
      breadcrumbs.push({
        text: query = KTUtil.child(link, '.menu-text') ? query.innerHTML : '',
        title: link.getAttribute('title'),
        href: link.getAttribute('href')
      });
      var parents = KTUtil.parents(item, '.menu-item-submenu');

      for (var i = 0, len = parents.length; i < len; i++) {
        var submenuLink = KTUtil.child(parents[i], '.menu-link');
        breadcrumbs.push({
          text: query = KTUtil.child(submenuLink, '.menu-text') ? query.innerHTML : '',
          title: submenuLink.getAttribute('title'),
          href: submenuLink.getAttribute('href')
        });
      }

      return breadcrumbs.reverse();
    },

    /**
     * Returns page title for the menu's active item
     * @returns {KTMenu}
     */
    getPageTitle: function getPageTitle(item) {
      var query;
      return query = KTUtil.child(item, '.menu-text') ? query.innerHTML : '';
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, target, e) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, target, e);
            }
          } else {
            return event.handler.call(this, target, e);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    },
    removeEvent: function removeEvent(name) {
      if (the.events[name]) {
        delete the.events[name];
      }
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Update scroll
   */


  the.scrollUpdate = function () {
    return Plugin.scrollUpdate();
  };
  /**
   * Re-init scroll
   */


  the.scrollReInit = function () {
    return Plugin.scrollInit();
  };
  /**
   * Scroll top
   */


  the.scrollTop = function () {
    return Plugin.scrollTop();
  };
  /**
   * Set active menu item
   */


  the.setActiveItem = function (item) {
    return Plugin.setActiveItem(item);
  };

  the.reload = function () {
    return Plugin.reload();
  };

  the.update = function (options) {
    return Plugin.update(options);
  };
  /**
   * Set breadcrumb for menu item
   */


  the.getBreadcrumbs = function (item) {
    return Plugin.getBreadcrumbs(item);
  };
  /**
   * Set page title for menu item
   */


  the.getPageTitle = function (item) {
    return Plugin.getPageTitle(item);
  };
  /**
   * Get submenu mode
   */


  the.getSubmenuMode = function (el) {
    return Plugin.getSubmenuMode(el);
  };
  /**
   * Hide dropdown
   * @returns {Object}
   */


  the.hideDropdown = function (item) {
    Plugin.hideSubmenuDropdown(item, true);
  };
  /**
   * Hide dropdowns
   * @returns {Object}
   */


  the.hideDropdowns = function () {
    Plugin.hideSubmenuDropdowns();
  };
  /**
   * Disable menu for given time
   * @returns {Object}
   */


  the.pauseDropdownHover = function (time) {
    Plugin.pauseDropdownHover(time);
  };
  /**
   * Disable menu for given time
   * @returns {Object}
   */


  the.resumeDropdownHover = function () {
    return Plugin.resumeDropdownHover();
  };
  /**
   * Register event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };

  the.off = function (name) {
    return Plugin.removeEvent(name);
  };

  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Handle plugin on window resize

  KTUtil.addResizeHandler(function () {
    if (init) {
      the.reload();
    }
  }); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTMenu;
} // Plugin global lazy initialization


document.addEventListener("click", function (e) {
  var body = KTUtil.getByTagName('body')[0];
  var query;

  if (query = body.querySelectorAll('.menu-nav .menu-item.menu-item-submenu.menu-item-hover:not(.menu-item-tabs)[data-menu-toggle="click"]')) {
    for (var i = 0, len = query.length; i < len; i++) {
      var element = query[i].closest('.menu-nav').parentNode;

      if (element) {
        var the = KTUtil.data(element).get('menu');

        if (!the) {
          break;
        }

        if (!the || the.getSubmenuMode() !== 'dropdown') {
          break;
        }

        if (e.target !== element && element.contains(e.target) === false) {
          the.hideDropdowns();
        }
      }
    }
  }
});

/***/ }),

/***/ "./resources/metronic/js/components/offcanvas.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/components/offcanvas.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition

var KTOffcanvas = function KTOffcanvas(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.getById(elementId);
  var body = KTUtil.getBody();

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    attrCustom: ''
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    construct: function construct(options) {
      if (KTUtil.data(element).has('offcanvas')) {
        the = KTUtil.data(element).get('offcanvas');
      } else {
        // Reset offcanvas
        Plugin.init(options); // Build offcanvas

        Plugin.build();
        KTUtil.data(element).set('offcanvas', the);
      }

      return the;
    },
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.classBase = the.options.baseClass;
      the.attrCustom = the.options.attrCustom;
      the.classShown = the.classBase + '-on';
      the.classOverlay = the.classBase + '-overlay';
      the.target;
      the.state = KTUtil.hasClass(element, the.classShown) ? 'shown' : 'hidden';
    },
    build: function build() {
      // offcanvas toggle
      if (the.options.toggleBy) {
        if (typeof the.options.toggleBy === 'string') {
          KTUtil.addEvent(KTUtil.getById(the.options.toggleBy), 'click', function (e) {
            e.preventDefault();
            the.target = this;
            Plugin.toggle();
          });
        } else if (the.options.toggleBy && the.options.toggleBy[0]) {
          if (the.options.toggleBy[0].target) {
            for (var i in the.options.toggleBy) {
              KTUtil.addEvent(KTUtil.getById(the.options.toggleBy[i].target), 'click', function (e) {
                e.preventDefault();
                the.target = this;
                Plugin.toggle();
              });
            }
          } else {
            for (var i in the.options.toggleBy) {
              KTUtil.addEvent(KTUtil.getById(the.options.toggleBy[i]), 'click', function (e) {
                e.preventDefault();
                the.target = this;
                Plugin.toggle();
              });
            }
          }
        } else if (the.options.toggleBy && the.options.toggleBy.target) {
          KTUtil.addEvent(KTUtil.getById(the.options.toggleBy.target), 'click', function (e) {
            e.preventDefault();
            the.target = this;
            Plugin.toggle();
          });
        }
      } // offcanvas close


      var closeBy = KTUtil.getById(the.options.closeBy);

      if (closeBy) {
        KTUtil.addEvent(closeBy, 'click', function (e) {
          e.preventDefault();
          the.target = this;
          Plugin.hide();
        });
      }
    },
    isShown: function isShown() {
      return the.state == 'shown' ? true : false;
    },
    toggle: function toggle() {
      ;
      Plugin.eventTrigger('toggle');

      if (the.state == 'shown') {
        Plugin.hide();
      } else {
        Plugin.show();
      }
    },
    show: function show() {
      if (the.state == 'shown') {
        return;
      }

      Plugin.eventTrigger('beforeShow');
      Plugin.toggleClass('show'); // Offcanvas panel

      KTUtil.attr(body, 'data-offcanvas-' + the.classBase, 'on');
      KTUtil.addClass(element, the.classShown);

      if (the.attrCustom.length > 0) {
        KTUtil.attr(body, 'data-offcanvas-' + the.classCustom, 'on'); //KTUtil.addClass(body, the.classCustom);
      }

      the.state = 'shown';

      if (the.options.overlay) {
        the.overlay = KTUtil.insertAfter(document.createElement('DIV'), element);
        KTUtil.addClass(the.overlay, the.classOverlay);
        KTUtil.addEvent(the.overlay, 'click', function (e) {
          //e.stopPropagation();
          e.preventDefault();
          Plugin.hide(the.target);
        });
      }

      Plugin.eventTrigger('afterShow');
    },
    hide: function hide() {
      if (the.state == 'hidden') {
        return;
      }

      Plugin.eventTrigger('beforeHide');
      Plugin.toggleClass('hide');
      KTUtil.removeAttr(body, 'data-offcanvas-' + the.classBase);
      KTUtil.removeClass(element, the.classShown);

      if (the.attrCustom.length > 0) {
        KTUtil.removeAttr(body, 'data-offcanvas-' + the.attrCustom);
      }

      the.state = 'hidden';

      if (the.options.overlay && the.overlay) {
        KTUtil.remove(the.overlay);
      }

      Plugin.eventTrigger('afterHide');
    },
    toggleClass: function toggleClass(mode) {
      var id = KTUtil.attr(the.target, 'id');
      var toggleBy;

      if (the.options.toggleBy && the.options.toggleBy[0] && the.options.toggleBy[0].target) {
        for (var i in the.options.toggleBy) {
          if (the.options.toggleBy[i].target === id) {
            toggleBy = the.options.toggleBy[i];
          }
        }
      } else if (the.options.toggleBy && the.options.toggleBy.target) {
        toggleBy = the.options.toggleBy;
      }

      if (toggleBy) {
        var el = KTUtil.getById(toggleBy.target);

        if (mode === 'show') {
          KTUtil.addClass(el, toggleBy.state);
        }

        if (mode === 'hide') {
          KTUtil.removeClass(el, toggleBy.state);
        }
      }
    },
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   * @param options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Check if canvas is shown
   * @returns {boolean}
   */


  the.isShown = function () {
    return Plugin.isShown();
  };
  /**
   * Set to hide the canvas
   */


  the.hide = function () {
    return Plugin.hide();
  };
  /**
   * Set to show the canvas
   */


  the.show = function () {
    return Plugin.show();
  };
  /**
   * Attach event
   * @param name
   * @param handler
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   * @param name
   * @param handler
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTOffcanvas;
}

/***/ }),

/***/ "./resources/metronic/js/components/scrolltop.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/components/scrolltop.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition

var KTScrolltop = function KTScrolltop(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.getById(elementId);
  var body = KTUtil.getBody();

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    offset: 300,
    speed: 6000
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {mscrolltop}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('scrolltop')) {
        the = KTUtil.data(element).get('scrolltop');
      } else {
        // reset scrolltop
        Plugin.init(options); // build scrolltop

        Plugin.build();
        KTUtil.data(element).set('scrolltop', the);
      }

      return the;
    },

    /**
     * Handles subscrolltop click toggle
     * @returns {mscrolltop}
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },
    build: function build() {
      var timer;
      window.addEventListener('scroll', function () {
        KTUtil.throttle(timer, function () {
          Plugin.handle();
        }, 200);
      }); // handle button click

      KTUtil.addEvent(element, 'click', Plugin.scroll);
    },

    /**
     * Handles scrolltop click scrollTop
     */
    handle: function handle() {
      var pos = KTUtil.getScrollTop(); // current vertical position

      if (pos > the.options.offset) {
        if (body.hasAttribute('data-scrolltop') === false) {
          body.setAttribute('data-scrolltop', 'on');
        }
      } else {
        if (body.hasAttribute('data-scrolltop') === true) {
          body.removeAttribute('data-scrolltop');
        }
      }
    },

    /**
     * Handles scrolltop click scrollTop
     */
    scroll: function scroll(e) {
      e.preventDefault();
      KTUtil.scrollTop(0, the.options.speed);
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Get subscrolltop mode
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Set scrolltop content
   * @returns {mscrolltop}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTScrolltop;
}

/***/ }),

/***/ "./resources/metronic/js/components/toggle.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/toggle.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition

var KTToggle = function KTToggle(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.getById(elementId);

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    targetToggleMode: 'class' // class|attribute

  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('toggle')) {
        the = KTUtil.data(element).get('toggle');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('toggle', the);
      }

      return the;
    },

    /**
     * Handles subtoggle click toggle
     */
    init: function init(options) {
      the.element = element;
      the.events = []; // Merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options); //alert(the.options.target.tagName);

      the.target = KTUtil.getById(options.target);
      the.targetState = the.options.targetState;
      the.toggleState = the.options.toggleState;

      if (the.options.targetToggleMode == 'class') {
        the.state = KTUtil.hasClasses(the.target, the.targetState) ? 'on' : 'off';
      } else {
        the.state = KTUtil.hasAttr(the.target, 'data-' + the.targetState) ? KTUtil.attr(the.target, 'data-' + the.targetState) : 'off';
      }
    },

    /**
     * Setup toggle
     */
    build: function build() {
      KTUtil.addEvent(element, 'mouseup', Plugin.toggle);
    },

    /**
     * Handles offcanvas click toggle
     */
    toggle: function toggle(e) {
      Plugin.eventTrigger('beforeToggle');

      if (the.state == 'off') {
        Plugin.toggleOn();
      } else {
        Plugin.toggleOff();
      }

      Plugin.eventTrigger('afterToggle');
      e.preventDefault();
      return the;
    },

    /**
     * Handles toggle click toggle
     */
    toggleOn: function toggleOn() {
      Plugin.eventTrigger('beforeOn');

      if (the.options.targetToggleMode == 'class') {
        KTUtil.addClass(the.target, the.targetState);
      } else {
        KTUtil.attr(the.target, 'data-' + the.targetState, 'on');
      }

      if (the.toggleState) {
        KTUtil.addClass(element, the.toggleState);
      }

      the.state = 'on';
      Plugin.eventTrigger('afterOn');
      Plugin.eventTrigger('toggle');
      return the;
    },

    /**
     * Handles toggle click toggle
     */
    toggleOff: function toggleOff() {
      Plugin.eventTrigger('beforeOff');

      if (the.options.targetToggleMode == 'class') {
        KTUtil.removeClass(the.target, the.targetState);
      } else {
        KTUtil.removeAttr(the.target, 'data-' + the.targetState);
      }

      if (the.toggleState) {
        KTUtil.removeClass(element, the.toggleState);
      }

      the.state = 'off';
      Plugin.eventTrigger('afterOff');
      Plugin.eventTrigger('toggle');
      return the;
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Get toggle state
   */


  the.getState = function () {
    return the.state;
  };
  /**
   * Toggle
   */


  the.toggle = function () {
    return Plugin.toggle();
  };
  /**
   * Toggle on
   */


  the.toggleOn = function () {
    return Plugin.toggleOn();
  };
  /**
   * Toggle off
   */


  the.toggleOff = function () {
    return Plugin.toggleOff();
  };
  /**
   * Attach event
   * @returns {KTToggle}
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   * @returns {KTToggle}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTToggle;
}

/***/ }),

/***/ "./resources/metronic/js/components/util.js":
/*!**************************************************!*\
  !*** ./resources/metronic/js/components/util.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @class KTUtil  base utilize class that privides helper functions
 */
// Polyfills

/**
 * Element.matches() polyfill (simple version)
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
 */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}
/**
 * Element.closest() polyfill
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
 */


if (!Element.prototype.closest) {
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  }

  Element.prototype.closest = function (s) {
    var el = this;
    var ancestor = this;
    if (!document.documentElement.contains(el)) return null;

    do {
      if (ancestor.matches(s)) return ancestor;
      ancestor = ancestor.parentElement;
    } while (ancestor !== null);

    return null;
  };
}
/**
 * ChildNode.remove() polyfill
 * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/
 * @author Chris Ferdinandi
 * @license MIT
 */


(function (elem) {
  for (var i = 0; i < elem.length; i++) {
    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;

    window[elem[i]].prototype.remove = function () {
      this.parentNode.removeChild(this);
    };
  }
})(['Element', 'CharacterData', 'DocumentType']); //
// requestAnimationFrame polyfill by Erik Möller.
//  With fixes from Paul Irish and Tino Zijdel
//
//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/
//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
//
//  MIT license
//


(function () {
  var lastTime = 0;
  var vendors = ['webkit', 'moz'];

  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
  }

  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id = window.setTimeout(function () {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
    clearTimeout(id);
  };
})(); // Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md


(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('prepend')) {
      return;
    }

    Object.defineProperty(item, 'prepend', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function prepend() {
        var argArr = Array.prototype.slice.call(arguments),
            docFrag = document.createDocumentFragment();
        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.insertBefore(docFrag, this.firstChild);
      }
    });
  });
})([Element.prototype, Document.prototype, DocumentFragment.prototype]); // getAttributeNames


if (Element.prototype.getAttributeNames == undefined) {
  Element.prototype.getAttributeNames = function () {
    var attributes = this.attributes;
    var length = attributes.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++) {
      result[i] = attributes[i].name;
    }

    return result;
  };
} // Global variables


window.KTUtilElementDataStore = {};
window.KTUtilElementDataStoreID = 0;
window.KTUtilDelegatedEventHandlers = {};

var KTUtil = function () {
  var resizeHandlers = [];
  /** @type {object} breakpoints The device width breakpoints **/

  var breakpoints = {
    sm: 544,
    // Small screen / phone
    md: 768,
    // Medium screen / tablet
    lg: 992,
    // Large screen / desktop
    xl: 1200 // Extra large screen / wide desktop

  };
  /**
   * Handle window resize event with some
   * delay to attach event handlers upon resize complete
   */

  var _windowResizeHandler = function _windowResizeHandler() {
    var _runResizeHandlers = function _runResizeHandlers() {
      // reinitialize other subscribed elements
      for (var i = 0; i < resizeHandlers.length; i++) {
        var each = resizeHandlers[i];
        each.call();
      }
    };

    var timer;
    window.addEventListener('resize', function () {
      KTUtil.throttle(timer, function () {
        _runResizeHandlers();
      }, 200);
    });
  };

  return {
    /**
     * Class main initializer.
     * @param {object} settings.
     * @returns null
     */
    //main function to initiate the theme
    init: function init(settings) {
      if (settings && settings.breakpoints) {
        breakpoints = settings.breakpoints;
      }

      _windowResizeHandler();
    },

    /**
     * Adds window resize event handler.
     * @param {function} callback function.
     */
    addResizeHandler: function addResizeHandler(callback) {
      resizeHandlers.push(callback);
    },

    /**
     * Removes window resize event handler.
     * @param {function} callback function.
     */
    removeResizeHandler: function removeResizeHandler(callback) {
      for (var i = 0; i < resizeHandlers.length; i++) {
        if (callback === resizeHandlers[i]) {
          delete resizeHandlers[i];
        }
      }
    },

    /**
     * Trigger window resize handlers.
     */
    runResizeHandlers: function runResizeHandlers() {
      _runResizeHandlers();
    },
    resize: function resize() {
      if (typeof Event === 'function') {
        // modern browsers
        window.dispatchEvent(new Event('resize'));
      } else {
        // for IE and other old browsers
        // causes deprecation warning on modern browsers
        var evt = window.document.createEvent('UIEvents');
        evt.initUIEvent('resize', true, false, window, 0);
        window.dispatchEvent(evt);
      }
    },

    /**
     * Get GET parameter value from URL.
     * @param {string} paramName Parameter name.
     * @returns {string}
     */
    getURLParam: function getURLParam(paramName) {
      var searchString = window.location.search.substring(1),
          i,
          val,
          params = searchString.split("&");

      for (i = 0; i < params.length; i++) {
        val = params[i].split("=");

        if (val[0] == paramName) {
          return unescape(val[1]);
        }
      }

      return null;
    },

    /**
     * Checks whether current device is mobile touch.
     * @returns {boolean}
     */
    isMobileDevice: function isMobileDevice() {
      var test = this.getViewPort().width < this.getBreakpoint('lg') ? true : false;

      if (test === false) {
        // For use within normal web clients
        test = navigator.userAgent.match(/iPad/i) != null;
      }

      return test;
    },

    /**
     * Checks whether current device is desktop.
     * @returns {boolean}
     */
    isDesktopDevice: function isDesktopDevice() {
      return KTUtil.isMobileDevice() ? false : true;
    },

    /**
     * Gets browser window viewport size. Ref:
     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/
     * @returns {object}
     */
    getViewPort: function getViewPort() {
      var e = window,
          a = 'inner';

      if (!('innerWidth' in window)) {
        a = 'client';
        e = document.documentElement || document.body;
      }

      return {
        width: e[a + 'Width'],
        height: e[a + 'Height']
      };
    },

    /**
     * Checks whether given device mode is currently activated.
     * @param {string} mode Responsive mode name(e.g: desktop,
     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)
     * @returns {boolean}
     */
    isInResponsiveRange: function isInResponsiveRange(mode) {
      var breakpoint = this.getViewPort().width;

      if (mode == 'general') {
        return true;
      } else if (mode == 'desktop' && breakpoint >= this.getBreakpoint('lg') + 1) {
        return true;
      } else if (mode == 'tablet' && breakpoint >= this.getBreakpoint('md') + 1 && breakpoint < this.getBreakpoint('lg')) {
        return true;
      } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {
        return true;
      } else if (mode == 'desktop-and-tablet' && breakpoint >= this.getBreakpoint('md') + 1) {
        return true;
      } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {
        return true;
      } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {
        return true;
      }

      return false;
    },

    /**
     * Checks whether given device mode is currently activated.
     * @param {string} mode Responsive mode name(e.g: desktop,
     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)
     * @returns {boolean}
     */
    isBreakpointUp: function isBreakpointUp(mode) {
      var width = this.getViewPort().width;
      var breakpoint = this.getBreakpoint(mode);
      return width >= breakpoint;
    },
    isBreakpointDown: function isBreakpointDown(mode) {
      var width = this.getViewPort().width;
      var breakpoint = this.getBreakpoint(mode);
      return width < breakpoint;
    },

    /**
     * Generates unique ID for give prefix.
     * @param {string} prefix Prefix for generated ID
     * @returns {boolean}
     */
    getUniqueID: function getUniqueID(prefix) {
      return prefix + Math.floor(Math.random() * new Date().getTime());
    },

    /**
     * Gets window width for give breakpoint mode.
     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)
     * @returns {number}
     */
    getBreakpoint: function getBreakpoint(mode) {
      return breakpoints[mode];
    },

    /**
     * Checks whether object has property matchs given key path.
     * @param {object} obj Object contains values paired with given key path
     * @param {string} keys Keys path seperated with dots
     * @returns {object}
     */
    isset: function isset(obj, keys) {
      var stone;
      keys = keys || '';

      if (keys.indexOf('[') !== -1) {
        throw new Error('Unsupported object path notation.');
      }

      keys = keys.split('.');

      do {
        if (obj === undefined) {
          return false;
        }

        stone = keys.shift();

        if (!obj.hasOwnProperty(stone)) {
          return false;
        }

        obj = obj[stone];
      } while (keys.length);

      return true;
    },

    /**
     * Gets highest z-index of the given element parents
     * @param {object} el jQuery element object
     * @returns {number}
     */
    getHighestZindex: function getHighestZindex(el) {
      var position, value;

      while (el && el !== document) {
        // Ignore z-index if position is set to a value where z-index is ignored by the browser
        // This makes behavior of this function consistent across browsers
        // WebKit always returns auto if the element is positioned
        position = KTUtil.css(el, 'position');

        if (position === "absolute" || position === "relative" || position === "fixed") {
          // IE returns 0 when zIndex is not specified
          // other browsers return a string
          // we ignore the case of nested elements with an explicit value of 0
          // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
          value = parseInt(KTUtil.css(el, 'z-index'));

          if (!isNaN(value) && value !== 0) {
            return value;
          }
        }

        el = el.parentNode;
      }

      return null;
    },

    /**
     * Checks whether the element has any parent with fixed positionfreg
     * @param {object} el jQuery element object
     * @returns {boolean}
     */
    hasFixedPositionedParent: function hasFixedPositionedParent(el) {
      var position;

      while (el && el !== document) {
        position = KTUtil.css(el, 'position');

        if (position === "fixed") {
          return true;
        }

        el = el.parentNode;
      }

      return false;
    },

    /**
     * Simulates delay
     */
    sleep: function sleep(milliseconds) {
      var start = new Date().getTime();

      for (var i = 0; i < 1e7; i++) {
        if (new Date().getTime() - start > milliseconds) {
          break;
        }
      }
    },

    /**
     * Gets randomly generated integer value within given min and max range
     * @param {number} min Range start value
     * @param {number} max Range end value
     * @returns {number}
     */
    getRandomInt: function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    },

    /**
     * Checks whether Angular library is included
     * @returns {boolean}
     */
    isAngularVersion: function isAngularVersion() {
      return window.Zone !== undefined ? true : false;
    },
    // jQuery Workarounds
    // Deep extend:  $.extend(true, {}, objA, objB);
    deepExtend: function deepExtend(out) {
      out = out || {};

      for (var i = 1; i < arguments.length; i++) {
        var obj = arguments[i];
        if (!obj) continue;

        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (_typeof(obj[key]) === 'object') out[key] = KTUtil.deepExtend(out[key], obj[key]);else out[key] = obj[key];
          }
        }
      }

      return out;
    },
    // extend:  $.extend({}, objA, objB);
    extend: function extend(out) {
      out = out || {};

      for (var i = 1; i < arguments.length; i++) {
        if (!arguments[i]) continue;

        for (var key in arguments[i]) {
          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];
        }
      }

      return out;
    },
    getById: function getById(el) {
      if (typeof el === 'string') {
        return document.getElementById(el);
      } else {
        return el;
      }
    },
    getByTag: function getByTag(query) {
      return document.getElementsByTagName(query);
    },
    getByTagName: function getByTagName(query) {
      return document.getElementsByTagName(query);
    },
    getByClass: function getByClass(query) {
      return document.getElementsByClassName(query);
    },
    getBody: function getBody() {
      return document.getElementsByTagName('body')[0];
    },

    /**
     * Checks whether the element has given classes
     * @param {object} el jQuery element object
     * @param {string} Classes string
     * @returns {boolean}
     */
    hasClasses: function hasClasses(el, classes) {
      if (!el) {
        return;
      }

      var classesArr = classes.split(" ");

      for (var i = 0; i < classesArr.length; i++) {
        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {
          return false;
        }
      }

      return true;
    },
    hasClass: function hasClass(el, className) {
      if (!el) {
        return;
      }

      return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
    },
    addClass: function addClass(el, className) {
      if (!el || typeof className === 'undefined') {
        return;
      }

      var classNames = className.split(' ');

      if (el.classList) {
        for (var i = 0; i < classNames.length; i++) {
          if (classNames[i] && classNames[i].length > 0) {
            el.classList.add(KTUtil.trim(classNames[i]));
          }
        }
      } else if (!KTUtil.hasClass(el, className)) {
        for (var x = 0; x < classNames.length; x++) {
          el.className += ' ' + KTUtil.trim(classNames[x]);
        }
      }
    },
    removeClass: function removeClass(el, className) {
      if (!el || typeof className === 'undefined') {
        return;
      }

      var classNames = className.split(' ');

      if (el.classList) {
        for (var i = 0; i < classNames.length; i++) {
          el.classList.remove(KTUtil.trim(classNames[i]));
        }
      } else if (KTUtil.hasClass(el, className)) {
        for (var x = 0; x < classNames.length; x++) {
          el.className = el.className.replace(new RegExp('\\b' + KTUtil.trim(classNames[x]) + '\\b', 'g'), '');
        }
      }
    },
    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {
      var event;

      if (window.CustomEvent) {
        event = new CustomEvent(eventName, {
          detail: data
        });
      } else {
        event = document.createEvent('CustomEvent');
        event.initCustomEvent(eventName, true, true, data);
      }

      el.dispatchEvent(event);
    },
    triggerEvent: function triggerEvent(node, eventName) {
      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems
      var doc;

      if (node.ownerDocument) {
        doc = node.ownerDocument;
      } else if (node.nodeType == 9) {
        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE
        doc = node;
      } else {
        throw new Error("Invalid node passed to fireEvent: " + node.id);
      }

      if (node.dispatchEvent) {
        // Gecko-style approach (now the standard) takes more work
        var eventClass = ""; // Different events have different event classes.
        // If this switch statement can't map an eventName to an eventClass,
        // the event firing is going to fail.

        switch (eventName) {
          case "click": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.

          case "mouseenter":
          case "mouseleave":
          case "mousedown":
          case "mouseup":
            eventClass = "MouseEvents";
            break;

          case "focus":
          case "change":
          case "blur":
          case "select":
            eventClass = "HTMLEvents";
            break;

          default:
            throw "fireEvent: Couldn't find an event class for event '" + eventName + "'.";
            break;
        }

        var event = doc.createEvent(eventClass);
        var bubbles = eventName == "change" ? false : true;
        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.

        event.synthetic = true; // allow detection of synthetic events
        // The second parameter says go ahead with the default action

        node.dispatchEvent(event, true);
      } else if (node.fireEvent) {
        // IE-old school style
        var event = doc.createEventObject();
        event.synthetic = true; // allow detection of synthetic events

        node.fireEvent("on" + eventName, event);
      }
    },
    index: function index(el) {
      var c = el.parentNode.children,
          i = 0;

      for (; i < c.length; i++) {
        if (c[i] == el) return i;
      }
    },
    trim: function trim(string) {
      return string.trim();
    },
    eventTriggered: function eventTriggered(e) {
      if (e.currentTarget.dataset.triggered) {
        return true;
      } else {
        e.currentTarget.dataset.triggered = true;
        return false;
      }
    },
    remove: function remove(el) {
      if (el && el.parentNode) {
        el.parentNode.removeChild(el);
      }
    },
    find: function find(parent, query) {
      parent = KTUtil.getById(parent);

      if (parent) {
        return parent.querySelector(query);
      }
    },
    findAll: function findAll(parent, query) {
      parent = KTUtil.getById(parent);

      if (parent) {
        return parent.querySelectorAll(query);
      }
    },
    insertAfter: function insertAfter(el, referenceNode) {
      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);
    },
    parents: function parents(elem, selector) {
      // Element.matches() polyfill
      if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
          var matches = (this.document || this.ownerDocument).querySelectorAll(s),
              i = matches.length;

          while (--i >= 0 && matches.item(i) !== this) {}

          return i > -1;
        };
      } // Set up a parent array


      var parents = []; // Push each parent element to the array

      for (; elem && elem !== document; elem = elem.parentNode) {
        if (selector) {
          if (elem.matches(selector)) {
            parents.push(elem);
          }

          continue;
        }

        parents.push(elem);
      } // Return our parent array


      return parents;
    },
    children: function children(el, selector, log) {
      if (!el || !el.childNodes) {
        return;
      }

      var result = [],
          i = 0,
          l = el.childNodes.length;

      for (var i; i < l; ++i) {
        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {
          result.push(el.childNodes[i]);
        }
      }

      return result;
    },
    child: function child(el, selector, log) {
      var children = KTUtil.children(el, selector, log);
      return children ? children[0] : null;
    },
    matches: function matches(el, selector, log) {
      var p = Element.prototype;

      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {
        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
      };

      if (el && el.tagName) {
        return f.call(el, selector);
      } else {
        return false;
      }
    },
    data: function data(el) {
      return {
        set: function set(name, data) {
          if (!el) {
            return;
          }

          if (el.customDataTag === undefined) {
            window.KTUtilElementDataStoreID++;
            el.customDataTag = window.KTUtilElementDataStoreID;
          }

          if (window.KTUtilElementDataStore[el.customDataTag] === undefined) {
            window.KTUtilElementDataStore[el.customDataTag] = {};
          }

          window.KTUtilElementDataStore[el.customDataTag][name] = data;
        },
        get: function get(name) {
          if (!el) {
            return;
          }

          if (el.customDataTag === undefined) {
            return null;
          }

          return this.has(name) ? window.KTUtilElementDataStore[el.customDataTag][name] : null;
        },
        has: function has(name) {
          if (!el) {
            return false;
          }

          if (el.customDataTag === undefined) {
            return false;
          }

          return window.KTUtilElementDataStore[el.customDataTag] && window.KTUtilElementDataStore[el.customDataTag][name] ? true : false;
        },
        remove: function remove(name) {
          if (el && this.has(name)) {
            delete window.KTUtilElementDataStore[el.customDataTag][name];
          }
        }
      };
    },
    outerWidth: function outerWidth(el, margin) {
      var width;

      if (margin === true) {
        width = parseFloat(el.offsetWidth);
        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));
        return parseFloat(width);
      } else {
        width = parseFloat(el.offsetWidth);
        return width;
      }
    },
    offset: function offset(el) {
      var rect, win;

      if (!el) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!el.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = el.getBoundingClientRect();
      win = el.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    height: function height(el) {
      return KTUtil.css(el, 'height');
    },
    outerHeight: function outerHeight(el) {
      var withMargic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var height = el.offsetHeight;
      var style;

      if (withMargic) {
        style = getComputedStyle(el);
        height += parseInt(style.marginTop) + parseInt(style.marginBottom);
        return height;
      } else {
        return height;
      }
    },
    visible: function visible(el) {
      return !(el.offsetWidth === 0 && el.offsetHeight === 0);
    },
    attr: function attr(el, name, value) {
      if (el == undefined) {
        return;
      }

      if (value !== undefined) {
        el.setAttribute(name, value);
      } else {
        return el.getAttribute(name);
      }
    },
    hasAttr: function hasAttr(el, name) {
      if (el == undefined) {
        return;
      }

      return el.getAttribute(name) ? true : false;
    },
    removeAttr: function removeAttr(el, name) {
      if (el == undefined) {
        return;
      }

      el.removeAttribute(name);
    },
    animate: function animate(from, to, duration, update, easing, done) {
      /**
       * TinyAnimate.easings
       *  Adapted from jQuery Easing
       */
      var easings = {};
      var easing;

      easings.linear = function (t, b, c, d) {
        return c * t / d + b;
      };

      easing = easings.linear; // Early bail out if called incorrectly

      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {
        return;
      } // Create mock done() function if necessary


      if (typeof done !== 'function') {
        done = function done() {};
      } // Pick implementation (requestAnimationFrame | setTimeout)


      var rAF = window.requestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 50);
      }; // Animation loop


      var canceled = false;
      var change = to - from;

      function loop(timestamp) {
        var time = (timestamp || +new Date()) - start;

        if (time >= 0) {
          update(easing(time, from, change, duration));
        }

        if (time >= 0 && time >= duration) {
          update(to);
          done();
        } else {
          rAF(loop);
        }
      }

      update(from); // Start animation loop

      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();
      rAF(loop);
    },
    actualCss: function actualCss(el, prop, cache) {
      var css = '';

      if (el instanceof HTMLElement === false) {
        return;
      }

      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {
        var value; // the element is hidden so:
        // making the el block so we can meassure its height but still be hidden

        css = el.style.cssText;
        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';

        if (prop == 'width') {
          value = el.offsetWidth;
        } else if (prop == 'height') {
          value = el.offsetHeight;
        }

        el.style.cssText = css; // store it in cache

        el.setAttribute('kt-hidden-' + prop, value);
        return parseFloat(value);
      } else {
        // store it in cache
        return parseFloat(el.getAttribute('kt-hidden-' + prop));
      }
    },
    actualHeight: function actualHeight(el, cache) {
      return KTUtil.actualCss(el, 'height', cache);
    },
    actualWidth: function actualWidth(el, cache) {
      return KTUtil.actualCss(el, 'width', cache);
    },
    getScroll: function getScroll(element, method) {
      // The passed in `method` value should be 'Top' or 'Left'
      method = 'scroll' + method;
      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];
    },
    css: function css(el, styleProp, value) {
      if (!el) {
        return;
      }

      if (value !== undefined) {
        el.style[styleProp] = value;
      } else {
        var defaultView = (el.ownerDocument || document).defaultView; // W3C standard way:

        if (defaultView && defaultView.getComputedStyle) {
          // sanitize property name to css notation
          // (hyphen separated words eg. font-Size)
          styleProp = styleProp.replace(/([A-Z])/g, "-$1").toLowerCase();
          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
        } else if (el.currentStyle) {
          // IE
          // sanitize property name to camelCase
          styleProp = styleProp.replace(/\-(\w)/g, function (str, letter) {
            return letter.toUpperCase();
          });
          value = el.currentStyle[styleProp]; // convert other units to pixels on IE

          if (/^\d+(em|pt|%|ex)?$/i.test(value)) {
            return function (value) {
              var oldLeft = el.style.left,
                  oldRsLeft = el.runtimeStyle.left;
              el.runtimeStyle.left = el.currentStyle.left;
              el.style.left = value || 0;
              value = el.style.pixelLeft + "px";
              el.style.left = oldLeft;
              el.runtimeStyle.left = oldRsLeft;
              return value;
            }(value);
          }

          return value;
        }
      }
    },
    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {
      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {
        return;
      }

      speed = speed ? speed : 600;
      var calcHeight = KTUtil.actualHeight(el);
      var calcPaddingTop = false;
      var calcPaddingBottom = false;

      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {
        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));
      }

      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {
        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));
      }

      if (KTUtil.data(el).has('slide-padding-top')) {
        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));
      }

      if (KTUtil.data(el).has('slide-padding-bottom')) {
        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));
      }

      if (dir == 'up') {
        // up
        el.style.cssText = 'display: block; overflow: hidden;';

        if (calcPaddingTop) {
          KTUtil.animate(0, calcPaddingTop, speed, function (value) {
            el.style.paddingTop = calcPaddingTop - value + 'px';
          }, 'linear');
        }

        if (calcPaddingBottom) {
          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {
            el.style.paddingBottom = calcPaddingBottom - value + 'px';
          }, 'linear');
        }

        KTUtil.animate(0, calcHeight, speed, function (value) {
          el.style.height = calcHeight - value + 'px';
        }, 'linear', function () {
          el.style.height = '';
          el.style.display = 'none';

          if (typeof callback === 'function') {
            callback();
          }
        });
      } else if (dir == 'down') {
        // down
        el.style.cssText = 'display: block; overflow: hidden;';

        if (calcPaddingTop) {
          KTUtil.animate(0, calcPaddingTop, speed, function (value) {
            //
            el.style.paddingTop = value + 'px';
          }, 'linear', function () {
            el.style.paddingTop = '';
          });
        }

        if (calcPaddingBottom) {
          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {
            el.style.paddingBottom = value + 'px';
          }, 'linear', function () {
            el.style.paddingBottom = '';
          });
        }

        KTUtil.animate(0, calcHeight, speed, function (value) {
          el.style.height = value + 'px';
        }, 'linear', function () {
          el.style.height = '';
          el.style.display = '';
          el.style.overflow = '';

          if (typeof callback === 'function') {
            callback();
          }
        });
      }
    },
    slideUp: function slideUp(el, speed, callback) {
      KTUtil.slide(el, 'up', speed, callback);
    },
    slideDown: function slideDown(el, speed, callback) {
      KTUtil.slide(el, 'down', speed, callback);
    },
    show: function show(el, display) {
      if (typeof el !== 'undefined') {
        el.style.display = display ? display : 'block';
      }
    },
    hide: function hide(el) {
      if (typeof el !== 'undefined') {
        el.style.display = 'none';
      }
    },
    addEvent: function addEvent(el, type, handler, one) {
      if (typeof el !== 'undefined' && el !== null) {
        el.addEventListener(type, handler);
      }
    },
    removeEvent: function removeEvent(el, type, handler) {
      if (el !== null) {
        el.removeEventListener(type, handler);
      }
    },
    on: function on(element, selector, event, handler) {
      if (!selector) {
        return;
      }

      var eventId = KTUtil.getUniqueID('event');

      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {
        var targets = element.querySelectorAll(selector);
        var target = e.target;

        while (target && target !== element) {
          for (var i = 0, j = targets.length; i < j; i++) {
            if (target === targets[i]) {
              handler.call(target, e);
            }
          }

          target = target.parentNode;
        }
      };

      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);
      return eventId;
    },
    off: function off(element, event, eventId) {
      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {
        return;
      }

      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);
      delete window.KTUtilDelegatedEventHandlers[eventId];
    },
    one: function onetime(el, type, callback) {
      el.addEventListener(type, function callee(e) {
        // remove event
        if (e.target && e.target.removeEventListener) {
          e.target.removeEventListener(e.type, callee);
        } // need to verify from https://themeforest.net/author_dashboard#comment_23615588


        if (el && el.removeEventListener) {
          e.currentTarget.removeEventListener(e.type, callee);
        } // call handler


        return callback(e);
      });
    },
    hash: function hash(str) {
      var hash = 0,
          i,
          chr;
      if (str.length === 0) return hash;

      for (i = 0; i < str.length; i++) {
        chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
      }

      return hash;
    },
    animateClass: function animateClass(el, animationName, callback) {
      var animation;
      var animations = {
        animation: 'animationend',
        OAnimation: 'oAnimationEnd',
        MozAnimation: 'mozAnimationEnd',
        WebkitAnimation: 'webkitAnimationEnd',
        msAnimation: 'msAnimationEnd'
      };

      for (var t in animations) {
        if (el.style[t] !== undefined) {
          animation = animations[t];
        }
      }

      KTUtil.addClass(el, 'animated ' + animationName);
      KTUtil.one(el, animation, function () {
        KTUtil.removeClass(el, 'animated ' + animationName);
      });

      if (callback) {
        KTUtil.one(el, animation, callback);
      }
    },
    transitionEnd: function transitionEnd(el, callback) {
      var transition;
      var transitions = {
        transition: 'transitionend',
        OTransition: 'oTransitionEnd',
        MozTransition: 'mozTransitionEnd',
        WebkitTransition: 'webkitTransitionEnd',
        msTransition: 'msTransitionEnd'
      };

      for (var t in transitions) {
        if (el.style[t] !== undefined) {
          transition = transitions[t];
        }
      }

      KTUtil.one(el, transition, callback);
    },
    animationEnd: function animationEnd(el, callback) {
      var animation;
      var animations = {
        animation: 'animationend',
        OAnimation: 'oAnimationEnd',
        MozAnimation: 'mozAnimationEnd',
        WebkitAnimation: 'webkitAnimationEnd',
        msAnimation: 'msAnimationEnd'
      };

      for (var t in animations) {
        if (el.style[t] !== undefined) {
          animation = animations[t];
        }
      }

      KTUtil.one(el, animation, callback);
    },
    animateDelay: function animateDelay(el, value) {
      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];

      for (var i = 0; i < vendors.length; i++) {
        KTUtil.css(el, vendors[i] + 'animation-delay', value);
      }
    },
    animateDuration: function animateDuration(el, value) {
      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];

      for (var i = 0; i < vendors.length; i++) {
        KTUtil.css(el, vendors[i] + 'animation-duration', value);
      }
    },
    scrollTo: function scrollTo(target, offset, duration) {
      var duration = duration ? duration : 500;
      var targetPos = target ? KTUtil.offset(target).top : 0;
      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
      var from, to;

      if (offset) {
        scrollPos += offset;
      }

      from = scrollPos;
      to = targetPos;
      KTUtil.animate(from, to, duration, function (value) {
        document.documentElement.scrollTop = value;
        document.body.parentNode.scrollTop = value;
        document.body.scrollTop = value;
      }); //, easing, done
    },
    scrollTop: function scrollTop(offset, duration) {
      KTUtil.scrollTo(null, offset, duration);
    },
    isArray: function isArray(obj) {
      return obj && Array.isArray(obj);
    },
    ready: function ready(callback) {
      if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading") {
        callback();
      } else {
        document.addEventListener('DOMContentLoaded', callback);
      }
    },
    isEmpty: function isEmpty(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          return false;
        }
      }

      return true;
    },
    numberString: function numberString(nStr) {
      nStr += '';
      var x = nStr.split('.');
      var x1 = x[0];
      var x2 = x.length > 1 ? '.' + x[1] : '';
      var rgx = /(\d+)(\d{3})/;

      while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
      }

      return x1 + x2;
    },
    detectIE: function detectIE() {
      var ua = window.navigator.userAgent; // Test values; Uncomment to check result …
      // IE 10
      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
      // IE 11
      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
      // Edge 12 (Spartan)
      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
      // Edge 13
      // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';

      var msie = ua.indexOf('MSIE ');

      if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
      }

      var trident = ua.indexOf('Trident/');

      if (trident > 0) {
        // IE 11 => return version number
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
      }

      var edge = ua.indexOf('Edge/');

      if (edge > 0) {
        // Edge (IE 12+) => return version number
        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
      } // other browser


      return false;
    },
    isRTL: function isRTL() {
      var html = KTUtil.getByTagName('html')[0];

      if (html) {
        return KTUtil.attr(html, 'direction') == 'rtl';
      }
    },
    // Scroller
    scrollInit: function scrollInit(element, options) {
      if (!element) {
        return;
      } // Learn more: https://github.com/mdbootstrap/perfect-scrollbar#options


      var pluginDefOptions = {
        wheelSpeed: 0.5,
        swipeEasing: true,
        wheelPropagation: false,
        minScrollbarLength: 40,
        maxScrollbarLength: 300,
        suppressScrollX: true
      };
      options = KTUtil.deepExtend({}, pluginDefOptions, options); // Define init function

      function init() {
        var ps;
        var height; // Get extra options via data attributes

        var attrs = element.getAttributeNames();

        if (attrs.length > 0) {
          attrs.forEach(function (attrName) {
            // more options; https://github.com/ganlanyuan/tiny-slider#options
            if (/^data-.*/g.test(attrName)) {
              if (['scroll', 'height', 'mobile-height'].includes(optionName) == false) {
                var optionName = attrName.replace('data-', '').toLowerCase().replace(/(?:[\s-])\w/g, function (match) {
                  return match.replace('-', '').toUpperCase();
                });
                options[optionName] = KTUtil.filterBoolean(element.getAttribute(attrName));
              }
            }
          });
        }

        if (options.height instanceof Function) {
          height = options.height.call();
        } else {
          if (KTUtil.isMobileDevice() === true && options.mobileHeight) {
            height = parseInt(options.mobileHeight);
          } else {
            height = parseInt(options.height);
          }
        }

        if (height === false) {
          KTUtil.scrollDestroy(element, true);
          return;
        }

        height = parseInt(height); // Destroy scroll on table and mobile modes

        if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isMobileDevice() === true) {
          ps = KTUtil.data(element).get('ps');

          if (ps) {
            if (options.resetHeightOnDestroy) {
              KTUtil.css(element, 'height', 'auto');
            } else {
              KTUtil.css(element, 'overflow', 'auto');

              if (height > 0) {
                KTUtil.css(element, 'height', height + 'px');
              }
            }

            ps.destroy();
            ps = KTUtil.data(element).remove('ps');
          } else if (height > 0) {
            KTUtil.css(element, 'overflow', 'auto');
            KTUtil.css(element, 'height', height + 'px');
          }

          return;
        }

        if (height > 0) {
          KTUtil.css(element, 'height', height + 'px');
        }

        if (options.desktopNativeScroll) {
          KTUtil.css(element, 'overflow', 'auto');
          return;
        } // Pass options via HTML Attributes


        if (KTUtil.attr(element, 'data-window-scroll') == 'true') {
          options.windowScroll = true;
        } // Init scroll


        ps = KTUtil.data(element).get('ps');

        if (ps) {
          ps.update();
        } else {
          KTUtil.css(element, 'overflow', 'hidden');
          KTUtil.addClass(element, 'scroll');
          ps = new PerfectScrollbar(element, options);
          KTUtil.data(element).set('ps', ps);
        } // Remember scroll position in cookie


        var uid = KTUtil.attr(element, 'id'); // Consider using Localstorage
        //if (options.rememberPosition === true && Cookies && uid) {
        //    if (KTCookie.getCookie(uid)) {
        //        var pos = parseInt(KTCookie.getCookie(uid));
        //
        //        if (pos > 0) {
        //            element.scrollTop = pos;
        //        }
        //    }
        //
        //    element.addEventListener('ps-scroll-y', function() {
        //        KTCookie.setCookie(uid, element.scrollTop);
        //    });
        //}
      } // Init


      init(); // Handle window resize

      if (options.handleWindowResize) {
        KTUtil.addResizeHandler(function () {
          init();
        });
      }
    },
    scrollUpdate: function scrollUpdate(element) {
      var ps = KTUtil.data(element).get('ps');

      if (ps) {
        ps.update();
      }
    },
    scrollUpdateAll: function scrollUpdateAll(parent) {
      var scrollers = KTUtil.findAll(parent, '.ps');

      for (var i = 0, len = scrollers.length; i < len; i++) {
        KTUtil.scrollUpdate(scrollers[i]);
      }
    },
    scrollDestroy: function scrollDestroy(element, resetAll) {
      var ps = KTUtil.data(element).get('ps');

      if (ps) {
        ps.destroy();
        ps = KTUtil.data(element).remove('ps');
      }

      if (element && resetAll) {
        element.style.setProperty('overflow', '');
        element.style.setProperty('height', '');
      }
    },
    filterBoolean: function filterBoolean(val) {
      // Convert string boolean
      if (val === true || val === 'true') {
        return true;
      }

      if (val === false || val === 'false') {
        return false;
      }

      return val;
    },
    setHTML: function setHTML(el, html) {
      el.innerHTML = html;
    },
    getHTML: function getHTML(el) {
      if (el) {
        return el.innerHTML;
      }
    },
    getDocumentHeight: function getDocumentHeight() {
      var body = document.body;
      var html = document.documentElement;
      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
    },
    getScrollTop: function getScrollTop() {
      return (document.scrollingElement || document.documentElement).scrollTop;
    },
    colorDarken: function colorDarken(color, amount) {
      var subtractLight = function subtractLight(color, amount) {
        var cc = parseInt(color, 16) - amount;
        var c = cc < 0 ? 0 : cc;
        c = c.toString(16).length > 1 ? c.toString(16) : "0".concat(c.toString(16));
        return c;
      };

      color = color.indexOf("#") >= 0 ? color.substring(1, color.length) : color;
      amount = parseInt(255 * amount / 100);
      return color = "#".concat(subtractLight(color.substring(0, 2), amount)).concat(subtractLight(color.substring(2, 4), amount)).concat(subtractLight(color.substring(4, 6), amount));
    },
    colorLighten: function colorLighten(color, amount) {
      var addLight = function addLight(color, amount) {
        var cc = parseInt(color, 16) + amount;
        var c = cc > 255 ? 255 : cc;
        c = c.toString(16).length > 1 ? c.toString(16) : "0".concat(c.toString(16));
        return c;
      };

      color = color.indexOf("#") >= 0 ? color.substring(1, color.length) : color;
      amount = parseInt(255 * amount / 100);
      return color = "#".concat(addLight(color.substring(0, 2), amount)).concat(addLight(color.substring(2, 4), amount)).concat(addLight(color.substring(4, 6), amount));
    },
    // Throttle function: Input as function which needs to be throttled and delay is the time interval in milliseconds
    throttle: function throttle(timer, func, delay) {
      // If setTimeout is already scheduled, no need to do anything
      if (timer) {
        return;
      } // Schedule a setTimeout after delay seconds


      timer = setTimeout(function () {
        func(); // Once setTimeout function execution is finished, timerId = undefined so that in <br>
        // the next scroll event function execution can be scheduled by the setTimeout

        timer = undefined;
      }, delay);
    },
    // Debounce function: Input as function which needs to be debounced and delay is the debounced time in milliseconds
    debounce: function debounce(timer, func, delay) {
      // Cancels the setTimeout method execution
      clearTimeout(timer); // Executes the func after delay time.

      timer = setTimeout(func, delay);
    },
    btnWait: function btnWait(el, cls, message) {
      var disable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

      if (!el) {
        return;
      }

      if (disable) {
        KTUtil.attr(el, "disabled", true);
      }

      if (cls) {
        KTUtil.addClass(el, cls);
        KTUtil.attr(el, "wait-class", cls);
      }

      if (message) {
        var caption = KTUtil.find(el, '.btn-caption');

        if (caption) {
          KTUtil.data(caption).set('caption', KTUtil.getHTML(caption));
          KTUtil.setHTML(caption, message);
        } else {
          KTUtil.data(el).set('caption', KTUtil.getHTML(el));
          KTUtil.setHTML(el, message);
        }
      }
    },
    btnRelease: function btnRelease(el) {
      if (!el) {
        return;
      } /// Show loading state on button


      KTUtil.removeAttr(el, "disabled");

      if (KTUtil.hasAttr(el, "wait-class")) {
        KTUtil.removeClass(el, KTUtil.attr(el, "wait-class"));
      }

      var caption = KTUtil.find(el, '.btn-caption');

      if (caption && KTUtil.data(caption).has('caption')) {
        KTUtil.setHTML(caption, KTUtil.data(caption).get('caption'));
      } else if (KTUtil.data(el).has('caption')) {
        KTUtil.setHTML(el, KTUtil.data(el).get('caption'));
      }
    },
    isOffscreen: function isOffscreen(el, direction) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var windowWidth = KTUtil.getViewPort().width;
      var windowHeight = KTUtil.getViewPort().height;
      var top = KTUtil.offset(el).top;
      var height = KTUtil.outerHeight(el) + offset;
      var left = KTUtil.offset(el).left;
      var width = KTUtil.outerWidth(el) + offset;

      if (direction == 'bottom') {
        if (windowHeight < top + height) {
          return true;
        } else if (windowHeight > top + height * 1.5) {
          return true;
        }
      }

      if (direction == 'top') {
        if (top < 0) {
          return true;
        } else if (top > height) {
          return true;
        }
      }

      if (direction == 'left') {
        if (left < 0) {
          return true;
        } else if (left * 2 > width) {//console.log('left 2');
          //return true;
        }
      }

      if (direction == 'right') {
        if (windowWidth < left + width) {
          return true;
        } else {//console.log('right 2');
          //return true;
        }
      }

      return false;
    }
  };
}(); // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTUtil;
} // Initialize KTUtil class on document ready


KTUtil.ready(function () {
  if (typeof KTAppSettings !== 'undefined') {
    KTUtil.init(KTAppSettings);
  } else {
    KTUtil.init();
  }
}); // CSS3 Transitions only after page load(.page-loading class added to body tag and remove with JS on page load)

window.onload = function () {
  var result = KTUtil.getByTagName('body');

  if (result && result[0]) {
    KTUtil.removeClass(result[0], 'page-loading');
  }
};

/***/ }),

/***/ "./resources/metronic/js/components/wizard.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/components/wizard.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Component Definition

var KTWizard = function KTWizard(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.getById(elementId);
  var body = KTUtil.getBody();

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    startStep: 1,
    clickableSteps: false // to make steps clickable this set value true and add data-wizard-clickable="true" in HTML for class="wizard" element

  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('wizard')) {
        the = KTUtil.data(element).get('wizard');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('wizard', the);
      }

      return the;
    },

    /**
     * Init wizard
     */
    init: function init(options) {
      the.element = element;
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options); // Elements

      the.steps = KTUtil.findAll(element, '[data-wizard-type="step"]');
      the.btnSubmit = KTUtil.find(element, '[data-wizard-type="action-submit"]');
      the.btnNext = KTUtil.find(element, '[data-wizard-type="action-next"]');
      the.btnPrev = KTUtil.find(element, '[data-wizard-type="action-prev"]');
      the.btnLast = KTUtil.find(element, '[data-wizard-type="action-last"]');
      the.btnFirst = KTUtil.find(element, '[data-wizard-type="action-first"]'); // Variables

      the.events = [];
      the.currentStep = 1;
      the.stopped = false;
      the.totalSteps = the.steps.length; // Init current step

      if (the.options.startStep > 1) {
        Plugin.goTo(the.options.startStep);
      } // Init UI


      Plugin.updateUI();
    },

    /**
     * Build Form Wizard
     */
    build: function build() {
      // Next button event handler
      KTUtil.addEvent(the.btnNext, 'click', function (e) {
        e.preventDefault();
        Plugin.goTo(Plugin.getNextStep(), true);
      }); // Prev button event handler

      KTUtil.addEvent(the.btnPrev, 'click', function (e) {
        e.preventDefault();
        Plugin.goTo(Plugin.getPrevStep(), true);
      }); // First button event handler

      KTUtil.addEvent(the.btnFirst, 'click', function (e) {
        e.preventDefault();
        Plugin.goTo(Plugin.getFirstStep(), true);
      }); // Last button event handler

      KTUtil.addEvent(the.btnLast, 'click', function (e) {
        e.preventDefault();
        Plugin.goTo(Plugin.getLastStep(), true);
      });

      if (the.options.clickableSteps === true) {
        KTUtil.on(element, '[data-wizard-type="step"]', 'click', function () {
          var index = KTUtil.index(this) + 1;

          if (index !== the.currentStep) {
            Plugin.goTo(index, true);
          }
        });
      }
    },

    /**
     * Handles wizard click wizard
     */
    goTo: function goTo(number, eventHandle) {
      // Skip if this step is already shown
      if (number === the.currentStep || number > the.totalSteps || number < 0) {
        return;
      } // Validate step number


      if (number) {
        number = parseInt(number);
      } else {
        number = Plugin.getNextStep();
      } // Before next and prev events


      var callback;

      if (eventHandle === true) {
        if (number > the.currentStep) {
          callback = Plugin.eventTrigger('beforeNext');
        } else {
          callback = Plugin.eventTrigger('beforePrev');
        }
      } // Skip if stopped


      if (the.stopped === true) {
        the.stopped = false;
        return;
      } // Continue if no exit


      if (callback !== false) {
        // Before change
        if (eventHandle === true) {
          Plugin.eventTrigger('beforeChange');
        } // Set current step


        the.currentStep = number;
        Plugin.updateUI(); // Trigger change event

        if (eventHandle === true) {
          Plugin.eventTrigger('change');
        }
      } // After next and prev events


      if (eventHandle === true) {
        if (number > the.startStep) {
          Plugin.eventTrigger('afterNext');
        } else {
          Plugin.eventTrigger('afterPrev');
        }
      }

      return the;
    },

    /**
     * Cancel
     */
    stop: function stop() {
      the.stopped = true;
    },

    /**
     * Resume
     */
    start: function start() {
      the.stopped = false;
    },

    /**
     * Check last step
     */
    isLastStep: function isLastStep() {
      return the.currentStep === the.totalSteps;
    },

    /**
     * Check first step
     */
    isFirstStep: function isFirstStep() {
      return the.currentStep === 1;
    },

    /**
     * Check between step
     */
    isBetweenStep: function isBetweenStep() {
      return Plugin.isLastStep() === false && Plugin.isFirstStep() === false;
    },

    /**
     * Go to the first step
     */
    updateUI: function updateUI() {
      var stepType = '';
      var index = the.currentStep - 1;

      if (Plugin.isLastStep()) {
        stepType = 'last';
      } else if (Plugin.isFirstStep()) {
        stepType = 'first';
      } else {
        stepType = 'between';
      }

      KTUtil.attr(the.element, 'data-wizard-state', stepType); // Steps

      var steps = KTUtil.findAll(the.element, '[data-wizard-type="step"]');

      if (steps && steps.length > 0) {
        for (var i = 0, len = steps.length; i < len; i++) {
          if (i == index) {
            KTUtil.attr(steps[i], 'data-wizard-state', 'current');
          } else {
            if (i < index) {
              KTUtil.attr(steps[i], 'data-wizard-state', 'done');
            } else {
              KTUtil.attr(steps[i], 'data-wizard-state', 'pending');
            }
          }
        }
      } // Steps Info


      var stepsInfo = KTUtil.findAll(the.element, '[data-wizard-type="step-info"]');

      if (stepsInfo && stepsInfo.length > 0) {
        for (var i = 0, len = stepsInfo.length; i < len; i++) {
          if (i == index) {
            KTUtil.attr(stepsInfo[i], 'data-wizard-state', 'current');
          } else {
            KTUtil.removeAttr(stepsInfo[i], 'data-wizard-state');
          }
        }
      } // Steps Content


      var stepsContent = KTUtil.findAll(the.element, '[data-wizard-type="step-content"]');

      if (stepsContent && stepsContent.length > 0) {
        for (var i = 0, len = stepsContent.length; i < len; i++) {
          if (i == index) {
            KTUtil.attr(stepsContent[i], 'data-wizard-state', 'current');
          } else {
            KTUtil.removeAttr(stepsContent[i], 'data-wizard-state');
          }
        }
      }
    },

    /**
     * Get next step
     */
    getNextStep: function getNextStep() {
      if (the.totalSteps >= the.currentStep + 1) {
        return the.currentStep + 1;
      } else {
        return the.totalSteps;
      }
    },

    /**
     * Get prev step
     */
    getPrevStep: function getPrevStep() {
      if (the.currentStep - 1 >= 1) {
        return the.currentStep - 1;
      } else {
        return 1;
      }
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, nested) {
      //KTUtil.triggerCustomEvent(name);
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Go to the next step
   */


  the.goNext = function (eventHandle) {
    return Plugin.goTo(Plugin.getNextStep(), eventHandle);
  };
  /**
   * Go to the prev step
   */


  the.goPrev = function (eventHandle) {
    return Plugin.goTo(Plugin.getPrevStep(), eventHandle);
  };
  /**
   * Go to the last step
   */


  the.goLast = function (eventHandle) {
    return Plugin.goTo(Plugin.getLastStep(), eventHandle);
  };
  /**
   * Go to the first step
   */


  the.goFirst = function (eventHandle) {
    return Plugin.goTo(Plugin.getFirstStep(), eventHandle);
  };
  /**
   * Go to a step
   */


  the.goTo = function (number, eventHandle) {
    return Plugin.goTo(number, eventHandle);
  };
  /**
   * Cancel step
   */


  the.stop = function () {
    return Plugin.stop();
  };
  /**
   * Resume step
   */


  the.start = function () {
    return Plugin.start();
  };
  /**
   * Get current step number
   */


  the.getStep = function () {
    return the.currentStep;
  };
  /**
   * Check last step
   */


  the.isLastStep = function () {
    return Plugin.isLastStep();
  };
  /**
   * Check first step
   */


  the.isFirstStep = function () {
    return Plugin.isFirstStep();
  };
  /**
   * Attach event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTWizard;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside-menu.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside-menu.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutAsideMenu = function () {
  // Private properties
  var _element;

  var _menuObject; // Initialize


  var _init = function _init() {
    var menuDesktopMode = KTUtil.attr(_element, 'data-menu-dropdown') === '1' ? 'dropdown' : 'accordion';
    var scroll;

    if (KTUtil.attr(_element, 'data-menu-scroll') === '1') {
      scroll = {
        rememberPosition: true,
        // remember position on page reload
        height: function height() {
          // calculate available scrollable area height
          var height = parseInt(KTUtil.getViewPort().height);

          if (KTUtil.isBreakpointUp('lg')) {
            height = height - KTLayoutBrand.getHeight();
          }

          height = height - (parseInt(KTUtil.css(_element, 'marginBottom')) + parseInt(KTUtil.css(_element, 'marginTop')));
          return height;
        }
      };
    }

    _menuObject = new KTMenu(_element, {
      // Vertical scroll
      scroll: scroll,
      // Submenu setup
      submenu: {
        desktop: menuDesktopMode,
        tablet: 'accordion',
        // menu set to accordion in tablet mode
        mobile: 'accordion' // menu set to accordion in mobile mode

      },
      // Accordion setup
      accordion: {
        expandAll: false // allow having multiple expanded accordions in the menu

      }
    }); // Disable menu click if aside is fixed and minimized

    _menuObject.on('submenuToggle', function (menu) {
      if (KTLayoutAside.isMinimized() === true && KTLayoutAside.isHoverable() === false) {
        return false;
      }
    }); // Close aside offcanvas panel before page reload On tablet and mobile


    _menuObject.on('linkClick', function (menu) {
      if (KTUtil.isBreakpointDown('lg')) {
        // Tablet and mobile mode
        KTLayoutAside.getOffcanvas().hide(); // Hide offcanvas after general link click
      }
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize menu


      _init();
    },
    getElement: function getElement() {
      return _element;
    },
    getMenu: function getMenu() {
      return _menuObject;
    },
    pauseDropdownHover: function pauseDropdownHover(time) {
      if (_menuObject) {
        _menuObject.pauseDropdownHover(time);
      }
    },
    closeMobileOffcanvas: function closeMobileOffcanvas() {
      if (_menuObject && KTUtil.isMobileDevice()) {
        _menuObject.hide();
      }
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutAsideMenu;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside-toggle.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside-toggle.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutAsideToggle = function () {
  // Private properties
  var _body;

  var _element;

  var _toggleObject; // Initialize


  var _init = function _init() {
    _toggleObject = new KTToggle(_element, {
      target: _body,
      targetState: 'aside-minimize',
      toggleState: 'active'
    });

    _toggleObject.on('toggle', function (toggle) {
      // Update sticky card
      if (typeof KTLayoutStickyCard !== 'undefined') {
        KTLayoutStickyCard.update();
      } // Pause header menu dropdowns


      if (typeof KTLayoutHeaderMenu !== 'undefined') {
        KTLayoutHeaderMenu.pauseDropdownHover(800);
      } // Pause aside menu dropdowns


      if (typeof KTLayoutAsideMenu !== 'undefined') {
        KTLayoutAsideMenu.pauseDropdownHover(800);
      } // Remember state in cookie


      KTCookie.setCookie('kt_aside_toggle_state', toggle.getState()); // to set default minimized left aside use this cookie value in your
      // server side code and add "kt-primary--minimize aside-minimize" classes to
      // the body tag in order to initialize the minimized left aside mode during page loading.
    });

    _toggleObject.on('beforeToggle', function (toggle) {
      if (KTUtil.hasClass(_body, 'aside-minimize') === false && KTUtil.hasClass(_body, 'aside-minimize-hover')) {
        KTUtil.removeClass(_body, 'aside-minimize-hover');
      }
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);
      _body = KTUtil.getBody();

      if (!_element) {
        return;
      } // Initialize


      _init();
    },
    getElement: function getElement() {
      return _element;
    },
    getToggle: function getToggle() {
      return _toggleObject;
    },
    onToggle: function onToggle(handler) {
      if (typeof _toggleObject.element !== 'undefined') {
        _toggleObject.on('toggle', handler);
      }
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutAsideToggle;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/aside.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/base/aside.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutAside = function () {
  // Private properties
  var _body;

  var _element;

  var _offcanvasObject; // Private functions
  // Initialize


  var _init = function _init() {
    var offcanvasClass = KTUtil.hasClass(_element, 'aside-offcanvas-default') ? 'aside-offcanvas-default' : 'aside'; // Initialize mobile aside offcanvas

    _offcanvasObject = new KTOffcanvas(_element, {
      baseClass: offcanvasClass,
      overlay: true,
      closeBy: 'kt_aside_close_btn',
      toggleBy: {
        target: 'kt_aside_mobile_toggle',
        state: 'mobile-toggle-active'
      }
    }); // Handle Minimized Aside Hover

    if (KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize-hoverable')) {
      var insideTm;
      var outsideTm; // Handle Aside Hover Mode

      KTUtil.addEvent(_element, 'mouseenter', function (e) {
        e.preventDefault();

        if (KTUtil.isBreakpointUp('lg') === false) {
          return;
        }

        if (outsideTm) {
          clearTimeout(outsideTm);
          outsideTm = null;
        }

        insideTm = setTimeout(function () {
          if (KTUtil.hasClass(_body, 'aside-minimize') && KTUtil.isBreakpointUp('lg')) {
            KTUtil.removeClass(_body, 'aside-minimize'); // Hover class

            KTUtil.addClass(_body, 'aside-minimize-hover');
            KTLayoutAsideMenu.getMenu().scrollUpdate();
            KTLayoutAsideMenu.getMenu().scrollTop();
          }
        }, 50);
      });
      KTUtil.addEvent(_element, 'mouseleave', function (e) {
        e.preventDefault();

        if (KTUtil.isBreakpointUp('lg') === false) {
          return;
        }

        if (insideTm) {
          clearTimeout(insideTm);
          insideTm = null;
        }

        outsideTm = setTimeout(function () {
          if (KTUtil.hasClass(_body, 'aside-minimize-hover') && KTUtil.isBreakpointUp('lg')) {
            KTUtil.removeClass(_body, 'aside-minimize-hover');
            KTUtil.addClass(_body, 'aside-minimize'); // Hover class

            KTLayoutAsideMenu.getMenu().scrollUpdate();
            KTLayoutAsideMenu.getMenu().scrollTop();
          }
        }, 100);
      });
    }
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);
      _body = KTUtil.getBody();

      if (!_element) {
        return;
      } // Initialize


      _init();
    },
    getElement: function getElement() {
      return _element;
    },
    getOffcanvas: function getOffcanvas() {
      return _offcanvasObject;
    },
    isFixed: function isFixed() {
      return KTUtil.hasClass(_body, 'aside-fixed');
    },
    isMinimized: function isMinimized() {
      return KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize');
    },
    isHoverable: function isHoverable() {
      return KTUtil.hasClass(_body, 'aside-fixed') && KTUtil.hasClass(_body, 'aside-minimize-hoverable');
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutAside;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/brand.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/base/brand.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutBrand = function () {
  // Private properties
  var _element; // Private functions


  var _getHeight = function _getHeight() {
    var height = 0;

    if (_element) {
      height = KTUtil.actualHeight(_element);
    }

    return height;
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      }
    },
    getElement: function getElement() {
      return _element;
    },
    getHeight: function getHeight() {
      return _getHeight();
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutBrand;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/content.js":
/*!******************************************************!*\
  !*** ./resources/metronic/js/layout/base/content.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutContent = function () {
  // Private properties
  var _element; // Private functions


  var _getHeight = function _getHeight() {
    var height;
    height = KTUtil.getViewPort().height;

    if (_element) {
      height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));
    }

    height = height - KTLayoutHeader.getHeight();
    height = height - KTLayoutSubheader.getHeight();
    height = height - KTLayoutFooter.getHeight();
    return height;
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);
    },
    getHeight: function getHeight() {
      return _getHeight();
    },
    getElement: function getElement() {
      return _element;
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutContent;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/footer.js":
/*!*****************************************************!*\
  !*** ./resources/metronic/js/layout/base/footer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutFooter = function () {
  // Private properties
  var _element; // Private functions


  var _getHeight = function _getHeight() {
    var height = 0;

    if (_element) {
      height = KTUtil.actualHeight(_element);
    }

    return height;
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);
    },
    getHeight: function getHeight() {
      return _getHeight();
    },
    getElement: function getElement() {
      return _element;
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutFooter;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/header-menu.js":
/*!**********************************************************!*\
  !*** ./resources/metronic/js/layout/base/header-menu.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutHeaderMenu = function () {
  // Private properties
  var _menuElement;

  var _menuObject;

  var _offcanvasElement;

  var _offcanvasObject; // Private functions


  var _init = function _init() {
    _offcanvasObject = new KTOffcanvas(_offcanvasElement, {
      overlay: true,
      baseClass: 'header-menu-wrapper',
      closeBy: 'kt_header_menu_mobile_close_btn',
      toggleBy: {
        target: 'kt_header_mobile_toggle',
        state: 'mobile-toggle-active'
      }
    });
    _menuObject = new KTMenu(_menuElement, {
      submenu: {
        desktop: 'dropdown',
        tablet: 'accordion',
        mobile: 'accordion'
      },
      accordion: {
        slideSpeed: 200,
        // accordion toggle slide speed in milliseconds
        expandAll: false // allow having multiple expanded accordions in the menu

      }
    }); // Close aside offcanvas panel before page reload On tablet and mobile

    _menuObject.on('linkClick', function (menu) {
      if (KTUtil.isBreakpointDown('lg')) {
        // Tablet and mobile mode
        _offcanvasObject.hide(); // Hide offcanvas after general link click

      }
    });
  }; // Public methods


  return {
    init: function init(menuId, offcanvasId) {
      _menuElement = KTUtil.getById(menuId);
      _offcanvasElement = KTUtil.getById(offcanvasId);

      if (!_menuElement) {
        return;
      } // Initialize menu


      _init();
    },
    getMenuElement: function getMenuElement() {
      return _menuElement;
    },
    getOffcanvasElement: function getOffcanvasElement() {
      return _offcanvasElement;
    },
    getMenu: function getMenu() {
      return _menuObject;
    },
    pauseDropdownHover: function pauseDropdownHover(time) {
      if (_menuObject) {
        _menuObject.pauseDropdownHover(time);
      }
    },
    getOffcanvas: function getOffcanvas() {
      return _offcanvasObject;
    },
    closeMobileOffcanvas: function closeMobileOffcanvas() {
      if (_menuObject && KTUtil.isMobileDevice()) {
        _offcanvasObject.hide();
      }
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutHeaderMenu;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/header-topbar.js":
/*!************************************************************!*\
  !*** ./resources/metronic/js/layout/base/header-topbar.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutHeaderTopbar = function () {
  // Private properties
  var _toggleElement;

  var _toggleObject; // Private functions


  var _init = function _init() {
    _toggleObject = new KTToggle(_toggleElement, {
      target: KTUtil.getBody(),
      targetState: 'topbar-mobile-on',
      toggleState: 'active'
    });
  }; // Public methods


  return {
    init: function init(id) {
      _toggleElement = KTUtil.getById(id);

      if (!_toggleElement) {
        return;
      } // Initialize


      _init();
    },
    getToggleElement: function getToggleElement() {
      return _toggleElement;
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutHeaderTopbar;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/header.js":
/*!*****************************************************!*\
  !*** ./resources/metronic/js/layout/base/header.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutHeader = function () {
  // Private properties
  var _element;

  var _elementForMobile;

  var _object; // Private functions
  // Get Height


  var _getHeight = function _getHeight() {
    var height = 0;

    if (_element) {
      height = KTUtil.actualHeight(_element) + 1;
    }

    return height;
  }; // Get Height


  var _getHeightForMobile = function _getHeightForMobile() {
    var height;
    height = KTUtil.actualHeight(_elementForMobile);
    return height;
  }; // Public Methods


  return {
    init: function init(id, idForMobile) {
      _element = KTUtil.getById(id);
      _elementForMobile = KTUtil.getById(idForMobile);

      if (!_element) {
        return;
      }
    },
    isFixed: function isFixed() {
      return KTUtil.hasClass(KTUtil.getBody(), 'header-fixed');
    },
    isFixedForMobile: function isFixedForMobile() {
      return KTUtil.hasClass(KTUtil.getBody(), 'header-mobile-fixed');
    },
    getElement: function getElement() {
      return _element;
    },
    getElementForMobile: function getElementForMobile() {
      return _elementForMobile;
    },
    getHeader: function getHeader() {
      return _object;
    },
    getHeight: function getHeight() {
      return _getHeight();
    },
    getHeightForMobile: function getHeightForMobile() {
      return _getHeightForMobile();
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutHeader;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/sticky-card.js":
/*!**********************************************************!*\
  !*** ./resources/metronic/js/layout/base/sticky-card.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutStickyCard = function () {
  // Private properties
  var _element;

  var _object; // Private functions


  var _init = function _init() {
    var offset = 300;

    if (typeof KTLayoutHeader !== 'undefined') {
      offset = KTLayoutHeader.getHeight();
    }

    _object = new KTCard(_element, {
      sticky: {
        offset: offset,
        zIndex: 90,
        position: {
          top: function top() {
            var pos = 0;
            var body = KTUtil.getBody();

            if (KTUtil.isBreakpointUp('lg')) {
              if (typeof KTLayoutHeader !== 'undefined' && KTLayoutHeader.isFixed()) {
                pos = pos + KTLayoutHeader.getHeight();
              }

              if (typeof KTLayoutSubheader !== 'undefined' && KTLayoutSubheader.isFixed()) {
                pos = pos + KTLayoutSubheader.getHeight();
              }
            } else {
              if (typeof KTLayoutHeader !== 'undefined' && KTLayoutHeader.isFixedForMobile()) {
                pos = pos + KTLayoutHeader.getHeightForMobile();
              }
            }

            pos = pos - 1; // remove header border width

            return pos;
          },
          left: function left(card) {
            return KTUtil.offset(_element).left;
          },
          right: function right(card) {
            var body = KTUtil.getBody();
            var cardWidth = parseInt(KTUtil.css(_element, 'width'));
            var bodyWidth = parseInt(KTUtil.css(body, 'width'));
            var cardOffsetLeft = KTUtil.offset(_element).left;
            return bodyWidth - cardWidth - cardOffsetLeft;
          }
        }
      }
    });

    _object.initSticky();

    KTUtil.addResizeHandler(function () {
      _object.updateSticky();
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init();
    },
    update: function update() {
      if (_object) {
        _object.updateSticky();
      }
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutStickyCard;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/stretched-card.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/base/stretched-card.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutStretchedCard = function () {
  // Private properties
  var _element; // Private functions


  var _init = function _init() {
    var scroll = KTUtil.find(_element, '.card-scroll');
    var cardBody = KTUtil.find(_element, '.card-body');
    var cardHeader = KTUtil.find(_element, '.card-header');
    var height = KTLayoutContent.getHeight();
    height = height - parseInt(KTUtil.actualHeight(cardHeader));
    height = height - parseInt(KTUtil.css(_element, 'marginTop')) - parseInt(KTUtil.css(_element, 'marginBottom'));
    height = height - parseInt(KTUtil.css(_element, 'paddingTop')) - parseInt(KTUtil.css(_element, 'paddingBottom'));
    height = height - parseInt(KTUtil.css(cardBody, 'paddingTop')) - parseInt(KTUtil.css(cardBody, 'paddingBottom'));
    height = height - parseInt(KTUtil.css(cardBody, 'marginTop')) - parseInt(KTUtil.css(cardBody, 'marginBottom'));
    height = height - 3;
    KTUtil.css(scroll, 'height', height + 'px');
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init(); // Re-calculate on window resize


      KTUtil.addResizeHandler(function () {
        _init();
      });
    },
    update: function update() {
      _init();
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutStretchedCard;
}

/***/ }),

/***/ "./resources/metronic/js/layout/base/subheader.js":
/*!********************************************************!*\
  !*** ./resources/metronic/js/layout/base/subheader.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutSubheader = function () {
  // Private properties
  var _element; // Private functions


  var _getHeight = function _getHeight() {
    var height = 0;

    if (_element) {
      height = KTUtil.actualHeight(_element);
    }

    return height;
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      }
    },
    isFixed: function isFixed() {
      return KTUtil.hasClass(KTUtil.getBody(), 'subheader-fixed');
    },
    getElement: function getElement() {
      return _element;
    },
    getHeight: function getHeight() {
      return _getHeight();
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutSubheader;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/chat.js":
/*!*******************************************************!*\
  !*** ./resources/metronic/js/layout/extended/chat.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Class definition

var KTLayoutChat = function () {
  // Private functions
  var _init = function _init(element) {
    var scrollEl = KTUtil.find(element, '.scroll');
    var cardBodyEl = KTUtil.find(element, '.card-body');
    var cardHeaderEl = KTUtil.find(element, '.card-header');
    var cardFooterEl = KTUtil.find(element, '.card-footer');

    if (!scrollEl) {
      return;
    } // initialize perfect scrollbar(see:  https://github.com/utatti/perfect-scrollbar)


    KTUtil.scrollInit(scrollEl, {
      windowScroll: false,
      // allow browser scroll when the scroll reaches the end of the side
      mobileNativeScroll: true,
      // enable native scroll for mobile
      desktopNativeScroll: false,
      // disable native scroll and use custom scroll for desktop
      resetHeightOnDestroy: true,
      // reset css height on scroll feature destroyed
      handleWindowResize: true,
      // recalculate hight on window resize
      rememberPosition: true,
      // remember scroll position in cookie
      height: function height() {
        // calculate height
        var height;

        if (KTUtil.isBreakpointDown('lg')) {
          // Mobile mode
          return KTUtil.hasAttr(scrollEl, 'data-mobile-height') ? parseInt(KTUtil.attr(scrollEl, 'data-mobile-height')) : 400;
        } else if (KTUtil.isBreakpointUp('lg') && KTUtil.hasAttr(scrollEl, 'data-height')) {
          // Desktop Mode
          return parseInt(KTUtil.attr(scrollEl, 'data-height'));
        } else {
          height = KTLayoutContent.getHeight();

          if (scrollEl) {
            height = height - parseInt(KTUtil.css(scrollEl, 'margin-top')) - parseInt(KTUtil.css(scrollEl, 'margin-bottom'));
          }

          if (cardHeaderEl) {
            height = height - parseInt(KTUtil.css(cardHeaderEl, 'height'));
            height = height - parseInt(KTUtil.css(cardHeaderEl, 'margin-top')) - parseInt(KTUtil.css(cardHeaderEl, 'margin-bottom'));
          }

          if (cardBodyEl) {
            height = height - parseInt(KTUtil.css(cardBodyEl, 'padding-top')) - parseInt(KTUtil.css(cardBodyEl, 'padding-bottom'));
          }

          if (cardFooterEl) {
            height = height - parseInt(KTUtil.css(cardFooterEl, 'height'));
            height = height - parseInt(KTUtil.css(cardFooterEl, 'margin-top')) - parseInt(KTUtil.css(cardFooterEl, 'margin-bottom'));
          }
        } // Remove additional space


        height = height - 2;
        return height;
      }
    }); // attach events

    KTUtil.on(element, '.card-footer textarea', 'keydown', function (e) {
      if (e.keyCode == 13) {
        _handeMessaging(element);

        e.preventDefault();
        return false;
      }
    });
    KTUtil.on(element, '.card-footer .chat-send', 'click', function (e) {
      _handeMessaging(element);
    });
  };

  var _handeMessaging = function _handeMessaging(element) {
    var messagesEl = KTUtil.find(element, '.messages');
    var scrollEl = KTUtil.find(element, '.scroll');
    var textarea = KTUtil.find(element, 'textarea');

    if (textarea.value.length === 0) {
      return;
    }

    var node = document.createElement("DIV");
    KTUtil.addClass(node, 'd-flex flex-column mb-5 align-items-end');
    var html = '';
    html += '<div class="d-flex align-items-center">';
    html += '	<div>';
    html += '		<span class="text-muted font-size-sm">2 Hours</span>';
    html += '		<a href="#" class="text-dark-75 text-hover-primary font-weight-bold font-size-h6">You</a>';
    html += '	</div>';
    html += '	<div class="symbol symbol-circle symbol-40 ml-3">';
    html += '		<img alt="Pic" src="assets/media/users/300_12.jpg"/>';
    html += '	</div>';
    html += '</div>';
    html += '<div class="mt-2 rounded p-5 bg-light-primary text-dark-50 font-weight-bold font-size-lg text-right max-w-400px">' + textarea.value + '</div>';
    KTUtil.setHTML(node, html);
    messagesEl.appendChild(node);
    textarea.value = '';
    scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));
    var ps;

    if (ps = KTUtil.data(scrollEl).get('ps')) {
      ps.update();
    }

    setTimeout(function () {
      var node = document.createElement("DIV");
      KTUtil.addClass(node, 'd-flex flex-column mb-5 align-items-start');
      var html = '';
      html += '<div class="d-flex align-items-center">';
      html += '	<div class="symbol symbol-circle symbol-40 mr-3">';
      html += '		<img alt="Pic" src="assets/media/users/300_12.jpg"/>';
      html += '	</div>';
      html += '	<div>';
      html += '		<a href="#" class="text-dark-75 text-hover-primary font-weight-bold font-size-h6">Matt Pears</a>';
      html += '		<span class="text-muted font-size-sm">Just now</span>';
      html += '	</div>';
      html += '</div>';
      html += '<div class="mt-2 rounded p-5 bg-light-success text-dark-50 font-weight-bold font-size-lg text-left max-w-400px">';
      html += 'Right before vacation season we have the next Big Deal for you.';
      html += '</div>';
      KTUtil.setHTML(node, html);
      messagesEl.appendChild(node);
      textarea.value = '';
      scrollEl.scrollTop = parseInt(KTUtil.css(messagesEl, 'height'));
      var ps;

      if (ps = KTUtil.data(scrollEl).get('ps')) {
        ps.update();
      }
    }, 2000);
  }; // Public methods


  return {
    init: function init() {
      // init modal chat example
      _init(KTUtil.getById('kt_chat_modal')); // trigger click to show popup modal chat on page load


      if (encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com') {
        setTimeout(function () {
          if (!KTCookie.getCookie('kt_app_chat_shown')) {
            var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now

            KTCookie.setCookie('kt_app_chat_shown', 1, {
              expires: expires
            });

            if (KTUtil.getById('kt_app_chat_launch_btn')) {
              KTUtil.getById('kt_app_chat_launch_btn').click();
            }
          }
        }, 2000);
      }
    },
    setup: function setup(element) {
      _init(element);
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutChat;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/demo-panel.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/demo-panel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutDemoPanel = function () {
  // Private properties
  var _element;

  var _offcanvasObject; // Private functions


  var _init = function _init() {
    _offcanvasObject = new KTOffcanvas(_element, {
      overlay: true,
      baseClass: 'offcanvas',
      placement: 'right',
      closeBy: 'kt_demo_panel_close',
      toggleBy: 'kt_demo_panel_toggle'
    });
    var header = KTUtil.find(_element, '.offcanvas-header');
    var content = KTUtil.find(_element, '.offcanvas-content');
    var wrapper = KTUtil.find(_element, '.offcanvas-wrapper');
    var footer = KTUtil.find(_element, '.offcanvas-footer');
    KTUtil.scrollInit(wrapper, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (header) {
          height = height - parseInt(KTUtil.actualHeight(header));
          height = height - parseInt(KTUtil.css(header, 'marginTop'));
          height = height - parseInt(KTUtil.css(header, 'marginBottom'));
        }

        if (content) {
          height = height - parseInt(KTUtil.css(content, 'marginTop'));
          height = height - parseInt(KTUtil.css(content, 'marginBottom'));
        }

        if (wrapper) {
          height = height - parseInt(KTUtil.css(wrapper, 'marginTop'));
          height = height - parseInt(KTUtil.css(wrapper, 'marginBottom'));
        }

        if (footer) {
          height = height - parseInt(KTUtil.actualHeight(footer));
          height = height - parseInt(KTUtil.css(footer, 'marginTop'));
          height = height - parseInt(KTUtil.css(footer, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));
        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));
        height = height - 2;
        return height;
      }
    });

    if (typeof offcanvas !== 'undefined' && offcanvas.length === 0) {
      offcanvas.on('hide', function () {
        var expires = new Date(new Date().getTime() + 60 * 60 * 1000); // expire in 60 minutes from now

        KTCookie.setCookie('kt_demo_panel_shown', 1, {
          expires: expires
        });
      });
    }
  };

  var _remind = function _remind() {
    if (!(encodeURI(window.location.hostname) == 'keenthemes.com' || encodeURI(window.location.hostname) == 'www.keenthemes.com')) {
      return;
    }

    setTimeout(function () {
      if (!KTCookie.getCookie('kt_demo_panel_shown')) {
        var expires = new Date(new Date().getTime() + 15 * 60 * 1000); // expire in 15 minutes from now

        KTCookie.setCookie('kt_demo_panel_shown', 1, {
          expires: expires
        });

        if (typeof _offcanvasObject !== 'undefined') {
          _offcanvasObject.show();
        }
      }
    }, 4000);
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init(); // Remind


      _remind();
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutDemoPanel;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/examples.js":
/*!***********************************************************!*\
  !*** ./resources/metronic/js/layout/extended/examples.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutExamples = function () {
  var initDefaultMode = function initDefaultMode(element) {
    var elements = element;

    if (typeof elements === 'undefined') {
      elements = document.querySelectorAll('.example:not(.example-compact):not(.example-hover):not(.example-basic)');
    }

    for (var i = 0; i < elements.length; ++i) {
      var example = elements[i];
      var copy = KTUtil.find(example, '.example-copy');
      var clipboard = new ClipboardJS(copy, {
        target: function target(trigger) {
          var example = trigger.closest('.example');
          var el = KTUtil.find(example, '.example-code .tab-pane.active');

          if (!el) {
            el = KTUtil.find(example, '.example-code');
          }

          return el;
        }
      });
      clipboard.on('success', function (e) {
        KTUtil.addClass(e.trigger, 'example-copied');
        e.clearSelection();
        setTimeout(function () {
          KTUtil.removeClass(e.trigger, 'example-copied');
        }, 2000);
      });
    }
  };

  var initCompactMode = function initCompactMode(element) {
    var example, code, toggle, copy, clipboard;
    var elements = element;

    if (typeof elements === 'undefined') {
      var elements = document.querySelectorAll('.example.example-compact');
    }

    for (var i = 0; i < elements.length; ++i) {
      var example = elements[i];
      var toggle = KTUtil.find(example, '.example-toggle');
      var copy = KTUtil.find(example, '.example-copy'); // Handle toggle

      KTUtil.addEvent(toggle, 'click', function () {
        var example = this.closest('.example');
        var code = KTUtil.find(example, '.example-code');
        var the = this;

        if (KTUtil.hasClass(this, 'example-toggled')) {
          KTUtil.slideUp(code, 300, function () {
            KTUtil.removeClass(the, 'example-toggled');
            KTUtil.removeClass(code, 'example-code-on');
            KTUtil.hide(code);
          });
        } else {
          KTUtil.addClass(code, 'example-code-on');
          KTUtil.addClass(this, 'example-toggled');
          KTUtil.slideDown(code, 300, function () {
            KTUtil.show(code);
          });
        }
      }); // Handle copy

      var clipboard = new ClipboardJS(copy, {
        target: function target(trigger) {
          var example = trigger.closest('.example');
          var el = KTUtil.find(example, '.example-code .tab-pane.active');

          if (!el) {
            el = KTUtil.find(example, '.example-code');
          }

          return el;
        }
      });
      clipboard.on('success', function (e) {
        KTUtil.addClass(e.trigger, 'example-copied');
        e.clearSelection();
        setTimeout(function () {
          KTUtil.removeClass(e.trigger, 'example-copied');
        }, 2000);
      });
    }
  };

  return {
    init: function init(element, options) {
      initDefaultMode(element);
      initCompactMode(element);
    }
  };
}(); // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTLayoutExamples;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-actions.js":
/*!****************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-actions.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutQuickActions = function () {
  // Private properties
  var _element;

  var _offcanvasObject; // Private functions


  var _init = function _init() {
    var header = KTUtil.find(_element, '.offcanvas-header');
    var content = KTUtil.find(_element, '.offcanvas-content');
    _offcanvasObject = new KTOffcanvas(_element, {
      overlay: true,
      baseClass: 'offcanvas',
      placement: 'right',
      closeBy: 'kt_quick_actions_close',
      toggleBy: 'kt_quick_actions_toggle'
    });
    KTUtil.scrollInit(content, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (header) {
          height = height - parseInt(KTUtil.actualHeight(header));
          height = height - parseInt(KTUtil.css(header, 'marginTop'));
          height = height - parseInt(KTUtil.css(header, 'marginBottom'));
        }

        if (content) {
          height = height - parseInt(KTUtil.css(content, 'marginTop'));
          height = height - parseInt(KTUtil.css(content, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));
        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));
        height = height - 2;
        return height;
      }
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init();
    },
    getElement: function getElement() {
      return _element;
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutQuickActions;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-cart.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-cart.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutQuickCartPanel = function () {
  // Private properties
  var _element;

  var _offcanvasObject; // Private functions


  var _init = function _init() {
    _offcanvasObject = new KTOffcanvas(_element, {
      overlay: true,
      baseClass: 'offcanvas',
      placement: 'right',
      closeBy: 'kt_quick_cart_close',
      toggleBy: 'kt_quick_cart_toggle'
    });
    var header = KTUtil.find(_element, '.offcanvas-header');
    var content = KTUtil.find(_element, '.offcanvas-content');
    var wrapper = KTUtil.find(_element, '.offcanvas-wrapper');
    var footer = KTUtil.find(_element, '.offcanvas-footer');
    KTUtil.scrollInit(wrapper, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (header) {
          height = height - parseInt(KTUtil.actualHeight(header));
          height = height - parseInt(KTUtil.css(header, 'marginTop'));
          height = height - parseInt(KTUtil.css(header, 'marginBottom'));
        }

        if (content) {
          height = height - parseInt(KTUtil.css(content, 'marginTop'));
          height = height - parseInt(KTUtil.css(content, 'marginBottom'));
        }

        if (wrapper) {
          height = height - parseInt(KTUtil.css(wrapper, 'marginTop'));
          height = height - parseInt(KTUtil.css(wrapper, 'marginBottom'));
        }

        if (footer) {
          height = height - parseInt(KTUtil.actualHeight(footer));
          height = height - parseInt(KTUtil.css(footer, 'marginTop'));
          height = height - parseInt(KTUtil.css(footer, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));
        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));
        height = height - 2;
        return height;
      }
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init();
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutQuickCartPanel;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-notifications.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-notifications.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutQuickNotifications = function () {
  // Private properties
  var _element;

  var _offcanvasObject; // Private functions


  var _init = function _init() {
    var header = KTUtil.find(_element, '.offcanvas-header');
    var content = KTUtil.find(_element, '.offcanvas-content');
    _offcanvasObject = new KTOffcanvas(_element, {
      overlay: true,
      baseClass: 'offcanvas',
      placement: 'right',
      closeBy: 'kt_quick_notifications_close',
      toggleBy: 'kt_quick_notifications_toggle'
    });
    KTUtil.scrollInit(content, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (header) {
          height = height - parseInt(KTUtil.actualHeight(header));
          height = height - parseInt(KTUtil.css(header, 'marginTop'));
          height = height - parseInt(KTUtil.css(header, 'marginBottom'));
        }

        if (content) {
          height = height - parseInt(KTUtil.css(content, 'marginTop'));
          height = height - parseInt(KTUtil.css(content, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));
        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));
        height = height - 2;
        return height;
      }
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init();
    },
    getElement: function getElement() {
      return _element;
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutQuickNotifications;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-panel.js":
/*!**************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-panel.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutQuickPanel = function () {
  // Private properties
  var _element;

  var _offcanvasObject;

  var _notificationsElement;

  var _logsElement;

  var _settingsElement; // Private functions


  var _getContentHeight = function _getContentHeight() {
    var height;
    var header = KTUtil.find(_element, '.offcanvas-header');
    var content = KTUtil.find(_element, '.offcanvas-content');
    var height = parseInt(KTUtil.getViewPort().height);

    if (header) {
      height = height - parseInt(KTUtil.actualHeight(header));
      height = height - parseInt(KTUtil.css(header, 'marginTop'));
      height = height - parseInt(KTUtil.css(header, 'marginBottom'));
    }

    if (content) {
      height = height - parseInt(KTUtil.css(content, 'marginTop'));
      height = height - parseInt(KTUtil.css(content, 'marginBottom'));
    }

    height = height - parseInt(KTUtil.css(_element, 'paddingTop'));
    height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));
    height = height - 2;
    return height;
  };

  var _init = function _init() {
    _offcanvasObject = new KTOffcanvas(_element, {
      overlay: true,
      baseClass: 'offcanvas',
      placement: 'right',
      closeBy: 'kt_quick_panel_close',
      toggleBy: 'kt_quick_panel_toggle'
    });
  };

  var _initNotifications = function _initNotifications() {
    KTUtil.scrollInit(_notificationsElement, {
      mobileNativeScroll: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return _getContentHeight();
      }
    });
  };

  var _initLogs = function _initLogs() {
    KTUtil.scrollInit(_logsElement, {
      mobileNativeScroll: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return _getContentHeight();
      }
    });
  };

  var _initSettings = function _initSettings() {
    KTUtil.scrollInit(_settingsElement, {
      mobileNativeScroll: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return _getContentHeight();
      }
    });
  };

  var _updateScrollbars = function _updateScrollbars() {
    $(_element).find('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
      KTUtil.scrollUpdate(_notificationsElement);
      KTUtil.scrollUpdate(_logsElement);
      KTUtil.scrollUpdate(_settingsElement);
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);
      _notificationsElement = KTUtil.getById('kt_quick_panel_notifications');
      _logsElement = KTUtil.getById('kt_quick_panel_logs');
      _settingsElement = KTUtil.getById('kt_quick_panel_settings');

      _init();

      _initNotifications();

      _initLogs();

      _initSettings();

      _updateScrollbars();
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutQuickPanel;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-search.js":
/*!***************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-search.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutQuickSearch = function () {
  // Private properties
  var _element;

  var _offcanvasObject; // Private functions


  var _init = function _init() {
    var header = KTUtil.find(_element, '.offcanvas-header');
    var content = KTUtil.find(_element, '.offcanvas-content');
    var form = KTUtil.find(_element, '.quick-search-form');
    var results = KTUtil.find(_element, '.quick-search-wrapper');
    _offcanvasObject = new KTOffcanvas(_element, {
      overlay: true,
      baseClass: 'offcanvas',
      placement: 'right',
      closeBy: 'kt_quick_search_close',
      toggleBy: 'kt_quick_search_toggle'
    });
    KTUtil.scrollInit(results, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (header) {
          height = height - parseInt(KTUtil.actualHeight(header));
          height = height - parseInt(KTUtil.css(header, 'marginTop'));
          height = height - parseInt(KTUtil.css(header, 'marginBottom'));
        }

        if (content) {
          height = height - parseInt(KTUtil.css(content, 'marginTop'));
          height = height - parseInt(KTUtil.css(content, 'marginBottom'));
        }

        if (results) {
          height = height - parseInt(KTUtil.actualHeight(form));
          height = height - parseInt(KTUtil.css(form, 'marginTop'));
          height = height - parseInt(KTUtil.css(form, 'marginBottom'));
          height = height - parseInt(KTUtil.css(results, 'marginTop'));
          height = height - parseInt(KTUtil.css(results, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));
        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));
        height = height - 2;
        return height;
      }
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init();
    },
    getElement: function getElement() {
      return _element;
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutQuickSearch;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/quick-user.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/quick-user.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutQuickUser = function () {
  // Private properties
  var _element;

  var _offcanvasObject; // Private functions


  var _init = function _init() {
    var header = KTUtil.find(_element, '.offcanvas-header');
    var content = KTUtil.find(_element, '.offcanvas-content');
    _offcanvasObject = new KTOffcanvas(_element, {
      overlay: true,
      baseClass: 'offcanvas',
      placement: 'right',
      closeBy: 'kt_quick_user_close',
      toggleBy: 'kt_quick_user_toggle'
    });
    KTUtil.scrollInit(content, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (header) {
          height = height - parseInt(KTUtil.actualHeight(header));
          height = height - parseInt(KTUtil.css(header, 'marginTop'));
          height = height - parseInt(KTUtil.css(header, 'marginBottom'));
        }

        if (content) {
          height = height - parseInt(KTUtil.css(content, 'marginTop'));
          height = height - parseInt(KTUtil.css(content, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(_element, 'paddingTop'));
        height = height - parseInt(KTUtil.css(_element, 'paddingBottom'));
        height = height - 2;
        return height;
      }
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init();
    },
    getElement: function getElement() {
      return _element;
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutQuickUser;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/scrolltop.js":
/*!************************************************************!*\
  !*** ./resources/metronic/js/layout/extended/scrolltop.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayoutScrolltop = function () {
  // Private properties
  var _element;

  var _object; // Private functions


  var _init = function _init() {
    _object = new KTScrolltop(_element, {
      offset: 300,
      speed: 600
    });
  }; // Public methods


  return {
    init: function init(id) {
      _element = KTUtil.getById(id);

      if (!_element) {
        return;
      } // Initialize


      _init();
    },
    getElement: function getElement() {
      return _element;
    }
  };
}(); // Webpack support


if (true) {
  module.exports = KTLayoutScrolltop;
}

/***/ }),

/***/ "./resources/metronic/js/layout/extended/search.js":
/*!*********************************************************!*\
  !*** ./resources/metronic/js/layout/extended/search.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 //
// Handle User Quick Search For Dropdown, Inline and Offcanvas Search Panels
//

var KTLayoutSearch = function KTLayoutSearch() {
  // Private properties
  var _target;

  var _form;

  var _input;

  var _closeIcon;

  var _resultWrapper;

  var _resultDropdown;

  var _resultDropdownToggle;

  var _closeIconContainer;

  var _inputGroup;

  var _query = '';
  var _hasResult = false;
  var _timeout = false;
  var _isProcessing = false;
  var _requestTimeout = 200; // ajax request fire timeout in milliseconds

  var _spinnerClass = 'spinner spinner-sm spinner-primary';
  var _resultClass = 'quick-search-has-result';
  var _minLength = 2; // Private functions

  var _showProgress = function _showProgress() {
    _isProcessing = true;
    KTUtil.addClass(_closeIconContainer, _spinnerClass);

    if (_closeIcon) {
      KTUtil.hide(_closeIcon);
    }
  };

  var _hideProgress = function _hideProgress() {
    _isProcessing = false;
    KTUtil.removeClass(_closeIconContainer, _spinnerClass);

    if (_closeIcon) {
      if (_input.value.length < _minLength) {
        KTUtil.hide(_closeIcon);
      } else {
        KTUtil.show(_closeIcon, 'flex');
      }
    }
  };

  var _showDropdown = function _showDropdown() {
    if (_resultDropdownToggle && !KTUtil.hasClass(_resultDropdown, 'show')) {
      $(_resultDropdownToggle).dropdown('toggle');
      $(_resultDropdownToggle).dropdown('update');
    }
  };

  var _hideDropdown = function _hideDropdown() {
    if (_resultDropdownToggle && KTUtil.hasClass(_resultDropdown, 'show')) {
      $(_resultDropdownToggle).dropdown('toggle');
    }
  };

  var _processSearch = function _processSearch() {
    if (_hasResult && _query === _input.value) {
      _hideProgress();

      KTUtil.addClass(_target, _resultClass);

      _showDropdown();

      KTUtil.scrollUpdate(_resultWrapper);
      return;
    }

    _query = _input.value;
    KTUtil.removeClass(_target, _resultClass);

    _showProgress();

    _hideDropdown();

    setTimeout(function () {
      $.ajax({
        url: HOST_URL + '',
        data: {
          query: _query
        },
        dataType: 'html',
        success: function success(res) {
          _hasResult = true;

          _hideProgress();

          KTUtil.addClass(_target, _resultClass);
          KTUtil.setHTML(_resultWrapper, res);

          _showDropdown();

          KTUtil.scrollUpdate(_resultWrapper);
        },
        error: function error(res) {
          _hasResult = false;

          _hideProgress();

          KTUtil.addClass(_target, _resultClass);
          KTUtil.setHTML(_resultWrapper, '<span class="font-weight-bold text-muted">Connection error. Please try again later..</div>');

          _showDropdown();

          KTUtil.scrollUpdate(_resultWrapper);
        }
      });
    }, 1000);
  };

  var _handleCancel = function _handleCancel(e) {
    _input.value = '';
    _query = '';
    _hasResult = false;
    KTUtil.hide(_closeIcon);
    KTUtil.removeClass(_target, _resultClass);

    _hideDropdown();
  };

  var _handleSearch = function _handleSearch() {
    if (_input.value.length < _minLength) {
      _hideProgress();

      _hideDropdown();

      return;
    }

    if (_isProcessing == true) {
      return;
    }

    if (_timeout) {
      clearTimeout(_timeout);
    }

    _timeout = setTimeout(function () {
      _processSearch();
    }, _requestTimeout);
  }; // Public methods


  return {
    init: function init(id) {
      _target = KTUtil.getById(id);

      if (!_target) {
        return;
      }

      _form = KTUtil.find(_target, '.quick-search-form');
      _input = KTUtil.find(_target, '.form-control');
      _closeIcon = KTUtil.find(_target, '.quick-search-close');
      _resultWrapper = KTUtil.find(_target, '.quick-search-wrapper');
      _resultDropdown = KTUtil.find(_target, '.dropdown-menu');
      _resultDropdownToggle = KTUtil.find(_target, '[data-toggle="dropdown"]');
      _inputGroup = KTUtil.find(_target, '.input-group');
      _closeIconContainer = KTUtil.find(_target, '.input-group .input-group-append'); // Attach input keyup handler

      KTUtil.addEvent(_input, 'keyup', _handleSearch);
      KTUtil.addEvent(_input, 'focus', _handleSearch); // Prevent enter click

      _form.onkeypress = function (e) {
        var key = e.charCode || e.keyCode || 0;

        if (key == 13) {
          e.preventDefault();
        }
      };

      KTUtil.addEvent(_closeIcon, 'click', _handleCancel);
    }
  };
}; // Webpack support


if (true) {
  module.exports = KTLayoutSearch;
}

var KTLayoutSearchInline = KTLayoutSearch;
var KTLayoutSearchOffcanvas = KTLayoutSearch;

/***/ }),

/***/ "./resources/metronic/js/layout/initialize.js":
/*!****************************************************!*\
  !*** ./resources/metronic/js/layout/initialize.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Initialization

KTUtil.ready(function () {
  ////////////////////////////////////////////////////
  // Layout Base Partials(mandatory for core layout)//
  ////////////////////////////////////////////////////
  // Init Desktop & Mobile Headers
  KTLayoutHeader.init('kt_header', 'kt_header_mobile'); // Init Header Menu

  KTLayoutHeaderMenu.init('kt_header_menu', 'kt_header_menu_wrapper'); // Init Header Topbar For Mobile Mode

  KTLayoutHeaderTopbar.init('kt_header_mobile_topbar_toggle'); // Init Brand Panel For Logo

  KTLayoutBrand.init('kt_brand'); // Init Aside

  KTLayoutAside.init('kt_aside'); // Init Aside Menu Toggle

  KTLayoutAsideToggle.init('kt_aside_toggle'); // Init Aside Menu

  KTLayoutAsideMenu.init('kt_aside_menu'); // Init Subheader

  KTLayoutSubheader.init('kt_subheader'); // Init Content

  KTLayoutContent.init('kt_content'); // Init Footer

  KTLayoutFooter.init('kt_footer'); //////////////////////////////////////////////
  // Layout Extended Partials(optional to use)//
  //////////////////////////////////////////////
  // Init Scrolltop

  KTLayoutScrolltop.init('kt_scrolltop'); // Init Sticky Card

  KTLayoutStickyCard.init('kt_page_sticky_card'); // Init Stretched Card

  KTLayoutStretchedCard.init('kt_page_stretched_card'); // Init Code Highlighter & Preview Blocks(used to demonstrate the theme features)

  KTLayoutExamples.init(); // Init Demo Selection Panel

  KTLayoutDemoPanel.init('kt_demo_panel'); // Init Chat App(quick modal chat)

  KTLayoutChat.init(); // Init Quick Actions Offcanvas Panel

  KTLayoutQuickActions.init('kt_quick_actions'); // Init Quick Notifications Offcanvas Panel

  KTLayoutQuickNotifications.init('kt_quick_notifications'); // Init Quick Offcanvas Panel

  KTLayoutQuickPanel.init('kt_quick_panel'); // Init Quick User Panel

  KTLayoutQuickUser.init('kt_quick_user'); // Init Quick Search Panel

  KTLayoutQuickSearch.init('kt_quick_search'); // Init Quick Cart Panel

  KTLayoutQuickCartPanel.init('kt_quick_cart'); // Init Search For Quick Search Dropdown

  KTLayoutSearch().init('kt_quick_search_dropdown'); // Init Search For Quick Search Offcanvas Panel

  KTLayoutSearchOffcanvas().init('kt_quick_search_offcanvas');
});

/***/ }),

/***/ 2:
/*!***************************************!*\
  !*** multi ./resources/js/scripts.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Applications/MAMP/htdocs/spreadci4/public/admin/themes/metronic/resources/js/scripts.js */"./resources/js/scripts.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3NjcmlwdHMuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2NvbXBvbmVudHMvYXBwLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL2NhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2NvbXBvbmVudHMvY29va2llLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL2RhdGF0YWJsZS9jb3JlLmRhdGF0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLmNoZWNrYm94LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL2RhdGF0YWJsZS9kYXRhdGFibGUucnRsLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL2RpYWxvZy5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9oZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2NvbXBvbmVudHMvaW1hZ2UtaW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2NvbXBvbmVudHMvbWVudS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy9vZmZjYW52YXMuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2NvbXBvbmVudHMvc2Nyb2xsdG9wLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL3RvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvY29tcG9uZW50cy91dGlsLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9jb21wb25lbnRzL3dpemFyZC5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtbWVudS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtdG9nZ2xlLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9hc2lkZS5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYnJhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2NvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2Zvb3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvaGVhZGVyLW1lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci10b3BiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2Uvc3RpY2t5LWNhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N0cmV0Y2hlZC1jYXJkLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9zdWJoZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9jaGF0LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvZGVtby1wYW5lbC5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL2V4YW1wbGVzLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWNhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1ub3RpZmljYXRpb25zLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stcGFuZWwuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay1zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9xdWljay11c2VyLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvc2Nyb2xsdG9wLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvc2VhcmNoLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9tZXRyb25pYy9qcy9sYXlvdXQvaW5pdGlhbGl6ZS5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJLVFV0aWwiLCJyZXF1aXJlIiwiS1RBcHAiLCJLVENhcmQiLCJLVENvb2tpZSIsIktURGlhbG9nIiwiS1RIZWFkZXIiLCJLVEltYWdlSW5wdXQiLCJLVE1lbnUiLCJLVE9mZmNhbnZhcyIsIktUU2Nyb2xsdG9wIiwiS1RUb2dnbGUiLCJLVFdpemFyZCIsIktUTGF5b3V0QXNpZGUiLCJLVExheW91dEFzaWRlTWVudSIsIktUTGF5b3V0QXNpZGVUb2dnbGUiLCJLVExheW91dEJyYW5kIiwiS1RMYXlvdXRDb250ZW50IiwiS1RMYXlvdXRGb290ZXIiLCJLVExheW91dEhlYWRlciIsIktUTGF5b3V0SGVhZGVyTWVudSIsIktUTGF5b3V0SGVhZGVyVG9wYmFyIiwiS1RMYXlvdXRTdGlja3lDYXJkIiwiS1RMYXlvdXRTdHJldGNoZWRDYXJkIiwiS1RMYXlvdXRTdWJoZWFkZXIiLCJLVExheW91dENoYXQiLCJLVExheW91dERlbW9QYW5lbCIsIktUTGF5b3V0RXhhbXBsZXMiLCJLVExheW91dFF1aWNrQWN0aW9ucyIsIktUTGF5b3V0UXVpY2tDYXJ0UGFuZWwiLCJLVExheW91dFF1aWNrTm90aWZpY2F0aW9ucyIsIktUTGF5b3V0UXVpY2tQYW5lbCIsIktUTGF5b3V0UXVpY2tTZWFyY2giLCJLVExheW91dFF1aWNrVXNlciIsIktUTGF5b3V0U2Nyb2xsdG9wIiwiS1RMYXlvdXRTZWFyY2giLCJLVExheW91dFNlYXJjaE9mZmNhbnZhcyIsInNldHRpbmdzIiwiaW5pdFRvb2x0aXAiLCJlbCIsInRoZW1lIiwiZGF0YSIsIndpZHRoIiwidHJpZ2dlciIsIiQiLCJ0b29sdGlwIiwidGVtcGxhdGUiLCJpbml0VG9vbHRpcHMiLCJlYWNoIiwiaW5pdFBvcG92ZXIiLCJza2luIiwidHJpZ2dlclZhbHVlIiwicG9wb3ZlciIsImluaXRQb3BvdmVycyIsImluaXRGaWxlSW5wdXQiLCJvbiIsImZpbGVOYW1lIiwidmFsIiwibmV4dCIsImFkZENsYXNzIiwiaHRtbCIsImluaXRTY3JvbGwiLCJzY3JvbGxJbml0IiwibW9iaWxlTmF0aXZlU2Nyb2xsIiwiaGFuZGxlV2luZG93UmVzaXplIiwicmVtZW1iZXJQb3NpdGlvbiIsImhlaWdodCIsImlzQnJlYWtwb2ludERvd24iLCJpbml0QWxlcnRzIiwiY2xvc2VzdCIsImhpZGUiLCJpbml0Q2FyZCIsIm9wdGlvbnMiLCJjYXJkIiwiaW5pdENhcmRzIiwiaW5pdFN0aWNreUNhcmQiLCJTdGlja3kiLCJzdGlja3kiLCJpbml0QWJzb2x1dGVEcm9wZG93biIsImNvbnRleHQiLCJkcm9wZG93bk1lbnUiLCJlIiwidGFyZ2V0IiwiZmluZCIsImFwcGVuZCIsImRldGFjaCIsImNzcyIsInBvc2l0aW9uIiwicmVsYXRlZFRhcmdldCIsImluaXRBYnNvbHV0ZURyb3Bkb3ducyIsIiR0b2dnbGVyIiwibGVuZ3RoIiwiJGRyb3Bkb3duTWVudSIsIiRkZXRhY2hlZERyb3Bkb3duTWVudSIsIm15IiwiYXQiLCJvZiIsImluaXQiLCJzZXR0aW5nc0FycmF5IiwiaW5pdENvbXBvbmVudHMiLCJpbml0U3RpY2t5IiwiYmxvY2siLCJleHRlbmQiLCJvcGFjaXR5Iiwib3ZlcmxheUNvbG9yIiwidHlwZSIsInNpemUiLCJzdGF0ZSIsImNlbnRlclgiLCJjZW50ZXJZIiwibWVzc2FnZSIsInNoYWRvdyIsInZlcnNpb24iLCJzcGlubmVyIiwiY2xhc3NlcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInByZXBlbmQiLCJpbm5lckhUTUwiLCJhY3R1YWxXaWR0aCIsInJlbW92ZSIsInBhcmFtcyIsInRvcCIsImxlZnQiLCJib3JkZXIiLCJwYWRkaW5nIiwiYmFja2dyb3VuZENvbG9yIiwib3ZlcmxheUNTUyIsImN1cnNvciIsInpJbmRleCIsIm9uVW5ibG9jayIsImJsb2NrVUkiLCJ1bmJsb2NrIiwidW5ibG9ja1VJIiwiYmxvY2tQYWdlIiwidW5ibG9ja1BhZ2UiLCJnZXRTZXR0aW5ncyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZWFkeSIsIktUQXBwU2V0dGluZ3MiLCJlbGVtZW50SWQiLCJ0aGUiLCJlbGVtZW50IiwiZ2V0QnlJZCIsImJvZHkiLCJnZXRCb2R5IiwiZGVmYXVsdE9wdGlvbnMiLCJ0b2dnbGVTcGVlZCIsInJlbGVzZU9uUmV2ZXJzZSIsIm9mZnNldCIsIlBsdWdpbiIsImNvbnN0cnVjdCIsImhhcyIsImdldCIsImJ1aWxkIiwic2V0IiwiZXZlbnRzIiwiZGVlcEV4dGVuZCIsImhlYWRlciIsImNoaWxkIiwiZm9vdGVyIiwiYWRkRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInJlbG9hZCIsInRvZ2dsZSIsImxhc3RTY3JvbGxUb3AiLCJhZGRFdmVudExpc3RlbmVyIiwib25TY3JvbGxTdGlja3kiLCJpc05hTiIsInN0IiwiZ2V0U2Nyb2xsVG9wIiwiaGFzQ2xhc3MiLCJldmVudFRyaWdnZXIiLCJ1cGRhdGVTdGlja3kiLCJyZW1vdmVDbGFzcyIsInJlc2V0U3RpY2t5IiwiRnVuY3Rpb24iLCJwYXJzZUludCIsImNhbGwiLCJyaWdodCIsInNldENvbnRlbnQiLCJnZXRTZWxmIiwiZXhwYW5kIiwiY29sbGFwc2UiLCJzbGlkZVVwIiwic2xpZGVEb3duIiwibmFtZSIsImkiLCJldmVudCIsIm9uZSIsImZpcmVkIiwiaGFuZGxlciIsInB1c2giLCJzZXREZWZhdWx0cyIsImRlc3Ryb3lTdGlja3kiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYXBwbHkiLCJnZXRDb29raWUiLCJtYXRjaGVzIiwiY29va2llIiwibWF0Y2giLCJSZWdFeHAiLCJyZXBsYWNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidW5kZWZpbmVkIiwic2V0Q29va2llIiwidmFsdWUiLCJPYmplY3QiLCJhc3NpZ24iLCJwYXRoIiwiZXhwaXJlcyIsIkRhdGUiLCJ0b1VUQ1N0cmluZyIsInVwZGF0ZWRDb29raWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJvcHRpb25LZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm9wdGlvblZhbHVlIiwiZGVsZXRlQ29va2llIiwicGx1Z2luTmFtZSIsInBmeCIsInV0aWwiLCJhcHAiLCJFcnJvciIsImZuIiwiY29uc29sZSIsIndhcm4iLCJkYXRhdGFibGUiLCJkZWJ1ZyIsIkFQSSIsInJlY29yZCIsImlzSW5pdCIsImNlbGxPZmZzZXQiLCJpY29uT2Zmc2V0Iiwic3RhdGVJZCIsImFqYXhQYXJhbXMiLCJwYWdpbmdPYmplY3QiLCJpc0h0bWxUYWJsZSIsInNvdXJjZSIsImV4dHJhY3RUYWJsZSIsInNldHVwQmFzZURPTSIsInNldHVwRE9NIiwidGFibGUiLCJhZnRlclJlbmRlciIsInN0YXRlUmVtb3ZlIiwic2V0RGF0YVNvdXJjZVF1ZXJ5IiwiZ2V0T3B0aW9uIiwiZXh0TmFtZSIsImV4dE9wdGlvbnMiLCJzcGlubmVyQ2FsbGJhY2siLCJzYXZlU3RhdGUiLCJkYXRhU2V0Iiwib3JpZ2luYWxEYXRhU2V0IiwiZGF0YU1hcENhbGxiYWNrIiwiZGF0YVJlbmRlciIsInRhYmxlSGVhZCIsInRhYmxlRm9vdCIsInNldEhlYWRUaXRsZSIsImxheW91dCIsInNldHVwQ2VsbEZpZWxkIiwic2V0dXBUZW1wbGF0ZUNlbGwiLCJzZXR1cFN1YkRhdGF0YWJsZSIsInNldHVwU3lzdGVtQ29sdW1uIiwicmVkcmF3IiwiaW5pdGlhbFdpZHRoIiwicmVzaXplIiwiZnVsbFJlbmRlciIsInByZXZLZXl3b3JkIiwid2hpY2giLCJrZXl3b3JkIiwic2VhcmNoIiwiY29sdW1ucyIsImhlYWRlcnMiLCJtYXAiLCJjZWxsIiwiZmllbGQiLCJ0aXRsZSIsInRleHQiLCJ0cmltIiwiY29sdW1uIiwiaWkiLCJyb3dQcm9wIiwicHJvcCIsInRkIiwiaXNFbXB0eSIsImF0dHIiLCJyb3dQcm9wcyIsImxheW91dFVwZGF0ZSIsInNldHVwSG92ZXIiLCJkZXRhaWwiLCJnZXREZXB0aCIsImxvY2tUYWJsZSIsInJlc2V0U2Nyb2xsIiwiaXNMb2NrZWQiLCJpc1N1YnRhYmxlIiwiYXV0b0hpZGUiLCJjb2x1bW5IaWRlIiwicm93RXZlbk9kZCIsInNvcnRpbmciLCJzY3JvbGxiYXIiLCJkcm9wZG93bkZpeCIsIndyYXAiLCJsb2NrIiwibG9ja0VuYWJsZWQiLCJsb2NrRW5hYmxlZENvbHVtbnMiLCJlbmFibGUiLCJlbmFibGVMb2NrIiwidGFibGVQYXJ0IiwibG9nIiwibG9ja0xlZnQiLCJsb2NrU2Nyb2xsIiwibG9ja1JpZ2h0Iiwicm93TGVmdCIsImFwcGVuZFRvIiwicm93U2Nyb2xsIiwicm93UmlnaHQiLCJsb2NrZWQiLCJlbXB0eSIsImluc2VydERhdGEiLCJzY3JlZW4iLCJlbmFibGVkIiwiZ2V0QnJlYWtwb2ludCIsImFyZ3MiLCJ0YWJsZUJvZHkiLCJob3ZlclRpbWVyIiwiaXNTY3JvbGxpbmciLCJzY3JvbGwiLCJjbGVhclRpbWVvdXQiLCJvZmYiLCJzZXRUaW1lb3V0Iiwicm93IiwiaW5kZXgiLCJwYXJlbnQiLCJhZGp1c3RMb2NrQ29udGFpbmVyIiwiY29udGFpbmVyV2lkdGgiLCJNYXRoIiwiZmxvb3IiLCJkcmFnUmVzaXplIiwicHJlc3NlZCIsInN0YXJ0Iiwic3RhcnRYIiwic3RhcnRXaWR0aCIsIm1vdXNlZG93biIsInBhZ2VYIiwibW91c2Vtb3ZlIiwiaWZMb2NrZWQiLCJsb2NrZWRJbmRleCIsImVxIiwidHJpIiwidHIiLCJjaGlsZHJlbiIsIm1vdXNldXAiLCJpbml0SGVpZ2h0IiwidGhlYWRIZWlnaHQiLCJvdXRlckhlaWdodCIsInRmb290SGVpZ2h0IiwiYm9keUhlaWdodCIsInBhcnNlRmxvYXQiLCJpbml0aWFsRGF0YXRhYmxlIiwiY2xvbmUiLCJwYXJlbnRzIiwic2V0T3B0aW9uIiwiZ2V0VW5pcXVlSUQiLCJwcmVwZW5kVG8iLCJ0YWJsZVBhcnRzIiwicGFydCIsInRkaSIsIm9iaiIsInJvd0NhbGxiYWNrIiwiYmVmb3JlVGVtcGxhdGUiLCJncmVwIiwibiIsImZpbmFsVmFsdWUiLCJkYXRhUGxhY2Vob2xkZXIiLCJET01QdXJpZnkiLCJzYW5pdGl6ZSIsInNwYW4iLCJvdmVyZmxvdyIsImFmdGVyVGVtcGxhdGUiLCJzZWxlY3RvciIsImNoayIsImlzIiwic2V0QWN0aXZlIiwic2V0SW5hY3RpdmUiLCJzdWJ0YWJsZSIsImluaXRDaGVja2JveCIsInNldEFjdGl2ZUFsbCIsImZpcnN0IiwibWF4V2lkdGhMaXN0IiwiYWRqdXN0Q2VsbHNXaWR0aCIsImlubmVyV2lkdGgiLCJub3QiLCJtaW5XaWR0aCIsImRhdGFXaWR0aCIsImNlbGxzIiwibWF4Iiwib3V0ZXJXaWR0aCIsImNlaWwiLCJhZGp1c3RDZWxsc0hlaWdodCIsInRvdGFsUm93cyIsInJvd3MiLCJtYXhIZWlnaHQiLCJ3cmFwSW5uZXIiLCJzY3JvbGxhYmxlIiwidGFibGVMb2NrZWQiLCJpbml0UG9zaXRpb24iLCJnZXRWaWV3UG9ydCIsInNjcm9sbEhlYWQiLCJzY3JvbGxGb290IiwiZGV0ZWN0SUUiLCJpbml0Q3VzdG9tU2Nyb2xsYmFyIiwiaW5pdERlZmF1bHRTY3JvbGxiYXIiLCJzY3JvbGxMZWZ0Iiwib25TY3JvbGxpbmciLCJzY3JvbGxUb3AiLCJpc1JUTCIsImluaXRTY3JvbGxiYXIiLCJub2RlTmFtZSIsInBzIiwidXBkYXRlIiwiUGVyZmVjdFNjcm9sbGJhciIsIndoZWVsU3BlZWQiLCJzd2lwZUVhc2luZyIsIm1pblNjcm9sbGJhckxlbmd0aCIsIm1heFNjcm9sbGJhckxlbmd0aCIsInN1cHByZXNzU2Nyb2xsWCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGhzIiwiYXBwZW5kQ2hpbGQiLCJ0aCIsInNldEF0dHJpYnV0ZSIsImtleSIsInRleHRBbGlnbiIsImFsaWduIiwiYWN0aW9uIiwic2libGluZ3MiLCJidWlsZE1ldGEiLCJsb2NhbERhdGFVcGRhdGUiLCJtZXRhIiwiZ2V0RGF0YVNvdXJjZVBhcmFtIiwicGVycGFnZSIsInBhZ2VTaXplIiwidG90YWwiLCJwYWdlIiwiZW5kIiwibWluIiwic2xpY2UiLCJhZnRlckdldERhdGEiLCJyZXN1bHQiLCJsb2NhbFBhZ2luZ0NhbGxiYWNrIiwiY3R4IiwicGFnZXIiLCJwYWdpbmF0aW9uIiwic2VydmVyUGFnaW5nIiwic2VydmVyTWV0YSIsImdldE9iamVjdCIsInBhZ2luZyIsInNlcnZlclNvcnRpbmciLCJzZXJ2ZXJGaWx0ZXJpbmciLCJzZXRBdXRvQ29sdW1ucyIsImdldERhdGEiLCJkb25lIiwicGFnZXMiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJjb2xMZW5ndGgiLCJyb3dJbmRleCIsImNlbGxJbmRleCIsInRkcyIsImEiLCJqb2luIiwiZXJyb3JTcGFuIiwicmVwbGFjZVdpdGgiLCJ1cGRhdGVUYWJsZUNvbXBvbmVudHMiLCJkYXRhVHlwZSIsIm1ldGhvZCIsInRpbWVvdXQiLCJ1cmwiLCJhamF4IiwicmVzcG9uc2UiLCJ0ZXh0U3RhdHVzIiwianFYSFIiLCJsYXN0UmVzcG9uc2UiLCJmYWlsIiwiZXJyb3JUaHJvd24iLCJhbHdheXMiLCJjYWxsYmFjayIsInBnIiwicGFnaW5hdGVFdmVudCIsInBhZ2VyTGF5b3V0IiwiaW5mbyIsImdldFRhYmxlUHJlZml4Iiwic2V0RGF0YVNvdXJjZVBhcmFtIiwic2VydmVyQ2FsbGJhY2siLCJhZGRQYWdpbmF0ZUV2ZW50IiwicG9wdWxhdGUiLCJwYWdpbmdCcmVha3BvaW50IiwiaWNvbnMiLCJwYWdlck51bWJlciIsImdvdG9Nb3JlUGFnZSIsInByZXYiLCJtb3JlIiwiaW5wdXQiLCJhYnMiLCJwYWdlc051bWJlciIsIngiLCJwYWdlTnVtYmVyIiwiZ290b1BhZ2UiLCJsYXN0IiwicGFnZVNpemVTZWxlY3QiLCJ1cGRhdGVQZXJwYWdlIiwicGFnZVNpemVzIiwiZGlzcGxheSIsInNlbGVjdHBpY2tlciIsInBhc3RlIiwidW5pcXVlIiwiaW5zZXJ0QWZ0ZXIiLCJpbnNlcnRCZWZvcmUiLCJvcGVuUGFnZSIsIm9yaWdpbmFsRXZlbnQiLCJ1cGRhdGVJbmZvIiwiY3VycmVudFBhZ2UiLCJnZXRDdXJyZW50UGFnZSIsInBhZ2VySW5wdXQiLCJzaG93IiwibW9kZSIsIm9wdGlvbiIsImlzSW5SZXNwb25zaXZlUmFuZ2UiLCJwYWdpbmF0aW9uVXBkYXRlIiwicGFnZXJNb3JlUHJldiIsInBhZ2VyTW9yZU5leHQiLCJwYWdlckZpcnN0IiwicGFnZXJQcmV2IiwicGFnZXJOZXh0IiwicGFnZXJMYXN0IiwibW9yZVByZXZQYWdlIiwibW9yZU5leHRQYWdlIiwicmVtb3ZlQXR0ciIsIm5hdiIsInJlc3BvbnNpdmUiLCJ2aXNpYmxlIiwic3ViVGFibGVDYWxsYmFjayIsInRvZ2dsZVN1YlRhYmxlIiwicGFyZW50Um93Iiwic3ViVGFibGVSb3ciLCJnZXRUb3RhbENvbHVtbnMiLCJhZnRlciIsInN1YlRhYmxlIiwicHJpbWFyeUtleSIsImljb24iLCJkZXRhaWxDZWxsIiwicmF3IiwiaXNTcGlubmluZyIsInNwaW5uZXJPcHRpb25zIiwic29ydENhbGxiYWNrIiwic29ydCIsImZvcm1hdCIsImIiLCJhRmllbGQiLCJiRmllbGQiLCJtb21lbnQiLCJkaWZmIiwiTnVtYmVyIiwiaGlkZGVuRXhpc3QiLCJoaWREZWZhdWx0IiwidG9nZ2xlSGlkZGVuQ29sdW1ucyIsImRldGFpbFJvdyIsImhpZGRlbkNlbGxzIiwiY2xvbmVkQ2VsbHMiLCJkZXRhaWxSb3dUZCIsImRldGFpbFN1YlRhYmxlIiwicmVjdXJzaXZlIiwib2Zmc2V0V2lkdGgiLCJzY3JvbGxXaWR0aCIsImsiLCJ2IiwiZm91bmQiLCJnZXRFeHRyYVNwYWNlIiwibWFyZ2luIiwiZ2V0VGFibGVJZCIsInN1ZmZpeCIsImlkIiwic3BsaXQiLCJkZXB0aCIsInN0YXRlS2VlcCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5Iiwic3RhdGVHZXQiLCJkZWZWYWx1ZSIsImdldEl0ZW0iLCJwYXJzZSIsInN0YXRlVXBkYXRlIiwib3JpIiwicmVtb3ZlSXRlbSIsImdldE9uZVJvdyIsInRkT25seSIsInNvcnRDb2x1bW4iLCJpbnQiLCJoSW5kZXgiLCJjb250YWluZXIiLCJ0ZGEiLCJ0ZGIiLCJzb3J0T2JqIiwic29ydGFibGUiLCJzb3J0Q2xpY2siLCJzZXRJY29uIiwiaXNFbXB0eU9iamVjdCIsImdldENvbHVtbkJ5RmllbGQiLCJxdWVyeSIsIm5lc3RlZFNlYXJjaCIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsImdldEdlbmVyYWxTZWFyY2hLZXkiLCJmaWx0ZXJBcnJheSIsImZpbHRlciIsImxpc3QiLCJvcGVyYXRvciIsInRvVXBwZXJDYXNlIiwiaW5BcnJheSIsImNvdW50Iiwia2V5cyIsImZpbHRlcmVkIiwidG9fbWF0Y2giLCJtYXRjaGVkIiwibV9rZXkiLCJtX3ZhbHVlIiwiQXJyYXkiLCJtYXRjaF9wcm9wZXJ0eSIsImxocyIsInRvU3RyaW5nIiwiZm9yRWFjaCIsIml0ZW0iLCJnZXREZWZhdWx0U29ydENvbHVtbiIsImdldEhpZGRlbkRpbWVuc2lvbnMiLCJpbmNsdWRlTWFyZ2luIiwicHJvcHMiLCJkaW0iLCJpbm5lckhlaWdodCIsImhpZGRlblBhcmVudHMiLCJhZGRCYWNrIiwib2xkUHJvcHMiLCJvbGQiLCJzZWFyY2hJbnB1dCIsIm9iamVjdCIsInJlZHVjZSIsImV4dGVuZE9iaiIsImxldmVscyIsImNyZWF0ZUxldmVsIiwidGltZXIiLCJsb2FkIiwiZGVsYXkiLCJtcyIsImdldFJlY29yZCIsInJvd051bWJlciIsImdldENvbHVtbiIsImNvbHVtbk5hbWUiLCJzZXRTZWxlY3RlZFJlY29yZHMiLCJkZXN0cm95Iiwibm9kZVRyIiwibm9kZVRkIiwibm9kZUNvbHMiLCJyZWNlbnROb2RlIiwiZ2V0VmFsdWUiLCJpZHMiLCJhY3RpdmUiLCJjaGVja2JveGVzIiwiZ2V0U2VsZWN0ZWRSZWNvcmRzIiwibm9kZXMiLCJtYWtlQXJyYXkiLCJnZXREYXRhU291cmNlUXVlcnkiLCJwYXJhbSIsImdldFBhZ2VTaXplIiwiZ2V0VG90YWxSb3dzIiwiZ2V0RGF0YVNldCIsImJvb2wiLCJzY3JvbGxDb2x1bW5zIiwiZGF0YXNldCIsImZ1bmNOYW1lIiwiZnVuYyIsInByb3RvdHlwZSIsImFyZ3VtZW50cyIsImNlbnRlciIsImRlZmF1bHRzIiwiZXJyb3IiLCJhdXRvQ29sdW1ucyIsIm1pbkhlaWdodCIsImN1c3RvbVNjcm9sbGJhciIsImFzYyIsImRlc2MiLCJyb3dEZXRhaWwiLCJyZXNpemFibGUiLCJmaWx0ZXJhYmxlIiwiZWRpdGFibGUiLCJvbkVudGVyIiwidG9vbGJhciIsInBsYWNlbWVudCIsIml0ZW1zIiwiZGVza3RvcCIsInRhYmxldCIsIm1vYmlsZSIsIm5hdmlnYXRpb24iLCJ0cmFuc2xhdGUiLCJyZWNvcmRzIiwicHJvY2Vzc2luZyIsIm5vUmVjb3JkcyIsInNlbGVjdCIsImFsbCIsImV4dGVuc2lvbnMiLCJqUXVlcnkiLCJjaGVja2JveCIsIkV4dGVuc2lvbiIsInNlbGVjdGVkQWxsUm93cyIsInNlbGVjdGVkUm93cyIsInVuc2VsZWN0ZWRSb3dzIiwic2VsZWN0b3JFbmFibGVkIiwidmFycyIsInJlcXVlc3RJZHMiLCJpbml0VmFycyIsImluaXRFdmVudCIsImluaXRTZWxlY3QiLCJzdG9yYWdlIiwiY2xpY2siLCJzZWxmIiwiZ2V0U2VsZWN0ZWRJZCIsInJvd0lkcyIsImFycmF5IiwiS1REYXRhdGFibGUiLCJzZXRIVE1MIiwic2hvd24iLCJoaWRkZW4iLCJ0YWJsZXRBbmRNb2JpbGUiLCJldmVudFRyaWdnZXJTdGF0ZSIsImF0dHJOYW1lIiwiaXNCcmVha3BvaW50VXAiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJlZGl0TW9kZSIsIndyYXBwZXIiLCJjYW5jZWwiLCJzcmMiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNEYXRhVVJMIiwiYWNjb3JkaW9uIiwic2xpZGVTcGVlZCIsImF1dG9TY3JvbGwiLCJhdXRvU2Nyb2xsU3BlZWQiLCJleHBhbmRBbGwiLCJkcm9wZG93biIsInJlc2V0IiwiZXZlbnRIYW5kbGVycyIsInBhdXNlRHJvcGRvd25Ib3ZlclRpbWUiLCJ1aWQiLCJyZXNldFN1Ym1lbnVQcm9wcyIsImhhbmRsZVN1Ym1lbnVBY2NvcmRpb24iLCJnZXRTdWJtZW51TW9kZSIsImlzQ29uZGl0aW9uYWxTdWJtZW51RHJvcGRvd24iLCJoYW5kbGVTdWJtZW51RHJvZG93bkhvdmVyRW50ZXIiLCJoYW5kbGVTdWJtZW51RHJvZG93bkhvdmVyRXhpdCIsImhhbmRsZVN1Ym1lbnVEcm9wZG93bkNsaWNrIiwiaGFuZGxlU3VibWVudURyb3Bkb3duVGFiQ2xpY2siLCJoYW5kbGVMaW5rQ2xpY2siLCJzY3JvbGxEZXN0cm95Iiwid2luZG93U2Nyb2xsIiwicmVzZXRIZWlnaHRPbkRlc3Ryb3kiLCJzY3JvbGxVcGRhdGUiLCJoYXNBdHRyIiwiaXNzZXQiLCJzdWJtZW51IiwiaGFzQ2xhc3NlcyIsInN1Ym1lbnVzIiwiZmluZEFsbCIsImxlbiIsImdldEF0dHJpYnV0ZSIsInJlc3VtZURyb3Bkb3duSG92ZXIiLCJzaG93U3VibWVudURyb3Bkb3duIiwidGltZSIsImhpZGVTdWJtZW51RHJvcGRvd24iLCJoaWRlU3VibWVudURyb3Bkb3ducyIsImhhbmRsZVN1Ym1lbnVEcm9wZG93bkNsb3NlIiwicXVlcnlTZWxlY3RvckFsbCIsImxpIiwic3BlZWQiLCJoYXNDbG9zYWJsZXMiLCJzdWJuYXYiLCJjbG9zYWJsZXMiLCJlbF8iLCJzdWJtZW51XyIsInNjcm9sbFRvSXRlbSIsInNjcm9sbFRvIiwiY2xhc3NBbHNvIiwiaiIsImNudCIsImNvbnRhaW5zIiwiaXNPZmZzY3JlZW4iLCJjcmVhdGVTdWJtZW51RHJvcGRvd25DbGlja0Ryb3BvZmYiLCJkcm9wb2ZmIiwic3RvcFByb3BhZ2F0aW9uIiwicGF1c2VEcm9wZG93bkhvdmVyIiwiZGF0ZSIsImdldFRpbWUiLCJyZXNldEFjdGl2ZUl0ZW0iLCJpXyIsImxlbl8iLCJzZXRBY3RpdmVJdGVtIiwiZ2V0QnJlYWRjcnVtYnMiLCJicmVhZGNydW1icyIsImxpbmsiLCJocmVmIiwic3VibWVudUxpbmsiLCJyZXZlcnNlIiwiZ2V0UGFnZVRpdGxlIiwicmVtb3ZlRXZlbnQiLCJzY3JvbGxSZUluaXQiLCJoaWRlRHJvcGRvd24iLCJoaWRlRHJvcGRvd25zIiwiYWRkUmVzaXplSGFuZGxlciIsImdldEJ5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJhdHRyQ3VzdG9tIiwiY2xhc3NCYXNlIiwiYmFzZUNsYXNzIiwiY2xhc3NTaG93biIsImNsYXNzT3ZlcmxheSIsInRvZ2dsZUJ5IiwiY2xvc2VCeSIsImlzU2hvd24iLCJ0b2dnbGVDbGFzcyIsImNsYXNzQ3VzdG9tIiwib3ZlcmxheSIsInRocm90dGxlIiwiaGFuZGxlIiwicG9zIiwidGFyZ2V0VG9nZ2xlTW9kZSIsInRhcmdldFN0YXRlIiwidG9nZ2xlU3RhdGUiLCJ0b2dnbGVPbiIsInRvZ2dsZU9mZiIsImdldFN0YXRlIiwiRWxlbWVudCIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicyIsImFuY2VzdG9yIiwiZG9jdW1lbnRFbGVtZW50IiwicGFyZW50RWxlbWVudCIsImVsZW0iLCJyZW1vdmVDaGlsZCIsImxhc3RUaW1lIiwidmVuZG9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiY3VyclRpbWUiLCJ0aW1lVG9DYWxsIiwiYXJyIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJhcmdBcnIiLCJkb2NGcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImFyZ0l0ZW0iLCJpc05vZGUiLCJOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJTdHJpbmciLCJmaXJzdENoaWxkIiwiRG9jdW1lbnQiLCJEb2N1bWVudEZyYWdtZW50IiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJhdHRyaWJ1dGVzIiwiS1RVdGlsRWxlbWVudERhdGFTdG9yZSIsIktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCIsIktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnMiLCJyZXNpemVIYW5kbGVycyIsImJyZWFrcG9pbnRzIiwic20iLCJtZCIsImxnIiwieGwiLCJfd2luZG93UmVzaXplSGFuZGxlciIsIl9ydW5SZXNpemVIYW5kbGVycyIsInJlbW92ZVJlc2l6ZUhhbmRsZXIiLCJydW5SZXNpemVIYW5kbGVycyIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImV2dCIsImNyZWF0ZUV2ZW50IiwiaW5pdFVJRXZlbnQiLCJnZXRVUkxQYXJhbSIsInBhcmFtTmFtZSIsInNlYXJjaFN0cmluZyIsImxvY2F0aW9uIiwic3Vic3RyaW5nIiwidW5lc2NhcGUiLCJpc01vYmlsZURldmljZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0Rlc2t0b3BEZXZpY2UiLCJicmVha3BvaW50IiwicHJlZml4IiwicmFuZG9tIiwic3RvbmUiLCJzaGlmdCIsImdldEhpZ2hlc3RaaW5kZXgiLCJoYXNGaXhlZFBvc2l0aW9uZWRQYXJlbnQiLCJzbGVlcCIsIm1pbGxpc2Vjb25kcyIsImdldFJhbmRvbUludCIsImlzQW5ndWxhclZlcnNpb24iLCJab25lIiwib3V0IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRCeVRhZyIsImdldEJ5Q2xhc3MiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2xhc3Nlc0FyciIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsImNsYXNzTmFtZXMiLCJhZGQiLCJ0cmlnZ2VyQ3VzdG9tRXZlbnQiLCJldmVudE5hbWUiLCJDdXN0b21FdmVudCIsImluaXRDdXN0b21FdmVudCIsInRyaWdnZXJFdmVudCIsIm5vZGUiLCJkb2MiLCJvd25lckRvY3VtZW50Iiwibm9kZVR5cGUiLCJldmVudENsYXNzIiwiYnViYmxlcyIsInN5bnRoZXRpYyIsImZpcmVFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiYyIsInN0cmluZyIsImV2ZW50VHJpZ2dlcmVkIiwiY3VycmVudFRhcmdldCIsInRyaWdnZXJlZCIsInF1ZXJ5U2VsZWN0b3IiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJtYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwiY2hpbGROb2RlcyIsImwiLCJwIiwiZiIsInRhZ05hbWUiLCJjdXN0b21EYXRhVGFnIiwicmVjdCIsIndpbiIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZGVmYXVsdFZpZXciLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwid2l0aE1hcmdpYyIsIm9mZnNldEhlaWdodCIsImdldENvbXB1dGVkU3R5bGUiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJhbmltYXRlIiwiZnJvbSIsInRvIiwiZHVyYXRpb24iLCJlYXNpbmciLCJlYXNpbmdzIiwibGluZWFyIiwidCIsImQiLCJyQUYiLCJjYW5jZWxlZCIsImNoYW5nZSIsImxvb3AiLCJ0aW1lc3RhbXAiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImFjdHVhbENzcyIsImNhY2hlIiwiSFRNTEVsZW1lbnQiLCJjc3NUZXh0IiwiYWN0dWFsSGVpZ2h0IiwiZ2V0U2Nyb2xsIiwiYnJvd3NlclN1cHBvcnRzQm94TW9kZWwiLCJzdHlsZVByb3AiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3VycmVudFN0eWxlIiwic3RyIiwibGV0dGVyIiwib2xkTGVmdCIsIm9sZFJzTGVmdCIsInJ1bnRpbWVTdHlsZSIsInBpeGVsTGVmdCIsInNsaWRlIiwiZGlyIiwicmVjYWxjTWF4SGVpZ2h0IiwiY2FsY0hlaWdodCIsImNhbGNQYWRkaW5nVG9wIiwiY2FsY1BhZGRpbmdCb3R0b20iLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImV2ZW50SWQiLCJ0YXJnZXRzIiwib25ldGltZSIsImNhbGxlZSIsImhhc2giLCJjaHIiLCJjaGFyQ29kZUF0IiwiYW5pbWF0ZUNsYXNzIiwiYW5pbWF0aW9uTmFtZSIsImFuaW1hdGlvbiIsImFuaW1hdGlvbnMiLCJPQW5pbWF0aW9uIiwiTW96QW5pbWF0aW9uIiwiV2Via2l0QW5pbWF0aW9uIiwibXNBbmltYXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGVEZWxheSIsImFuaW1hdGVEdXJhdGlvbiIsInRhcmdldFBvcyIsInNjcm9sbFBvcyIsImlzQXJyYXkiLCJhdHRhY2hFdmVudCIsInJlYWR5U3RhdGUiLCJudW1iZXJTdHJpbmciLCJuU3RyIiwieDEiLCJ4MiIsInJneCIsInVhIiwibXNpZSIsInRyaWRlbnQiLCJydiIsImVkZ2UiLCJwbHVnaW5EZWZPcHRpb25zIiwid2hlZWxQcm9wYWdhdGlvbiIsImF0dHJzIiwiaW5jbHVkZXMiLCJvcHRpb25OYW1lIiwiZmlsdGVyQm9vbGVhbiIsIm1vYmlsZUhlaWdodCIsImRpc2FibGVGb3JNb2JpbGUiLCJkZXNrdG9wTmF0aXZlU2Nyb2xsIiwic2Nyb2xsVXBkYXRlQWxsIiwic2Nyb2xsZXJzIiwicmVzZXRBbGwiLCJzZXRQcm9wZXJ0eSIsImdldEhUTUwiLCJnZXREb2N1bWVudEhlaWdodCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbGluZ0VsZW1lbnQiLCJjb2xvckRhcmtlbiIsImNvbG9yIiwiYW1vdW50Iiwic3VidHJhY3RMaWdodCIsImNjIiwiY29sb3JMaWdodGVuIiwiYWRkTGlnaHQiLCJkZWJvdW5jZSIsImJ0bldhaXQiLCJjbHMiLCJkaXNhYmxlIiwiY2FwdGlvbiIsImJ0blJlbGVhc2UiLCJkaXJlY3Rpb24iLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsInN0YXJ0U3RlcCIsImNsaWNrYWJsZVN0ZXBzIiwic3RlcHMiLCJidG5TdWJtaXQiLCJidG5OZXh0IiwiYnRuUHJldiIsImJ0bkxhc3QiLCJidG5GaXJzdCIsImN1cnJlbnRTdGVwIiwic3RvcHBlZCIsInRvdGFsU3RlcHMiLCJnb1RvIiwidXBkYXRlVUkiLCJnZXROZXh0U3RlcCIsImdldFByZXZTdGVwIiwiZ2V0Rmlyc3RTdGVwIiwiZ2V0TGFzdFN0ZXAiLCJudW1iZXIiLCJldmVudEhhbmRsZSIsInN0b3AiLCJpc0xhc3RTdGVwIiwiaXNGaXJzdFN0ZXAiLCJpc0JldHdlZW5TdGVwIiwic3RlcFR5cGUiLCJzdGVwc0luZm8iLCJzdGVwc0NvbnRlbnQiLCJuZXN0ZWQiLCJnb05leHQiLCJnb1ByZXYiLCJnb0xhc3QiLCJnb0ZpcnN0IiwiZ2V0U3RlcCIsIl9lbGVtZW50IiwiX21lbnVPYmplY3QiLCJfaW5pdCIsIm1lbnVEZXNrdG9wTW9kZSIsImdldEhlaWdodCIsIm1lbnUiLCJpc01pbmltaXplZCIsImlzSG92ZXJhYmxlIiwiZ2V0T2ZmY2FudmFzIiwiZ2V0RWxlbWVudCIsImdldE1lbnUiLCJjbG9zZU1vYmlsZU9mZmNhbnZhcyIsIl9ib2R5IiwiX3RvZ2dsZU9iamVjdCIsImdldFRvZ2dsZSIsIm9uVG9nZ2xlIiwiX29mZmNhbnZhc09iamVjdCIsIm9mZmNhbnZhc0NsYXNzIiwiaW5zaWRlVG0iLCJvdXRzaWRlVG0iLCJpc0ZpeGVkIiwiX2dldEhlaWdodCIsIl9tZW51RWxlbWVudCIsIl9vZmZjYW52YXNFbGVtZW50IiwibWVudUlkIiwib2ZmY2FudmFzSWQiLCJnZXRNZW51RWxlbWVudCIsImdldE9mZmNhbnZhc0VsZW1lbnQiLCJfdG9nZ2xlRWxlbWVudCIsImdldFRvZ2dsZUVsZW1lbnQiLCJfZWxlbWVudEZvck1vYmlsZSIsIl9vYmplY3QiLCJfZ2V0SGVpZ2h0Rm9yTW9iaWxlIiwiaWRGb3JNb2JpbGUiLCJpc0ZpeGVkRm9yTW9iaWxlIiwiZ2V0RWxlbWVudEZvck1vYmlsZSIsImdldEhlYWRlciIsImdldEhlaWdodEZvck1vYmlsZSIsImNhcmRXaWR0aCIsImJvZHlXaWR0aCIsImNhcmRPZmZzZXRMZWZ0IiwiY2FyZEJvZHkiLCJjYXJkSGVhZGVyIiwic2Nyb2xsRWwiLCJjYXJkQm9keUVsIiwiY2FyZEhlYWRlckVsIiwiY2FyZEZvb3RlckVsIiwia2V5Q29kZSIsIl9oYW5kZU1lc3NhZ2luZyIsIm1lc3NhZ2VzRWwiLCJ0ZXh0YXJlYSIsImVuY29kZVVSSSIsImhvc3RuYW1lIiwic2V0dXAiLCJjb250ZW50Iiwib2ZmY2FudmFzIiwiX3JlbWluZCIsImluaXREZWZhdWx0TW9kZSIsImVsZW1lbnRzIiwiZXhhbXBsZSIsImNvcHkiLCJjbGlwYm9hcmQiLCJDbGlwYm9hcmRKUyIsImNsZWFyU2VsZWN0aW9uIiwiaW5pdENvbXBhY3RNb2RlIiwiY29kZSIsIl9ub3RpZmljYXRpb25zRWxlbWVudCIsIl9sb2dzRWxlbWVudCIsIl9zZXR0aW5nc0VsZW1lbnQiLCJfZ2V0Q29udGVudEhlaWdodCIsIl9pbml0Tm90aWZpY2F0aW9ucyIsIl9pbml0TG9ncyIsIl9pbml0U2V0dGluZ3MiLCJfdXBkYXRlU2Nyb2xsYmFycyIsImZvcm0iLCJyZXN1bHRzIiwiX3RhcmdldCIsIl9mb3JtIiwiX2lucHV0IiwiX2Nsb3NlSWNvbiIsIl9yZXN1bHRXcmFwcGVyIiwiX3Jlc3VsdERyb3Bkb3duIiwiX3Jlc3VsdERyb3Bkb3duVG9nZ2xlIiwiX2Nsb3NlSWNvbkNvbnRhaW5lciIsIl9pbnB1dEdyb3VwIiwiX3F1ZXJ5IiwiX2hhc1Jlc3VsdCIsIl90aW1lb3V0IiwiX2lzUHJvY2Vzc2luZyIsIl9yZXF1ZXN0VGltZW91dCIsIl9zcGlubmVyQ2xhc3MiLCJfcmVzdWx0Q2xhc3MiLCJfbWluTGVuZ3RoIiwiX3Nob3dQcm9ncmVzcyIsIl9oaWRlUHJvZ3Jlc3MiLCJfc2hvd0Ryb3Bkb3duIiwiX2hpZGVEcm9wZG93biIsIl9wcm9jZXNzU2VhcmNoIiwiSE9TVF9VUkwiLCJzdWNjZXNzIiwicmVzIiwiX2hhbmRsZUNhbmNlbCIsIl9oYW5kbGVTZWFyY2giLCJvbmtleXByZXNzIiwiY2hhckNvZGUiLCJLVExheW91dFNlYXJjaElubGluZSJdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FB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QUEyQix3QkFBM0IsRUEvQ29CLENBaURwQjs7QUFDSHRFLGtCQUFnQixDQUFDc0UsSUFBakIsR0FsRHVCLENBb0RwQjs7QUFDSHZFLG1CQUFpQixDQUFDdUUsSUFBbEIsQ0FBdUIsZUFBdkIsRUFyRHVCLENBdURwQjs7QUFDQXhFLGNBQVksQ0FBQ3dFLElBQWIsR0F4RG9CLENBMERwQjs7QUFDQXJFLHNCQUFvQixDQUFDcUUsSUFBckIsQ0FBMEIsa0JBQTFCLEVBM0RvQixDQTZEcEI7O0FBQ0FuRSw0QkFBMEIsQ0FBQ21FLElBQTNCLENBQWdDLHdCQUFoQyxFQTlEb0IsQ0FnRXBCOztBQUNBbEUsb0JBQWtCLENBQUNrRSxJQUFuQixDQUF3QixnQkFBeEIsRUFqRW9CLENBbUVwQjs7QUFDQWhFLG1CQUFpQixDQUFDZ0UsSUFBbEIsQ0FBdUIsZUFBdkIsRUFwRW9CLENBc0VwQjs7QUFDQWpFLHFCQUFtQixDQUFDaUUsSUFBcEIsQ0FBeUIsaUJBQXpCLEVBdkVvQixDQXlFcEI7O0FBQ0FwRSx3QkFBc0IsQ0FBQ29FLElBQXZCLENBQTRCLGVBQTVCLEVBMUVvQixDQTRFcEI7O0FBQ0E5RCxnQkFBYyxHQUFHOEQsSUFBakIsQ0FBc0IsMEJBQXRCLEVBN0VvQixDQStFcEI7O0FBQ0E3RCx5QkFBdUIsR0FBRzZELElBQTFCLENBQStCLDJCQUEvQjtBQUNILENBakZELEUiLCJmaWxlIjoiL2RldmVsb3BtZW50L2pzL3NjcmlwdHMuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsIi8vIEtlZW50aGVtZXMnIHBsdWdpbnNcclxud2luZG93LktUVXRpbCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvdXRpbC5qcycpO1xyXG53aW5kb3cuS1RBcHAgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL2FwcC5qcycpO1xyXG53aW5kb3cuS1RDYXJkID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9jYXJkLmpzJyk7XHJcbndpbmRvdy5LVENvb2tpZSA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvY29va2llLmpzJyk7XHJcbndpbmRvdy5LVERpYWxvZyA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvZGlhbG9nLmpzJyk7XHJcbndpbmRvdy5LVEhlYWRlciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvaGVhZGVyLmpzJyk7XHJcbndpbmRvdy5LVEltYWdlSW5wdXQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL2ltYWdlLWlucHV0LmpzJyk7XHJcbndpbmRvdy5LVE1lbnUgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9jb21wb25lbnRzL21lbnUuanMnKTtcclxud2luZG93LktUT2ZmY2FudmFzID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9vZmZjYW52YXMuanMnKTtcclxud2luZG93LktUU2Nyb2xsdG9wID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9zY3JvbGx0b3AuanMnKTtcclxud2luZG93LktUVG9nZ2xlID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy90b2dnbGUuanMnKTtcclxud2luZG93LktUV2l6YXJkID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy93aXphcmQuanMnKTtcclxucmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvY29yZS5kYXRhdGFibGUuanMnKTtcclxucmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvY29tcG9uZW50cy9kYXRhdGFibGUvZGF0YXRhYmxlLmNoZWNrYm94LmpzJyk7XHJcbnJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2NvbXBvbmVudHMvZGF0YXRhYmxlL2RhdGF0YWJsZS5ydGwuanMnKTtcclxuXHJcbi8vIE1ldHJvbmljIGxheW91dCBiYXNlIGpzXHJcbndpbmRvdy5LVExheW91dEFzaWRlID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUuanMnKTtcclxud2luZG93LktUTGF5b3V0QXNpZGVNZW51ID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2Jhc2UvYXNpZGUtbWVudS5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRBc2lkZVRvZ2dsZSA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2FzaWRlLXRvZ2dsZS5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRCcmFuZCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2JyYW5kLmpzJyk7XHJcbndpbmRvdy5LVExheW91dENvbnRlbnQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9jb250ZW50LmpzJyk7XHJcbndpbmRvdy5LVExheW91dEZvb3RlciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2Zvb3Rlci5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRIZWFkZXIgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9oZWFkZXIuanMnKTtcclxud2luZG93LktUTGF5b3V0SGVhZGVyTWVudSA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci1tZW51LmpzJyk7XHJcbndpbmRvdy5LVExheW91dEhlYWRlclRvcGJhciA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL2hlYWRlci10b3BiYXIuanMnKTtcclxud2luZG93LktUTGF5b3V0U3RpY2t5Q2FyZCA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9iYXNlL3N0aWNreS1jYXJkLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFN0cmV0Y2hlZENhcmQgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9zdHJldGNoZWQtY2FyZC5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRTdWJoZWFkZXIgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvYmFzZS9zdWJoZWFkZXIuanMnKTtcclxuXHJcbi8vIE1ldHJvbmljIGxheW91dCBleHRlbmRlZCBqc1xyXG53aW5kb3cuS1RMYXlvdXRDaGF0ID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL2NoYXQuanMnKTtcclxud2luZG93LktUTGF5b3V0RGVtb1BhbmVsID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL2RlbW8tcGFuZWwuanMnKTtcclxud2luZG93LktUTGF5b3V0RXhhbXBsZXMgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvZXhhbXBsZXMuanMnKTtcclxud2luZG93LktUTGF5b3V0UXVpY2tBY3Rpb25zID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLWFjdGlvbnMuanMnKTtcclxud2luZG93LktUTGF5b3V0UXVpY2tDYXJ0UGFuZWwgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stY2FydC5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRRdWlja05vdGlmaWNhdGlvbnMgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stbm90aWZpY2F0aW9ucy5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRRdWlja1BhbmVsID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXBhbmVsLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFF1aWNrU2VhcmNoID0gcmVxdWlyZSgnLi4vbWV0cm9uaWMvanMvbGF5b3V0L2V4dGVuZGVkL3F1aWNrLXNlYXJjaC5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRRdWlja1VzZXIgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvcXVpY2stdXNlci5qcycpO1xyXG53aW5kb3cuS1RMYXlvdXRTY3JvbGx0b3AgPSByZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvZXh0ZW5kZWQvc2Nyb2xsdG9wLmpzJyk7XHJcbndpbmRvdy5LVExheW91dFNlYXJjaCA9IHdpbmRvdy5LVExheW91dFNlYXJjaE9mZmNhbnZhcyA9IHJlcXVpcmUoJy4uL21ldHJvbmljL2pzL2xheW91dC9leHRlbmRlZC9zZWFyY2guanMnKTtcclxuXHJcblxyXG5yZXF1aXJlKCcuLi9tZXRyb25pYy9qcy9sYXlvdXQvaW5pdGlhbGl6ZS5qcycpOyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ29tcG9uZW50IERlZmluaXRpb25cclxudmFyIEtUQXBwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvKiogQHR5cGUge29iamVjdH0gY29sb3JzIFN0YXRlIGNvbG9ycyAqKi9cclxuICAgIHZhciBzZXR0aW5ncyA9IHt9O1xyXG5cclxuICAgIHZhciBpbml0VG9vbHRpcCA9IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyIHRoZW1lID0gZWwuZGF0YSgndGhlbWUnKSA/ICd0b29sdGlwLScgKyBlbC5kYXRhKCd0aGVtZScpIDogJyc7XHJcbiAgICAgICAgdmFyIHdpZHRoID0gZWwuZGF0YSgnd2lkdGgnKSA9PSAnYXV0bycgPyAndG9vbHRvcC1hdXRvLXdpZHRoJyA6ICcnO1xyXG4gICAgICAgIHZhciB0cmlnZ2VyID0gZWwuZGF0YSgndHJpZ2dlcicpID8gZWwuZGF0YSgndHJpZ2dlcicpIDogJ2hvdmVyJztcclxuXHJcbiAgICAgICAgJChlbCkudG9vbHRpcCh7XHJcbiAgICAgICAgICAgIHRyaWdnZXI6IHRyaWdnZXIsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXAgJyArIHRoZW1lICsgJyAnICsgd2lkdGggKyAnXCIgcm9sZT1cInRvb2x0aXBcIj5cXFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+XFxcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+XFxcclxuICAgICAgICAgICAgPC9kaXY+J1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbml0VG9vbHRpcHMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBpbml0IGJvb3RzdHJhcCB0b29sdGlwc1xyXG4gICAgICAgICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpbml0VG9vbHRpcCgkKHRoaXMpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdFBvcG92ZXIgPSBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHZhciBza2luID0gZWwuZGF0YSgnc2tpbicpID8gJ3BvcG92ZXItJyArIGVsLmRhdGEoJ3NraW4nKSA6ICcnO1xyXG4gICAgICAgIHZhciB0cmlnZ2VyVmFsdWUgPSBlbC5kYXRhKCd0cmlnZ2VyJykgPyBlbC5kYXRhKCd0cmlnZ2VyJykgOiAnaG92ZXInO1xyXG5cclxuICAgICAgICBlbC5wb3BvdmVyKHtcclxuICAgICAgICAgICAgdHJpZ2dlcjogdHJpZ2dlclZhbHVlLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ1xcXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3BvdmVyICcgKyBza2luICsgJ1wiIHJvbGU9XCJ0b29sdGlwXCI+XFxcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+XFxcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj5cXFxyXG4gICAgICAgICAgICA8L2Rpdj4nXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRQb3BvdmVycyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIGluaXQgYm9vdHN0cmFwIHBvcG92ZXJcclxuICAgICAgICAkKCdbZGF0YS10b2dnbGU9XCJwb3BvdmVyXCJdJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5pdFBvcG92ZXIoJCh0aGlzKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRGaWxlSW5wdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBpbml0IGJvb3RzdHJhcCBwb3BvdmVyXHJcbiAgICAgICAgJCgnLmN1c3RvbS1maWxlLWlucHV0Jykub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgICAgICAkKHRoaXMpLm5leHQoJy5jdXN0b20tZmlsZS1sYWJlbCcpLmFkZENsYXNzKFwic2VsZWN0ZWRcIikuaHRtbChmaWxlTmFtZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRTY3JvbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKCdbZGF0YS1zY3JvbGw9XCJ0cnVlXCJdJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KHRoaXMsIHtcclxuICAgICAgICAgICAgICAgIG1vYmlsZU5hdGl2ZVNjcm9sbDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJlbWVtYmVyUG9zaXRpb246IChlbC5kYXRhKCdyZW1lbWJlci1wb3NpdGlvbicpID09ICd0cnVlJyA/IHRydWUgOiBmYWxzZSksXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChLVFV0aWwuaXNCcmVha3BvaW50RG93bignbGcnKSAmJiBlbC5kYXRhKCdtb2JpbGUtaGVpZ2h0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsLmRhdGEoJ21vYmlsZS1oZWlnaHQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWwuZGF0YSgnaGVpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdEFsZXJ0cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIGluaXQgYm9vdHN0cmFwIHBvcG92ZXJcclxuICAgICAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJ1tkYXRhLWNsb3NlPWFsZXJ0XScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5hbGVydCcpLmhpZGUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdENhcmQgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xyXG4gICAgICAgIC8vIGluaXQgY2FyZCB0b29sc1xyXG4gICAgICAgIHZhciBlbCA9ICQoZWwpO1xyXG4gICAgICAgIHZhciBjYXJkID0gbmV3IEtUQ2FyZChlbFswXSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRDYXJkcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIGluaXQgY2FyZCB0b29sc1xyXG4gICAgICAgICQoJ1tkYXRhLWNhcmQ9XCJ0cnVlXCJdJykuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbC5kYXRhKCdkYXRhLWNhcmQtaW5pdGlhbGl6ZWQnKSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgaW5pdENhcmQoZWwsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgZWwuZGF0YSgnZGF0YS1jYXJkLWluaXRpYWxpemVkJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdFN0aWNreUNhcmQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodHlwZW9mIFN0aWNreSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHN0aWNreSA9IG5ldyBTdGlja3koJ1tkYXRhLXN0aWNreT1cInRydWVcIl0nKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaW5pdEFic29sdXRlRHJvcGRvd24gPSBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgdmFyIGRyb3Bkb3duTWVudTtcclxuXHJcbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoJ2JvZHknKS5vbignc2hvdy5icy5kcm9wZG93bicsIGNvbnRleHQsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgZHJvcGRvd25NZW51ID0gJChlLnRhcmdldCkuZmluZCgnLmRyb3Bkb3duLW1lbnUnKTtcclxuICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZChkcm9wZG93bk1lbnUuZGV0YWNoKCkpO1xyXG4gICAgICAgICAgICBkcm9wZG93bk1lbnUuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duTWVudS5wb3NpdGlvbih7XHJcbiAgICAgICAgICAgICAgICAnbXknOiAncmlnaHQgdG9wJyxcclxuICAgICAgICAgICAgICAgICdhdCc6ICdyaWdodCBib3R0b20nLFxyXG4gICAgICAgICAgICAgICAgJ29mJzogJChlLnJlbGF0ZWRUYXJnZXQpLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KS5vbignaGlkZS5icy5kcm9wZG93bicsIGNvbnRleHQsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgJChlLnRhcmdldCkuYXBwZW5kKGRyb3Bkb3duTWVudS5kZXRhY2goKSk7XHJcbiAgICAgICAgICAgIGRyb3Bkb3duTWVudS5oaWRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRBYnNvbHV0ZURyb3Bkb3ducyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJ2JvZHknKS5vbignc2hvdy5icy5kcm9wZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgLy8gZS50YXJnZXQgaXMgYWx3YXlzIHBhcmVudCAoY29udGFpbnMgdG9nZ2xlciBhbmQgbWVudSlcclxuICAgICAgICAgICAgdmFyICR0b2dnbGVyID0gJChlLnRhcmdldCkuZmluZChcIltkYXRhLWF0dGFjaD0nYm9keSddXCIpO1xyXG4gICAgICAgICAgICBpZiAoJHRvZ2dsZXIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyICRkcm9wZG93bk1lbnUgPSAkKGUudGFyZ2V0KS5maW5kKCcuZHJvcGRvd24tbWVudScpO1xyXG4gICAgICAgICAgICAvLyBzYXZlIGRldGFjaGVkIG1lbnVcclxuICAgICAgICAgICAgdmFyICRkZXRhY2hlZERyb3Bkb3duTWVudSA9ICRkcm9wZG93bk1lbnUuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgIC8vIHNhdmUgcmVmZXJlbmNlIHRvIGRldGFjaGVkIG1lbnUgaW5zaWRlIGRhdGEgb2YgdG9nZ2xlclxyXG4gICAgICAgICAgICAkdG9nZ2xlci5kYXRhKCdkcm9wZG93bi1tZW51JywgJGRldGFjaGVkRHJvcGRvd25NZW51KTtcclxuXHJcbiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoJGRldGFjaGVkRHJvcGRvd25NZW51KTtcclxuICAgICAgICAgICAgJGRldGFjaGVkRHJvcGRvd25NZW51LmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICAgICAgICAkZGV0YWNoZWREcm9wZG93bk1lbnUucG9zaXRpb24oe1xyXG4gICAgICAgICAgICAgICAgbXk6ICdyaWdodCB0b3AnLFxyXG4gICAgICAgICAgICAgICAgYXQ6ICdyaWdodCBib3R0b20nLFxyXG4gICAgICAgICAgICAgICAgb2Y6ICQoZS5yZWxhdGVkVGFyZ2V0KSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJ2JvZHknKS5vbignaGlkZS5icy5kcm9wZG93bicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdmFyICR0b2dnbGVyID0gJChlLnRhcmdldCkuZmluZChcIltkYXRhLWF0dGFjaD0nYm9keSddXCIpO1xyXG4gICAgICAgICAgICBpZiAoJHRvZ2dsZXIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYWNjZXNzIHRvIHJlZmVyZW5jZSBvZiBkZXRhY2hlZCBtZW51IGZyb20gZGF0YSBvZiB0b2dnbGVyXHJcbiAgICAgICAgICAgIHZhciAkZGV0YWNoZWREcm9wZG93bk1lbnUgPSAkdG9nZ2xlci5kYXRhKCdkcm9wZG93bi1tZW51Jyk7XHJcbiAgICAgICAgICAgIC8vIHJlLWFwcGVuZCBkZXRhY2hlZCBtZW51IGluc2lkZSBwYXJlbnRcclxuICAgICAgICAgICAgJChlLnRhcmdldCkuYXBwZW5kKCRkZXRhY2hlZERyb3Bkb3duTWVudS5kZXRhY2goKSk7XHJcbiAgICAgICAgICAgIC8vIGhpZGUgZHJvcGRvd25cclxuICAgICAgICAgICAgJGRldGFjaGVkRHJvcGRvd25NZW51LmhpZGUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihzZXR0aW5nc0FycmF5KSB7XHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5nc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IHNldHRpbmdzQXJyYXk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEtUQXBwLmluaXRDb21wb25lbnRzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdENvbXBvbmVudHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpbml0U2Nyb2xsKCk7XHJcbiAgICAgICAgICAgIGluaXRUb29sdGlwcygpO1xyXG4gICAgICAgICAgICBpbml0UG9wb3ZlcnMoKTtcclxuICAgICAgICAgICAgaW5pdEFsZXJ0cygpO1xyXG4gICAgICAgICAgICBpbml0RmlsZUlucHV0KCk7XHJcbiAgICAgICAgICAgIGluaXRDYXJkcygpO1xyXG4gICAgICAgICAgICBpbml0U3RpY2t5Q2FyZCgpO1xyXG4gICAgICAgICAgICBpbml0QWJzb2x1dGVEcm9wZG93bnMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0VG9vbHRpcHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpbml0VG9vbHRpcHMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0VG9vbHRpcDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgaW5pdFRvb2x0aXAoZWwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRQb3BvdmVyczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGluaXRQb3BvdmVycygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRQb3BvdmVyOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpbml0UG9wb3ZlcihlbCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdENhcmQ6IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGluaXRDYXJkKGVsLCBvcHRpb25zKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0Q2FyZHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpbml0Q2FyZHMoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0U3RpY2t5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5pdFN0aWNreSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluaXRBYnNvbHV0ZURyb3Bkb3duOiBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGluaXRBYnNvbHV0ZURyb3Bkb3duKGNvbnRleHQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJsb2NrOiBmdW5jdGlvbih0YXJnZXQsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gJCh0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuMDUsXHJcbiAgICAgICAgICAgICAgICBvdmVybGF5Q29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJycsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3ByaW1hcnknLFxyXG4gICAgICAgICAgICAgICAgY2VudGVyWDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNlbnRlclk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnJyxcclxuICAgICAgICAgICAgICAgIHNoYWRvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAnYXV0bydcclxuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgaHRtbDtcclxuICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBvcHRpb25zLnR5cGUgPyAnc3Bpbm5lci0nICsgb3B0aW9ucy50eXBlIDogJyc7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IG9wdGlvbnMuc3RhdGUgPyAnc3Bpbm5lci0nICsgb3B0aW9ucy5zdGF0ZSA6ICcnO1xyXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IG9wdGlvbnMuc2l6ZSA/ICdzcGlubmVyLScgKyBvcHRpb25zLnNpemUgOiAnJztcclxuICAgICAgICAgICAgdmFyIHNwaW5uZXIgPSAnPHNwYW4gY2xhc3M9XCJzcGlubmVyICcgKyB2ZXJzaW9uICsgJyAnICsgc3RhdGUgKyAnICcgKyBzaXplICsgJ1wiPjwvc3Bhbic7XHJcblxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tZXNzYWdlICYmIG9wdGlvbnMubWVzc2FnZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9ICdibG9ja3VpICcgKyAob3B0aW9ucy5zaGFkb3cgPT09IGZhbHNlID8gJ2Jsb2NrdWknIDogJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGh0bWwgPSAnPGRpdiBjbGFzcz1cIicgKyBjbGFzc2VzICsgJ1wiPjxzcGFuPicgKyBvcHRpb25zLm1lc3NhZ2UgKyAnPC9zcGFuPicgKyBzcGlubmVyICsgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnYm9keScpLnByZXBlbmQoZWwpO1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsLCBjbGFzc2VzKTtcclxuICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLndpZHRoID0gS1RVdGlsLmFjdHVhbFdpZHRoKGVsKSArIDEwO1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZShlbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PSAnYm9keScpIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sID0gJzxkaXYgY2xhc3M9XCInICsgY2xhc3NlcyArICdcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0Oi0nICsgKG9wdGlvbnMud2lkdGggLyAyKSArICdweDtcIj48c3Bhbj4nICsgb3B0aW9ucy5tZXNzYWdlICsgJzwvc3Bhbj48c3Bhbj4nICsgc3Bpbm5lciArICc8L3NwYW4+PC9kaXY+JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBzcGlubmVyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogaHRtbCxcclxuICAgICAgICAgICAgICAgIGNlbnRlclk6IG9wdGlvbnMuY2VudGVyWSxcclxuICAgICAgICAgICAgICAgIGNlbnRlclg6IG9wdGlvbnMuY2VudGVyWCxcclxuICAgICAgICAgICAgICAgIGNzczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogJzMwJScsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJzUwJScsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzAnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBvcHRpb25zLndpZHRoXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb3ZlcmxheUNTUzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5vdmVybGF5Q29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5vcGFjaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3dhaXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogKHRhcmdldCA9PSAnYm9keScgPyAxMTAwIDogMTApXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25VbmJsb2NrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgJiYgZWxbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbFswXSwgJ3Bvc2l0aW9uJywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsWzBdLCAnem9vbScsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09ICdib2R5Jykge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLmNzcy50b3AgPSAnNTAlJztcclxuICAgICAgICAgICAgICAgICQuYmxvY2tVSShwYXJhbXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gJCh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgZWwuYmxvY2socGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVuYmxvY2s6IGZ1bmN0aW9uKHRhcmdldCkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPSAnYm9keScpIHtcclxuICAgICAgICAgICAgICAgICQodGFyZ2V0KS51bmJsb2NrKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkLnVuYmxvY2tVSSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYmxvY2tQYWdlOiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLVEFwcC5ibG9jaygnYm9keScsIG9wdGlvbnMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVuYmxvY2tQYWdlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUQXBwLnVuYmxvY2soJ2JvZHknKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTZXR0aW5nczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RBcHA7XHJcbn1cclxuXHJcbi8vIEluaXRpYWxpemUgS1RBcHAgY2xhc3Mgb24gZG9jdW1lbnQgcmVhZHlcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICBLVEFwcC5pbml0KEtUQXBwU2V0dGluZ3MpO1xyXG59KTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENvbXBvbmVudCBEZWZpbml0aW9uXHJcbnZhciBLVENhcmQgPSBmdW5jdGlvbihlbGVtZW50SWQsIG9wdGlvbnMpIHtcclxuICAgIC8vIE1haW4gb2JqZWN0XHJcbiAgICB2YXIgdGhlID0gdGhpcztcclxuICAgIHZhciBpbml0ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gR2V0IGVsZW1lbnQgb2JqZWN0XHJcbiAgICB2YXIgZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGVsZW1lbnRJZCk7XHJcbiAgICB2YXIgYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG4gICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgIHRvZ2dsZVNwZWVkOiA0MDAsXHJcbiAgICAgICAgc3RpY2t5OiB7XHJcbiAgICAgICAgICAgIHJlbGVzZU9uUmV2ZXJzZTogZmFsc2UsXHJcbiAgICAgICAgICAgIG9mZnNldDogMzAwLFxyXG4gICAgICAgICAgICB6SW5kZXg6IDEwMVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHZhciBQbHVnaW4gPSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29uc3RydWN0XHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIGNvbnN0cnVjdDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmRhdGEoZWxlbWVudCkuaGFzKCdjYXJkJykpIHtcclxuICAgICAgICAgICAgICAgIHRoZSA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgnY2FyZCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgbWVudVxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmluaXQob3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgbWVudVxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmJ1aWxkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KCdjYXJkJywgdGhlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbml0IGNhcmRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoZS5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcclxuICAgICAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB0aGUuaGVhZGVyID0gS1RVdGlsLmNoaWxkKGVsZW1lbnQsICcuY2FyZC1oZWFkZXInKTtcclxuICAgICAgICAgICAgdGhlLmZvb3RlciA9IEtUVXRpbC5jaGlsZChlbGVtZW50LCAnLmNhcmQtZm9vdGVyJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmNoaWxkKGVsZW1lbnQsICcuY2FyZC1ib2R5JykpIHtcclxuICAgICAgICAgICAgICAgIHRoZS5ib2R5ID0gS1RVdGlsLmNoaWxkKGVsZW1lbnQsICcuY2FyZC1ib2R5Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoS1RVdGlsLmNoaWxkKGVsZW1lbnQsICcuZm9ybScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGUuYm9keSA9IEtUVXRpbC5jaGlsZChlbGVtZW50LCAnLmZvcm0nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJ1aWxkIEZvcm0gV2l6YXJkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmVcclxuICAgICAgICAgICAgdmFyIHJlbW92ZSA9IEtUVXRpbC5maW5kKHRoZS5oZWFkZXIsICdbZGF0YS1jYXJkLXRvb2w9cmVtb3ZlXScpO1xyXG4gICAgICAgICAgICBpZiAocmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQocmVtb3ZlLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZWxvYWRcclxuICAgICAgICAgICAgdmFyIHJlbG9hZCA9IEtUVXRpbC5maW5kKHRoZS5oZWFkZXIsICdbZGF0YS1jYXJkLXRvb2w9cmVsb2FkXScpO1xyXG4gICAgICAgICAgICBpZiAocmVsb2FkKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQocmVsb2FkLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBUb2dnbGVcclxuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IEtUVXRpbC5maW5kKHRoZS5oZWFkZXIsICdbZGF0YS1jYXJkLXRvb2w9dG9nZ2xlXScpO1xyXG4gICAgICAgICAgICBpZiAodG9nZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQodG9nZ2xlLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW5hYmxlIHN0aWNrdCBtb2RlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdFN0aWNreTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBsYXN0U2Nyb2xsVG9wID0gMDtcclxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoZS5vcHRpb25zLnN0aWNreS5vZmZzZXQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoZS5oZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBQbHVnaW4ub25TY3JvbGxTdGlja3kpO1xyXG4gICAgICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICogV2luZG93IHNjcm9sbCBoYW5kbGUgZXZlbnQgZm9yIHN0aWNreSBjYXJkXHJcblx0ICAgICAqL1xyXG5cdCAgICBvblNjcm9sbFN0aWNreTogZnVuY3Rpb24oZSkge1xyXG5cdFx0ICAgIHZhciBvZmZzZXQgPSB0aGUub3B0aW9ucy5zdGlja3kub2Zmc2V0O1xyXG5cclxuXHRcdCAgICBpZihpc05hTihvZmZzZXQpKSByZXR1cm47XHJcblxyXG5cdFx0ICAgIHZhciBzdCA9IEtUVXRpbC5nZXRTY3JvbGxUb3AoKTtcclxuXHJcblx0XHQgICAgaWYgKHN0ID49IG9mZnNldCAmJiBLVFV0aWwuaGFzQ2xhc3MoYm9keSwgJ2NhcmQtc3RpY2t5LW9uJykgPT09IGZhbHNlKSB7XHJcblx0XHRcdCAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdzdGlja3lPbicpO1xyXG5cclxuXHRcdFx0ICAgIEtUVXRpbC5hZGRDbGFzcyhib2R5LCAnY2FyZC1zdGlja3ktb24nKTtcclxuXHJcblx0XHRcdCAgICBQbHVnaW4udXBkYXRlU3RpY2t5KCk7XHJcblxyXG5cdFx0ICAgIH0gZWxzZSBpZiAoKHN0KjEuNSkgPD0gb2Zmc2V0ICYmIEtUVXRpbC5oYXNDbGFzcyhib2R5LCAnY2FyZC1zdGlja3ktb24nKSkge1xyXG5cdFx0XHQgICAgLy8gQmFjayBzY3JvbGwgbW9kZVxyXG5cdFx0XHQgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc3RpY2t5T2ZmJyk7XHJcblxyXG5cdFx0XHQgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGJvZHksICdjYXJkLXN0aWNreS1vbicpO1xyXG5cclxuXHRcdFx0ICAgIFBsdWdpbi5yZXNldFN0aWNreSgpO1xyXG5cdFx0ICAgIH1cclxuXHQgICAgfSxcclxuXHJcbiAgICAgICAgdXBkYXRlU3RpY2t5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGUuaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB0b3A7XHJcblxyXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmhhc0NsYXNzKGJvZHksICdjYXJkLXN0aWNreS1vbicpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMuc3RpY2t5LnBvc2l0aW9uLnRvcCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gcGFyc2VJbnQodGhlLm9wdGlvbnMuc3RpY2t5LnBvc2l0aW9uLnRvcC5jYWxsKHRoaXMsIHRoZSkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBwYXJzZUludCh0aGUub3B0aW9ucy5zdGlja3kucG9zaXRpb24udG9wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbGVmdDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy5zdGlja3kucG9zaXRpb24ubGVmdCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IHBhcnNlSW50KHRoZS5vcHRpb25zLnN0aWNreS5wb3NpdGlvbi5sZWZ0LmNhbGwodGhpcywgdGhlKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBwYXJzZUludCh0aGUub3B0aW9ucy5zdGlja3kucG9zaXRpb24ubGVmdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoZS5vcHRpb25zLnN0aWNreS5wb3NpdGlvbi5yaWdodCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBwYXJzZUludCh0aGUub3B0aW9ucy5zdGlja3kucG9zaXRpb24ucmlnaHQuY2FsbCh0aGlzLCB0aGUpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBwYXJzZUludCh0aGUub3B0aW9ucy5zdGlja3kucG9zaXRpb24ucmlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmhlYWRlciwgJ3otaW5kZXgnLCB0aGUub3B0aW9ucy5zdGlja3kuekluZGV4KTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmhlYWRlciwgJ3RvcCcsIHRvcCArICdweCcpO1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyh0aGUuaGVhZGVyLCAnbGVmdCcsIGxlZnQgKyAncHgnKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmhlYWRlciwgJ3JpZ2h0JywgcmlnaHQgKyAncHgnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlc2V0U3RpY2t5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGUuaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuaGFzQ2xhc3MoYm9keSwgJ2NhcmQtc3RpY2t5LW9uJykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5oZWFkZXIsICd6LWluZGV4JywgJycpO1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyh0aGUuaGVhZGVyLCAndG9wJywgJycpO1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyh0aGUuaGVhZGVyLCAnbGVmdCcsICcnKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmhlYWRlciwgJ3JpZ2h0JywgJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlIGNhcmRcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlUmVtb3ZlJykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmUoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlclJlbW92ZScpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldCBjb250ZW50XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0Q29udGVudDogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgICAgICBpZiAoaHRtbCkge1xyXG4gICAgICAgICAgICAgICAgdGhlLmJvZHkuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldCBib2R5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0Qm9keTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGUuYm9keTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXQgc2VsZlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFNlbGY6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWxvYWRcclxuICAgICAgICAgKi9cclxuICAgICAgICByZWxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdyZWxvYWQnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUb2dnbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmhhc0NsYXNzKGVsZW1lbnQsICdjYXJkLWNvbGxhcHNlJykgfHwgS1RVdGlsLmhhc0NsYXNzKGVsZW1lbnQsICdjYXJkLWNvbGxhcHNlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uZXhwYW5kKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uY29sbGFwc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbGxhcHNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29sbGFwc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlQ29sbGFwc2UnKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgS1RVdGlsLnNsaWRlVXAodGhlLmJvZHksIHRoZS5vcHRpb25zLnRvZ2dsZVNwZWVkLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2FmdGVyQ29sbGFwc2UnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ2NhcmQtY29sbGFwc2UnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFeHBhbmRcclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBhbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlRXhwYW5kJykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5zbGlkZURvd24odGhlLmJvZHksIHRoZS5vcHRpb25zLnRvZ2dsZVNwZWVkLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2FmdGVyRXhwYW5kJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGVsZW1lbnQsICdjYXJkLWNvbGxhcHNlJyk7XHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LCAnY2FyZC1jb2xsYXBzZWQnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUcmlnZ2VyIGV2ZW50c1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV2ZW50VHJpZ2dlcjogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgICAgICAvL0tUVXRpbC50cmlnZ2VyQ3VzdG9tRXZlbnQobmFtZSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhlLmV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhlLmV2ZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5uYW1lID09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQub25lID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmZpcmVkID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUuZXZlbnRzW2ldLmZpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24obmFtZSwgaGFuZGxlciwgb25lKSB7XHJcbiAgICAgICAgICAgIHRoZS5ldmVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcclxuICAgICAgICAgICAgICAgIG9uZTogb25lLFxyXG4gICAgICAgICAgICAgICAgZmlyZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAqL1xyXG5cclxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGNhcmRcclxuICAgICAqL1xyXG4gICAgdGhlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4ucmVtb3ZlKGh0bWwpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXQgc3RpY2t5IGNhcmRcclxuICAgICAqL1xyXG4gICAgdGhlLmluaXRTdGlja3kgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmluaXRTdGlja3koKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXJlbmRlciBzdGlja3kgbGF5b3V0XHJcbiAgICAgKi9cclxuICAgIHRoZS51cGRhdGVTdGlja3kgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLnVwZGF0ZVN0aWNreSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0IHRoZSBzdGlja3lcclxuICAgICAqL1xyXG4gICAgdGhlLnJlc2V0U3RpY2t5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5yZXNldFN0aWNreSgpO1xyXG4gICAgfTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveSBzdGlja3kgY2FyZFxyXG5cdCAqL1xyXG5cdHRoZS5kZXN0cm95U3RpY2t5ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRQbHVnaW4ucmVzZXRTdGlja3koKTtcclxuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBQbHVnaW4ub25TY3JvbGxTdGlja3kpO1xyXG5cdH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWxvYWQgY2FyZFxyXG4gICAgICovXHJcbiAgICB0aGUucmVsb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5yZWxvYWQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgY2FyZCBjb250ZW50XHJcbiAgICAgKi9cclxuICAgIHRoZS5zZXRDb250ZW50ID0gZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uc2V0Q29udGVudChodG1sKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUb2dnbGUgY2FyZFxyXG4gICAgICovXHJcbiAgICB0aGUudG9nZ2xlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi50b2dnbGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb2xsYXBzZSBjYXJkXHJcbiAgICAgKi9cclxuICAgIHRoZS5jb2xsYXBzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uY29sbGFwc2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHBhbmQgY2FyZFxyXG4gICAgICovXHJcbiAgICB0aGUuZXhwYW5kID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5leHBhbmQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgY2FyZGJvZHlcclxuICAgICAqIEByZXR1cm5zIHtqUXVlcnl9XHJcbiAgICAgKi9cclxuICAgIHRoZS5nZXRCb2R5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5nZXRCb2R5KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGNhcmRib2R5XHJcbiAgICAgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG4gICAgICovXHJcbiAgICB0aGUuZ2V0U2VsZiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uZ2V0U2VsZigpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCBldmVudFxyXG4gICAgICovXHJcbiAgICB0aGUub24gPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5hZGRFdmVudChuYW1lLCBoYW5kbGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2ggZXZlbnQgdGhhdCB3aWxsIGJlIGZpcmVkIG9uY2VcclxuICAgICAqL1xyXG4gICAgdGhlLm9uZSA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDb25zdHJ1Y3QgcGx1Z2luXHJcbiAgICBQbHVnaW4uY29uc3RydWN0LmFwcGx5KHRoZSwgW29wdGlvbnNdKTtcclxuXHJcbiAgICByZXR1cm4gdGhlO1xyXG59O1xyXG5cclxuLy8gd2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEtUQ2FyZDtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuLy8gRE9DUzogaHR0cHM6Ly9qYXZhc2NyaXB0LmluZm8vY29va2llXHJcblxyXG4vLyBDb21wb25lbnQgRGVmaW5pdGlvbiBcclxudmFyIEtUQ29va2llID0gZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIC8vIHJldHVybnMgdGhlIGNvb2tpZSB3aXRoIHRoZSBnaXZlbiBuYW1lLFxyXG4gICAgLy8gb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZFxyXG4gICAgZ2V0Q29va2llOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoXHJcbiAgICAgICAgXCIoPzpefDsgKVwiICsgbmFtZS5yZXBsYWNlKC8oW1xcLiQ/Knx7fVxcKFxcKVxcW1xcXVxcXFxcXC9cXCteXSkvZywgJ1xcXFwkMScpICsgXCI9KFteO10qKVwiXHJcbiAgICAgICkpO1xyXG4gICAgICByZXR1cm4gbWF0Y2hlcyA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaGVzWzFdKSA6IHVuZGVmaW5lZDtcclxuICAgIH0sXHJcbiAgICAvLyBQbGVhc2Ugbm90ZSB0aGF0IGEgY29va2llIHZhbHVlIGlzIGVuY29kZWQsXHJcbiAgICAvLyBzbyBnZXRDb29raWUgdXNlcyBhIGJ1aWx0LWluIGRlY29kZVVSSUNvbXBvbmVudCBmdW5jdGlvbiB0byBkZWNvZGUgaXQuXHJcbiAgICBzZXRDb29raWU6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XHJcbiAgICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHtwYXRoOiAnLyd9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmV4cGlyZXMgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5leHBpcmVzID0gb3B0aW9ucy5leHBpcmVzLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB1cGRhdGVkQ29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG5cclxuICAgICAgZm9yICh2YXIgb3B0aW9uS2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uS2V5KSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI7IFwiICsgb3B0aW9uS2V5O1xyXG4gICAgICAgIHZhciBvcHRpb25WYWx1ZSA9IG9wdGlvbnNbb3B0aW9uS2V5XTtcclxuICAgICAgICBpZiAob3B0aW9uVmFsdWUgIT09IHRydWUpIHtcclxuICAgICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI9XCIgKyBvcHRpb25WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHVwZGF0ZWRDb29raWU7XHJcbiAgICB9LFxyXG4gICAgLy8gVG8gZGVsZXRlIGEgY29va2llLCB3ZSBjYW4gY2FsbCBpdCB3aXRoIGEgbmVnYXRpdmUgZXhwaXJhdGlvbiBkYXRlOlxyXG4gICAgZGVsZXRlQ29va2llOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIHNldENvb2tpZShuYW1lLCBcIlwiLCB7XHJcbiAgICAgICAgJ21heC1hZ2UnOiAtMVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxufSgpO1xyXG5cclxuLy8gd2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBLVENvb2tpZTtcclxufVxyXG4iLCIndXNlIHN0cmljdCc7XHJcbihmdW5jdGlvbigkKSB7XHJcblxyXG5cdHZhciBwbHVnaW5OYW1lID0gJ0tURGF0YXRhYmxlJztcclxuXHR2YXIgcGZ4ID0gJyc7XHJcblx0dmFyIHV0aWwgPSBLVFV0aWw7XHJcblx0dmFyIGFwcCA9IEtUQXBwO1xyXG5cclxuXHRpZiAodHlwZW9mIHV0aWwgPT09ICd1bmRlZmluZWQnKSB0aHJvdyBuZXcgRXJyb3IoJ1V0aWwgY2xhc3MgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlICcgKyBwbHVnaW5OYW1lKTtcclxuXHJcblx0Ly8gcGx1Z2luIHNldHVwXHJcblx0JC5mbltwbHVnaW5OYW1lXSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuXHRcdGlmICgkKHRoaXMpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRjb25zb2xlLndhcm4oJ05vICcgKyBwbHVnaW5OYW1lICsgJyBlbGVtZW50IGV4aXN0LicpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZ2xvYmFsIHZhcmlhYmxlc1xyXG5cdFx0dmFyIGRhdGF0YWJsZSA9IHRoaXM7XHJcblxyXG5cdFx0Ly8gZGVidWcgZW5hYmxlZD9cclxuXHRcdC8vIDEpIHN0YXRlIHdpbGwgYmUgY2xlYXJlZCBvbiBlYWNoIHJlZnJlc2hcclxuXHRcdC8vIDIpIGVuYWJsZSBzb21lIGxvZ3NcclxuXHRcdC8vIDMpIGV0Yy5cclxuXHRcdGRhdGF0YWJsZS5kZWJ1ZyA9IGZhbHNlO1xyXG5cclxuXHRcdGRhdGF0YWJsZS5BUEkgPSB7XHJcblx0XHRcdHJlY29yZDogbnVsbCxcclxuXHRcdFx0dmFsdWU6IG51bGwsXHJcblx0XHRcdHBhcmFtczogbnVsbCxcclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIFBsdWdpbiA9IHtcclxuXHRcdFx0LyoqKioqKioqKioqKioqKioqKioqXHJcblx0XHRcdCAqKiBQUklWQVRFIE1FVEhPRFNcclxuXHRcdFx0ICoqKioqKioqKioqKioqKioqKioqL1xyXG5cdFx0XHRpc0luaXQ6IGZhbHNlLFxyXG5cdFx0XHRjZWxsT2Zmc2V0OiAxMTAsXHJcblx0XHRcdGljb25PZmZzZXQ6IDE1LFxyXG5cdFx0XHRzdGF0ZUlkOiAnbWV0YScsXHJcblx0XHRcdGFqYXhQYXJhbXM6IHt9LFxyXG5cdFx0XHRwYWdpbmdPYmplY3Q6IHt9LFxyXG5cclxuXHRcdFx0aW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG5cdFx0XHRcdHZhciBpc0h0bWxUYWJsZSA9IGZhbHNlO1xyXG5cdFx0XHRcdC8vIGRhdGEgc291cmNlIG9wdGlvbiBlbXB0eSBpcyBub3JtYWwgdGFibGVcclxuXHRcdFx0XHRpZiAob3B0aW9ucy5kYXRhLnNvdXJjZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0UGx1Z2luLmV4dHJhY3RUYWJsZSgpO1xyXG5cdFx0XHRcdFx0aXNIdG1sVGFibGUgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0UGx1Z2luLnNldHVwQmFzZURPTS5jYWxsKCk7XHJcblx0XHRcdFx0UGx1Z2luLnNldHVwRE9NKGRhdGF0YWJsZS50YWJsZSk7XHJcblxyXG5cdFx0XHRcdC8vIG9uIGV2ZW50IGFmdGVyIGxheW91dCBoYWQgZG9uZSBzZXR1cCwgc2hvdyBkYXRhdGFibGVcclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkub24ocGZ4ICsgJ2RhdGF0YWJsZS1vbi1sYXlvdXQtdXBkYXRlZCcsIFBsdWdpbi5hZnRlclJlbmRlcik7XHJcblxyXG5cdFx0XHRcdGlmIChkYXRhdGFibGUuZGVidWcpIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5zdGF0ZVJlbW92ZShQbHVnaW4uc3RhdGVJZCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvKnZhciBlcyA9IFBsdWdpbi5zdGF0ZUdldChQbHVnaW4uc3RhdGVJZCk7XHJcblx0XHRcdFx0dmFyIGVxID0ge307XHJcblx0XHRcdFx0aWYgKGVzICYmIGVzLmhhc093blByb3BlcnR5KCdxdWVyeScpKSB7XHJcblx0XHRcdFx0XHRlcSA9IGVzLnF1ZXJ5O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVF1ZXJ5KE9iamVjdC5hc3NpZ24oe30sIGVxLCBQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnNvdXJjZS5yZWFkLnBhcmFtcy5xdWVyeScpKSk7Ki9cclxuXHJcblx0XHRcdFx0Ly8gc2V0IGN1c3RvbSBxdWVyeSBmcm9tIG9wdGlvbnNcclxuXHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVF1ZXJ5KFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc291cmNlLnJlYWQucGFyYW1zLnF1ZXJ5JykpO1xyXG5cclxuXHRcdFx0XHQvLyBpbml0aWFsaXplIGV4dGVuc2lvbnNcclxuXHRcdFx0XHQkLmVhY2goUGx1Z2luLmdldE9wdGlvbignZXh0ZW5zaW9ucycpLCBmdW5jdGlvbihleHROYW1lLCBleHRPcHRpb25zKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mICQuZm5bcGx1Z2luTmFtZV1bZXh0TmFtZV0gPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBleHRPcHRpb25zICE9PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRcdFx0XHRcdGV4dE9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgZXh0T3B0aW9ucyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0bmV3ICQuZm5bcGx1Z2luTmFtZV1bZXh0TmFtZV0oZGF0YXRhYmxlLCBleHRPcHRpb25zKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0UGx1Z2luLnNwaW5uZXJDYWxsYmFjayh0cnVlKTtcclxuXHRcdFx0XHQvLyBnZXQgZGF0YVxyXG5cdFx0XHRcdGlmIChvcHRpb25zLmRhdGEudHlwZSA9PT0gJ3JlbW90ZScgfHwgb3B0aW9ucy5kYXRhLnR5cGUgPT09ICdsb2NhbCcpIHtcclxuXHRcdFx0XHRcdGlmIChvcHRpb25zLmRhdGEuc2F2ZVN0YXRlID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4uc3RhdGVSZW1vdmUoUGx1Z2luLnN0YXRlSWQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gZ2V0IGRhdGEgZm9yIGxvY2FsIGRhdGF0YWJsZSBhbmQgbG9jYWwgdGFibGVcclxuXHRcdFx0XHRcdGlmIChvcHRpb25zLmRhdGEudHlwZSA9PT0gJ2xvY2FsJyAmJiB0eXBlb2Ygb3B0aW9ucy5kYXRhLnNvdXJjZSA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSBkYXRhdGFibGUub3JpZ2luYWxEYXRhU2V0ID0gUGx1Z2luLmRhdGFNYXBDYWxsYmFjayhvcHRpb25zLmRhdGEuc291cmNlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFBsdWdpbi5kYXRhUmVuZGVyKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBpZiBodG1sIHRhYmxlLCByZW1vdmUgYW5kIHNldHVwIGEgbmV3IGhlYWRlclxyXG5cdFx0XHRcdGlmIChpc0h0bWxUYWJsZSkge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCd0cicpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVGb290KS5maW5kKCd0cicpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0UGx1Z2luLnNldEhlYWRUaXRsZSgpO1xyXG5cdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuZm9vdGVyJykpIHtcclxuXHRcdFx0XHRcdFBsdWdpbi5zZXRIZWFkVGl0bGUoZGF0YXRhYmxlLnRhYmxlRm9vdCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBoaWRlIGhlYWRlclxyXG5cdFx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5sYXlvdXQuaGVhZGVyICE9PSAndW5kZWZpbmVkJyAmJlxyXG5cdFx0XHRcdFx0b3B0aW9ucy5sYXlvdXQuaGVhZGVyID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmZpbmQoJ3RoZWFkJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBoaWRlIGZvb3RlclxyXG5cdFx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5sYXlvdXQuZm9vdGVyICE9PSAndW5kZWZpbmVkJyAmJlxyXG5cdFx0XHRcdFx0b3B0aW9ucy5sYXlvdXQuZm9vdGVyID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmZpbmQoJ3Rmb290JykucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBmb3Igbm9ybWFsIGFuZCBsb2NhbCBkYXRhIHR5cGUsIHJ1biBsYXlvdXRVcGRhdGVcclxuXHRcdFx0XHRpZiAob3B0aW9ucy5kYXRhLnR5cGUgPT09IG51bGwgfHxcclxuXHRcdFx0XHRcdG9wdGlvbnMuZGF0YS50eXBlID09PSAnbG9jYWwnKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0dXBDZWxsRmllbGQuY2FsbCgpO1xyXG5cdFx0XHRcdFx0UGx1Z2luLnNldHVwVGVtcGxhdGVDZWxsLmNhbGwoKTtcclxuXHJcblx0XHRcdFx0XHQvLyBzZXR1cCBuZXN0ZWQgZGF0YXRhYmxlLCBpZiBvcHRpb24gZW5hYmxlZFxyXG5cdFx0XHRcdFx0UGx1Z2luLnNldHVwU3ViRGF0YXRhYmxlLmNhbGwoKTtcclxuXHJcblx0XHRcdFx0XHQvLyBzZXR1cCBleHRyYSBzeXN0ZW0gY29sdW1uIHByb3BlcnRpZXNcclxuXHRcdFx0XHRcdFBsdWdpbi5zZXR1cFN5c3RlbUNvbHVtbi5jYWxsKCk7XHJcblx0XHRcdFx0XHRQbHVnaW4ucmVkcmF3KCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgd2lkdGg7XHJcblx0XHRcdFx0dmFyIGluaXRpYWxXaWR0aCA9IGZhbHNlO1xyXG5cdFx0XHRcdCQod2luZG93KS5yZXNpemUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQvLyBpc3N1ZTogVVJMIEJhciBSZXNpemluZyBvbiBtb2JpbGUsIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTYvMTIvdXJsLWJhci1yZXNpemluZ1xyXG5cdFx0XHRcdFx0Ly8gdHJpZ2dlciBkYXRhdGFibGUgcmVzaXplIG9uIHdpZHRoIGNoYW5nZSBvbmx5XHJcblx0XHRcdFx0XHRpZiAoJCh0aGlzKS53aWR0aCgpICE9PSB3aWR0aCkge1xyXG5cdFx0XHRcdFx0XHR3aWR0aCA9ICQodGhpcykud2lkdGgoKTtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLmZ1bGxSZW5kZXIoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC8vIGdldCBpbml0aWFsIHdpZHRoXHJcblx0XHRcdFx0XHRpZiAoIWluaXRpYWxXaWR0aCkge1xyXG5cdFx0XHRcdFx0XHR3aWR0aCA9ICQodGhpcykud2lkdGgoKTtcclxuXHRcdFx0XHRcdFx0aW5pdGlhbFdpZHRoID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0JChkYXRhdGFibGUpLmhlaWdodCgnJyk7XHJcblxyXG5cdFx0XHRcdHZhciBwcmV2S2V5d29yZCA9ICcnO1xyXG5cdFx0XHRcdCQoUGx1Z2luLmdldE9wdGlvbignc2VhcmNoLmlucHV0JykpLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCdzZWFyY2gub25FbnRlcicpICYmIGUud2hpY2ggIT09IDEzKSByZXR1cm47XHJcblx0XHRcdFx0XHR2YXIga2V5d29yZCA9ICQodGhpcykudmFsKCk7XHJcblx0XHRcdFx0XHQvLyBwcmV2ZW50IG11bHRpcGxlIHNlYXJjaCByZXF1ZXN0IG9uIGV2ZXJ5IGJ1dHRvbiBrZXl1cFxyXG5cdFx0XHRcdFx0aWYgKHByZXZLZXl3b3JkICE9PSBrZXl3b3JkKSB7XHJcblx0XHRcdFx0XHRcdFBsdWdpbi5zZWFyY2goa2V5d29yZCk7XHJcblx0XHRcdFx0XHRcdHByZXZLZXl3b3JkID0ga2V5d29yZDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBFeHRyYWN0IHN0YXRpYyBIVE1MIHRhYmxlIGNvbnRlbnQgaW50byBkYXRhc291cmNlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRleHRyYWN0VGFibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBjb2x1bW5zID0gW107XHJcblx0XHRcdFx0dmFyIGhlYWRlcnMgPSAkKGRhdGF0YWJsZSkuZmluZCgndHI6Zmlyc3QtY2hpbGQgdGgnKS5nZXQoKS5tYXAoZnVuY3Rpb24oY2VsbCwgaSkge1xyXG5cdFx0XHRcdFx0dmFyIGZpZWxkID0gJChjZWxsKS5kYXRhKCdmaWVsZCcpO1xyXG5cdFx0XHRcdFx0dmFyIHRpdGxlID0gJChjZWxsKS5kYXRhKCd0aXRsZScpO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBmaWVsZCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0ZmllbGQgPSAkKGNlbGwpLnRleHQoKS50cmltKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIHRpdGxlID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHR0aXRsZSA9ICQoY2VsbCkudGV4dCgpLnRyaW0oKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHZhciBjb2x1bW4gPSB7ZmllbGQ6IGZpZWxkLCB0aXRsZTogdGl0bGV9O1xyXG5cdFx0XHRcdFx0Zm9yICh2YXIgaWkgaW4gb3B0aW9ucy5jb2x1bW5zKSB7XHJcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLmNvbHVtbnNbaWldLmZpZWxkID09PSBmaWVsZCkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbHVtbiA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zLmNvbHVtbnNbaWldLCBjb2x1bW4pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjb2x1bW5zLnB1c2goY29sdW1uKTtcclxuXHRcdFx0XHRcdHJldHVybiBmaWVsZDtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHQvLyBhdXRvIGNyZWF0ZSBjb2x1bW5zIGNvbmZpZ1xyXG5cdFx0XHRcdG9wdGlvbnMuY29sdW1ucyA9IGNvbHVtbnM7XHJcblxyXG5cdFx0XHRcdHZhciByb3dQcm9wID0gW107XHJcblx0XHRcdFx0dmFyIHNvdXJjZSA9IFtdO1xyXG5cclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkuZmluZCgndHInKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKCQodGhpcykuZmluZCgndGQnKS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0cm93UHJvcC5wdXNoKCQodGhpcykucHJvcCgnYXR0cmlidXRlcycpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHZhciB0ZCA9IHt9O1xyXG5cdFx0XHRcdFx0JCh0aGlzKS5maW5kKCd0ZCcpLmVhY2goZnVuY3Rpb24oaSwgY2VsbCkge1xyXG5cdFx0XHRcdFx0XHR0ZFtoZWFkZXJzW2ldXSA9IGNlbGwuaW5uZXJIVE1MLnRyaW0oKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0aWYgKCF1dGlsLmlzRW1wdHkodGQpKSB7XHJcblx0XHRcdFx0XHRcdHNvdXJjZS5wdXNoKHRkKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0b3B0aW9ucy5kYXRhLmF0dHIucm93UHJvcHMgPSByb3dQcm9wO1xyXG5cdFx0XHRcdG9wdGlvbnMuZGF0YS5zb3VyY2UgPSBzb3VyY2U7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogT25lIHRpbWUgbGF5b3V0IHVwZGF0ZSBvbiBpbml0XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRsYXlvdXRVcGRhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIHNldHVwIG5lc3RlZCBkYXRhdGFibGUsIGlmIG9wdGlvbiBlbmFibGVkXHJcblx0XHRcdFx0UGx1Z2luLnNldHVwU3ViRGF0YXRhYmxlLmNhbGwoKTtcclxuXHJcblx0XHRcdFx0Ly8gc2V0dXAgZXh0cmEgc3lzdGVtIGNvbHVtbiBwcm9wZXJ0aWVzXHJcblx0XHRcdFx0UGx1Z2luLnNldHVwU3lzdGVtQ29sdW1uLmNhbGwoKTtcclxuXHJcblx0XHRcdFx0Ly8gc2V0dXAgY2VsbCBob3ZlciBldmVudFxyXG5cdFx0XHRcdFBsdWdpbi5zZXR1cEhvdmVyLmNhbGwoKTtcclxuXHJcblx0XHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmRldGFpbCA9PT0gJ3VuZGVmaW5lZCdcclxuXHRcdFx0XHRcdC8vIHRlbXBvcmFyeSBkaXNhYmxlIGxvY2sgY29sdW1uIGluIHN1YnRhYmxlXHJcblx0XHRcdFx0XHQmJiBQbHVnaW4uZ2V0RGVwdGgoKSA9PT0gMSkge1xyXG5cdFx0XHRcdFx0Ly8gbG9jayBjb2x1bW5zIGhhbmRsZXJcclxuXHRcdFx0XHRcdFBsdWdpbi5sb2NrVGFibGUuY2FsbCgpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0UGx1Z2luLnJlc2V0U2Nyb2xsKCk7XHJcblxyXG5cdFx0XHRcdC8vIGNoZWNrIGlmIG5vdCBpcyBhIGxvY2tlZCBjb2x1bW5cclxuXHRcdFx0XHRpZiAoIVBsdWdpbi5pc0xvY2tlZCgpKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4ucmVkcmF3LmNhbGwoKTtcclxuXHRcdFx0XHRcdC8vIGNoZWNrIGlmIGl0cyBub3QgYSBzdWJ0YWJsZSBhbmQgaGFzIGF1dG9IaWRlIG9wdGlvbiBlbmFibGVkXHJcblx0XHRcdFx0XHRpZiAoIVBsdWdpbi5pc1N1YnRhYmxlKCkgJiYgUGx1Z2luLmdldE9wdGlvbigncm93cy5hdXRvSGlkZScpID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdFBsdWdpbi5hdXRvSGlkZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gcmVzZXQgcm93XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmNzcygnaGVpZ2h0JywgJycpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0UGx1Z2luLmNvbHVtbkhpZGUuY2FsbCgpO1xyXG5cclxuXHRcdFx0XHRQbHVnaW4ucm93RXZlbk9kZC5jYWxsKCk7XHJcblxyXG5cdFx0XHRcdFBsdWdpbi5zb3J0aW5nLmNhbGwoKTtcclxuXHJcblx0XHRcdFx0UGx1Z2luLnNjcm9sbGJhci5jYWxsKCk7XHJcblxyXG5cdFx0XHRcdGlmICghUGx1Z2luLmlzSW5pdCkge1xyXG5cdFx0XHRcdFx0Ly8gcnVuIG9uY2UgZHJvcGRvd24gaW5zaWRlIGRhdGF0YWJsZVxyXG5cdFx0XHRcdFx0UGx1Z2luLmRyb3Bkb3duRml4KCk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWluaXQnLCB7dGFibGU6ICQoZGF0YXRhYmxlLndyYXApLmF0dHIoJ2lkJyksIG9wdGlvbnM6IG9wdGlvbnN9KTtcclxuXHRcdFx0XHRcdFBsdWdpbi5pc0luaXQgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGZ4ICsgJ2RhdGF0YWJsZS1vbi1sYXlvdXQtdXBkYXRlZCcsIHt0YWJsZTogJChkYXRhdGFibGUud3JhcCkuYXR0cignaWQnKX0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0ZHJvcGRvd25GaXg6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBkcm9wZG93bk1lbnU7XHJcblx0XHRcdFx0JCgnYm9keScpLm9uKCdzaG93LmJzLmRyb3Bkb3duJywgJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZSAuJyArIHBmeCArICdkYXRhdGFibGUtYm9keScsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdGRyb3Bkb3duTWVudSA9ICQoZS50YXJnZXQpLmZpbmQoJy5kcm9wZG93bi1tZW51Jyk7XHJcblx0XHRcdFx0XHQkKCdib2R5JykuYXBwZW5kKGRyb3Bkb3duTWVudS5kZXRhY2goKSk7XHJcblx0XHRcdFx0XHRkcm9wZG93bk1lbnUuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcblx0XHRcdFx0XHRkcm9wZG93bk1lbnUucG9zaXRpb24oe1xyXG5cdFx0XHRcdFx0XHQnbXknOiAncmlnaHQgdG9wJyxcclxuXHRcdFx0XHRcdFx0J2F0JzogJ3JpZ2h0IGJvdHRvbScsXHJcblx0XHRcdFx0XHRcdCdvZic6ICQoZS5yZWxhdGVkVGFyZ2V0KSxcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0Ly8gaWYgZGF0YXRhYmxlIGlzIGluc2lkZSBtb2RhbFxyXG5cdFx0XHRcdFx0aWYgKGRhdGF0YWJsZS5jbG9zZXN0KCcubW9kYWwnKS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0Ly8gaW5jcmVhc2UgZHJvcGRvd24gei1pbmRleFxyXG5cdFx0XHRcdFx0XHRkcm9wZG93bk1lbnUuY3NzKCd6LWluZGV4JywgJzIwMDAnKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KS5vbignaGlkZS5icy5kcm9wZG93bicsICcuJyArIHBmeCArICdkYXRhdGFibGUgLicgKyBwZnggKyAnZGF0YXRhYmxlLWJvZHknLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHQkKGUudGFyZ2V0KS5hcHBlbmQoZHJvcGRvd25NZW51LmRldGFjaCgpKTtcclxuXHRcdFx0XHRcdGRyb3Bkb3duTWVudS5oaWRlKCk7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vIHJlbW92ZSBkcm9wZG93biBpZiB3aW5kb3cgcmVzaXplXHJcblx0XHRcdFx0JCh3aW5kb3cpLm9uKCdyZXNpemUnLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGRyb3Bkb3duTWVudSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0ZHJvcGRvd25NZW51LmhpZGUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGxvY2tUYWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGxvY2sgPSB7XHJcblx0XHRcdFx0XHRsb2NrRW5hYmxlZDogZmFsc2UsXHJcblx0XHRcdFx0XHRpbml0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0Ly8gY2hlY2sgaWYgdGFibGUgc2hvdWxkIGJlIGxvY2tlZCBjb2x1bW5zXHJcblx0XHRcdFx0XHRcdGxvY2subG9ja0VuYWJsZWQgPSBQbHVnaW4ubG9ja0VuYWJsZWRDb2x1bW5zKCk7XHJcblx0XHRcdFx0XHRcdGlmIChsb2NrLmxvY2tFbmFibGVkLmxlZnQubGVuZ3RoID09PSAwICYmXHJcblx0XHRcdFx0XHRcdFx0bG9jay5sb2NrRW5hYmxlZC5yaWdodC5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0bG9jay5lbmFibGUoKTtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRlbmFibGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgZW5hYmxlTG9jayA9IGZ1bmN0aW9uKHRhYmxlUGFydCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGNoZWNrIGlmIGFscmVhZHkgaGFzIGxvY2sgY29sdW1uXHJcblx0XHRcdFx0XHRcdFx0aWYgKCQodGFibGVQYXJ0KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jaycpLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFBsdWdpbi5sb2coJ0xvY2tlZCBjb250YWluZXIgYWxyZWFkeSBleGlzdCBpbjogJywgdGFibGVQYXJ0KTtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Ly8gY2hlY2sgaWYgbm8gcm93cyBleGlzdHNcclxuXHRcdFx0XHRcdFx0XHRpZiAoJCh0YWJsZVBhcnQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFBsdWdpbi5sb2coJ05vIHJvdyBleGlzdCBpbjogJywgdGFibGVQYXJ0KTtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGxvY2tlZCBkaXYgY29udGFpbmVyXHJcblx0XHRcdFx0XHRcdFx0dmFyIGxvY2tMZWZ0ID0gJCgnPGRpdi8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1sb2NrICcgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stbGVmdCcpO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBsb2NrU2Nyb2xsID0gJCgnPGRpdi8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1sb2NrICcgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stc2Nyb2xsJyk7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGxvY2tSaWdodCA9ICQoJzxkaXYvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtbG9jayAnICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrLXJpZ2h0Jyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdCQodGFibGVQYXJ0KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGNyZWF0ZSBuZXcgcm93IGZvciBsb2NrIGNvbHVtbnMgYW5kIHBhc3MgdGhlIGRhdGFcclxuXHRcdFx0XHRcdFx0XHRcdHZhciByb3dMZWZ0ID0gJCgnPHRyLz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdycpLmRhdGEoJ29iaicsICQodGhpcykuZGF0YSgnb2JqJykpLmFwcGVuZFRvKGxvY2tMZWZ0KTtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciByb3dTY3JvbGwgPSAkKCc8dHIvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93JykuZGF0YSgnb2JqJywgJCh0aGlzKS5kYXRhKCdvYmonKSkuYXBwZW5kVG8obG9ja1Njcm9sbCk7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgcm93UmlnaHQgPSAkKCc8dHIvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93JykuZGF0YSgnb2JqJywgJCh0aGlzKS5kYXRhKCdvYmonKSkuYXBwZW5kVG8obG9ja1JpZ2h0KTtcclxuXHRcdFx0XHRcdFx0XHRcdCQodGhpcykuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgbG9ja2VkID0gJCh0aGlzKS5kYXRhKCdsb2NrZWQnKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBsb2NrZWQgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBsb2NrZWQubGVmdCAhPT0gJ3VuZGVmaW5lZCcgfHwgbG9ja2VkID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBkZWZhdWx0IGxvY2tlZCB0byBsZWZ0XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKHRoaXMpLmFwcGVuZFRvKHJvd0xlZnQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGxvY2tlZC5yaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQodGhpcykuYXBwZW5kVG8ocm93UmlnaHQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQkKHRoaXMpLmFwcGVuZFRvKHJvd1Njcm9sbCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIG9sZCByb3dcclxuXHRcdFx0XHRcdFx0XHRcdCQodGhpcykucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChsb2NrLmxvY2tFbmFibGVkLmxlZnQubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0JChkYXRhdGFibGUud3JhcCkuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1sb2NrJyk7XHJcblx0XHRcdFx0XHRcdFx0XHQkKGxvY2tMZWZ0KS5hcHBlbmRUbyh0YWJsZVBhcnQpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZiAobG9jay5sb2NrRW5hYmxlZC5sZWZ0Lmxlbmd0aCA+IDAgfHwgbG9jay5sb2NrRW5hYmxlZC5yaWdodC5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKGxvY2tTY3JvbGwpLmFwcGVuZFRvKHRhYmxlUGFydCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmIChsb2NrLmxvY2tFbmFibGVkLnJpZ2h0Lmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLndyYXApLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtbG9jaycpO1xyXG5cdFx0XHRcdFx0XHRcdFx0JChsb2NrUmlnaHQpLmFwcGVuZFRvKHRhYmxlUGFydCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmZpbmQoJ3RoZWFkLHRib2R5LHRmb290JykuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgdGFibGVQYXJ0ID0gdGhpcztcclxuXHRcdFx0XHRcdFx0XHRpZiAoJCh0aGlzKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jaycpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0JCh0aGlzKS5yZWFkeShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZW5hYmxlTG9jayh0YWJsZVBhcnQpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRsb2NrLmluaXQoKTtcclxuXHRcdFx0XHRyZXR1cm4gbG9jaztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBSZW5kZXIgZXZlcnl0aGluZyBmb3IgcmVzaXplXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRmdWxsUmVuZGVyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmVtcHR5KCk7XHJcblx0XHRcdFx0UGx1Z2luLnNldEhlYWRUaXRsZSgpO1xyXG5cdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuZm9vdGVyJykpIHtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlRm9vdCkuZW1wdHkoKTtcclxuXHRcdFx0XHRcdFBsdWdpbi5zZXRIZWFkVGl0bGUoZGF0YXRhYmxlLnRhYmxlRm9vdCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKHRydWUpO1xyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLndyYXApLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtbG9hZGVkJyk7XHJcblxyXG5cdFx0XHRcdFBsdWdpbi5pbnNlcnREYXRhKCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRsb2NrRW5hYmxlZENvbHVtbnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBzY3JlZW4gPSAkKHdpbmRvdykud2lkdGgoKTtcclxuXHRcdFx0XHR2YXIgY29sdW1ucyA9IG9wdGlvbnMuY29sdW1ucztcclxuXHRcdFx0XHR2YXIgZW5hYmxlZCA9IHtsZWZ0OiBbXSwgcmlnaHQ6IFtdfTtcclxuXHRcdFx0XHQkLmVhY2goY29sdW1ucywgZnVuY3Rpb24oaSwgY29sdW1uKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5sb2NrZWQgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLmxvY2tlZC5sZWZ0ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdGlmICh1dGlsLmdldEJyZWFrcG9pbnQoY29sdW1uLmxvY2tlZC5sZWZ0KSA8PSBzY3JlZW4pIHtcclxuXHRcdFx0XHRcdFx0XHRcdGVuYWJsZWRbJ2xlZnQnXS5wdXNoKGNvbHVtbi5sb2NrZWQubGVmdCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLmxvY2tlZC5yaWdodCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAodXRpbC5nZXRCcmVha3BvaW50KGNvbHVtbi5sb2NrZWQucmlnaHQpIDw9IHNjcmVlbikge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlZFsncmlnaHQnXS5wdXNoKGNvbHVtbi5sb2NrZWQucmlnaHQpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybiBlbmFibGVkO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEFmdGVyIHJlbmRlciBldmVudCwgY2FsbGVkIGJ5IFwiZGF0YXRhYmxlLW9uLWxheW91dC11cGRhdGVkXCJcclxuXHRcdFx0ICogQHBhcmFtIGVcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3NcclxuXHRcdFx0ICovXHJcblx0XHRcdGFmdGVyUmVuZGVyOiBmdW5jdGlvbihlLCBhcmdzKSB7XHJcblx0XHRcdFx0JChkYXRhdGFibGUpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Ly8gcmVkcmF3IGxvY2tlZCBjb2x1bW5zIHRhYmxlXHJcblx0XHRcdFx0XHRpZiAoUGx1Z2luLmlzTG9ja2VkKCkpIHtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLnJlZHJhdygpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuY3NzKCd2aXNpYmlsaXR5JywgJycpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUud3JhcCkuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1sb2FkZWQnKTtcclxuXHJcblx0XHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKGZhbHNlKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGhvdmVyVGltZXI6IDAsXHJcblx0XHRcdGlzU2Nyb2xsaW5nOiBmYWxzZSxcclxuXHRcdFx0c2V0dXBIb3ZlcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0JCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHQvLyBzdG9wIGhvdmVyIHdoZW4gc2Nyb2xsaW5nXHJcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoUGx1Z2luLmhvdmVyVGltZXIpO1xyXG5cdFx0XHRcdFx0UGx1Z2luLmlzU2Nyb2xsaW5nID0gdHJ1ZTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLm9mZignbW91c2VlbnRlcicsICdtb3VzZWxlYXZlJykub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdC8vIHJlc2V0IHNjcm9sbCB0aW1lciB0byBob3ZlciBjbGFzc1xyXG5cdFx0XHRcdFx0UGx1Z2luLmhvdmVyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4uaXNTY3JvbGxpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH0sIDIwMCk7XHJcblx0XHRcdFx0XHRpZiAoUGx1Z2luLmlzU2Nyb2xsaW5nKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0Ly8gbm9ybWFsIHRhYmxlXHJcblx0XHRcdFx0XHR2YXIgcm93ID0gJCh0aGlzKS5jbG9zZXN0KCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctaG92ZXInKTtcclxuXHRcdFx0XHRcdHZhciBpbmRleCA9ICQocm93KS5pbmRleCgpICsgMTtcclxuXHJcblx0XHRcdFx0XHQvLyBsb2NrIHRhYmxlXHJcblx0XHRcdFx0XHQkKHJvdykuY2xvc2VzdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2snKS5wYXJlbnQoKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93Om50aC1jaGlsZCgnICsgaW5kZXggKyAnKScpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LWhvdmVyJyk7XHJcblx0XHRcdFx0fSkub24oJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdC8vIG5vcm1hbCB0YWJsZVxyXG5cdFx0XHRcdFx0dmFyIHJvdyA9ICQodGhpcykuY2xvc2VzdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LWhvdmVyJyk7XHJcblx0XHRcdFx0XHR2YXIgaW5kZXggPSAkKHJvdykuaW5kZXgoKSArIDE7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbG9vayB0YWJsZVxyXG5cdFx0XHRcdFx0JChyb3cpLmNsb3Nlc3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrJykucGFyZW50KCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdzpudGgtY2hpbGQoJyArIGluZGV4ICsgJyknKS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1ob3ZlcicpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEFkanVzdCB3aWR0aCBvZiBsb2NrZWQgdGFibGUgY29udGFpbmVycyBieSByZXNpemUgaGFuZGxlclxyXG5cdFx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0YWRqdXN0TG9ja0NvbnRhaW5lcjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCFQbHVnaW4uaXNMb2NrZWQoKSkgcmV0dXJuIDA7XHJcblxyXG5cdFx0XHRcdC8vIHJlZmVyIHRvIGhlYWQgZGltZW5zaW9uXHJcblx0XHRcdFx0dmFyIGNvbnRhaW5lcldpZHRoID0gJChkYXRhdGFibGUudGFibGVIZWFkKS53aWR0aCgpO1xyXG5cdFx0XHRcdHZhciBsb2NrTGVmdCA9ICQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stbGVmdCcpLndpZHRoKCk7XHJcblx0XHRcdFx0dmFyIGxvY2tSaWdodCA9ICQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stcmlnaHQnKS53aWR0aCgpO1xyXG5cclxuXHRcdFx0XHRpZiAodHlwZW9mIGxvY2tMZWZ0ID09PSAndW5kZWZpbmVkJykgbG9ja0xlZnQgPSAwO1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgbG9ja1JpZ2h0ID09PSAndW5kZWZpbmVkJykgbG9ja1JpZ2h0ID0gMDtcclxuXHJcblx0XHRcdFx0dmFyIGxvY2tTY3JvbGwgPSBNYXRoLmZsb29yKGNvbnRhaW5lcldpZHRoIC0gbG9ja0xlZnQgLSBsb2NrUmlnaHQpO1xyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1zY3JvbGwnKS5jc3MoJ3dpZHRoJywgbG9ja1Njcm9sbCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBsb2NrU2Nyb2xsO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIHRvZG87IG5vdCBpbiB1c2VcclxuXHRcdFx0ICovXHJcblx0XHRcdGRyYWdSZXNpemU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBwcmVzc2VkID0gZmFsc2U7XHJcblx0XHRcdFx0dmFyIHN0YXJ0ID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdHZhciBzdGFydFgsIHN0YXJ0V2lkdGg7XHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLm1vdXNlZG93bihmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRzdGFydCA9ICQodGhpcyk7XHJcblx0XHRcdFx0XHRwcmVzc2VkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdHN0YXJ0WCA9IGUucGFnZVg7XHJcblx0XHRcdFx0XHRzdGFydFdpZHRoID0gJCh0aGlzKS53aWR0aCgpO1xyXG5cdFx0XHRcdFx0JChzdGFydCkuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1jZWxsLXJlc2l6aW5nJyk7XHJcblxyXG5cdFx0XHRcdH0pLm1vdXNlbW92ZShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRpZiAocHJlc3NlZCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgaSA9ICQoc3RhcnQpLmluZGV4KCk7XHJcblx0XHRcdFx0XHRcdHZhciB0YWJsZUJvZHkgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpO1xyXG5cdFx0XHRcdFx0XHR2YXIgaWZMb2NrZWQgPSAkKHN0YXJ0KS5jbG9zZXN0KCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jaycpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKGlmTG9ja2VkKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGxvY2tlZEluZGV4ID0gJChpZkxvY2tlZCkuaW5kZXgoKTtcclxuXHRcdFx0XHRcdFx0XHR0YWJsZUJvZHkgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrJykuZXEobG9ja2VkSW5kZXgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQkKHRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmVhY2goZnVuY3Rpb24odHJpLCB0cikge1xyXG5cdFx0XHRcdFx0XHRcdCQodHIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuZXEoaSkud2lkdGgoc3RhcnRXaWR0aCArIChlLnBhZ2VYIC0gc3RhcnRYKSkuY2hpbGRyZW4oKS53aWR0aChzdGFydFdpZHRoICsgKGUucGFnZVggLSBzdGFydFgpKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQkKHN0YXJ0KS5jaGlsZHJlbigpLmNzcygnd2lkdGgnLCBzdGFydFdpZHRoICsgKGUucGFnZVggLSBzdGFydFgpKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSkubW91c2V1cChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdCQoc3RhcnQpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtY2VsbC1yZXNpemluZycpO1xyXG5cdFx0XHRcdFx0cHJlc3NlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQkKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0JChzdGFydCkucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1jZWxsLXJlc2l6aW5nJyk7XHJcblx0XHRcdFx0XHRwcmVzc2VkID0gZmFsc2U7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogVG8gcHJlcGFyZSBwbGFjZWhvbGRlciBmb3IgdGFibGUgYmVmb3JlIGNvbnRlbnQgaXMgbG9hZGluZ1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0aW5pdEhlaWdodDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKG9wdGlvbnMubGF5b3V0LmhlaWdodCAmJiBvcHRpb25zLmxheW91dC5zY3JvbGwpIHtcclxuXHRcdFx0XHRcdHZhciB0aGVhZEhlaWdodCA9ICQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLm91dGVySGVpZ2h0KCk7XHJcblx0XHRcdFx0XHR2YXIgdGZvb3RIZWlnaHQgPSAkKGRhdGF0YWJsZS50YWJsZUZvb3QpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5vdXRlckhlaWdodCgpO1xyXG5cdFx0XHRcdFx0dmFyIGJvZHlIZWlnaHQgPSBvcHRpb25zLmxheW91dC5oZWlnaHQ7XHJcblx0XHRcdFx0XHRpZiAodGhlYWRIZWlnaHQgPiAwKSB7XHJcblx0XHRcdFx0XHRcdGJvZHlIZWlnaHQgLT0gdGhlYWRIZWlnaHQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAodGZvb3RIZWlnaHQgPiAwKSB7XHJcblx0XHRcdFx0XHRcdGJvZHlIZWlnaHQgLT0gdGZvb3RIZWlnaHQ7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2Nyb2xsYmFyIG9mZnNldFxyXG5cdFx0XHRcdFx0Ym9keUhlaWdodCAtPSAyO1xyXG5cclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuY3NzKCdtYXgtaGVpZ2h0JywgTWF0aC5mbG9vcihwYXJzZUZsb2F0KGJvZHlIZWlnaHQpKSk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2V0IHNjcm9sbGFibGUgYXJlYSBmaXhlZCBoZWlnaHRcclxuXHRcdFx0XHRcdC8vICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stc2Nyb2xsJykuY3NzKCdoZWlnaHQnLCBNYXRoLmZsb29yKHBhcnNlRmxvYXQoYm9keUhlaWdodCkpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0dXAgYmFzZSBET00gKHRhYmxlLCB0aGVhZCwgdGJvZHksIHRmb290KSBhbmQgY3JlYXRlIGlmIG5vdFxyXG5cdFx0XHQgKiBleGlzdC5cclxuXHRcdFx0ICovXHJcblx0XHRcdHNldHVwQmFzZURPTTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8ga2VlcCBvcmlnaW5hbCBzdGF0ZSBiZWZvcmUgZGF0YXRhYmxlIGluaXRpYWxpemVcclxuXHRcdFx0XHRkYXRhdGFibGUuaW5pdGlhbERhdGF0YWJsZSA9ICQoZGF0YXRhYmxlKS5jbG9uZSgpO1xyXG5cclxuXHRcdFx0XHQvLyBtYWluIGVsZW1lbnRcclxuXHRcdFx0XHRpZiAoJChkYXRhdGFibGUpLnByb3AoJ3RhZ05hbWUnKSA9PT0gJ1RBQkxFJykge1xyXG5cdFx0XHRcdFx0Ly8gaWYgbWFpbiBpbml0IGVsZW1lbnQgaXMgPHRhYmxlPiwgd3JhcCB3aXRoIGRpdlxyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlID0gJChkYXRhdGFibGUpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUnKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXRhYmxlJyk7XHJcblx0XHRcdFx0XHRpZiAoJChkYXRhdGFibGUudGFibGUpLnBhcmVudHMoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZScpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUudGFibGUud3JhcCgkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS0nICsgb3B0aW9ucy5sYXlvdXQudGhlbWUpKTtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLndyYXAgPSAkKGRhdGF0YWJsZS50YWJsZSkucGFyZW50KCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIGNyZWF0ZSB0YWJsZVxyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLndyYXAgPSAkKGRhdGF0YWJsZSkuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZScpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtJyArIG9wdGlvbnMubGF5b3V0LnRoZW1lKTtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS50YWJsZSA9ICQoJzx0YWJsZS8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS10YWJsZScpLmFwcGVuZFRvKGRhdGF0YWJsZSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMubGF5b3V0LmNsYXNzICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUud3JhcCkuYWRkQ2xhc3Mob3B0aW9ucy5sYXlvdXQuY2xhc3MpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtZGVzdHJveWVkJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcblxyXG5cdFx0XHRcdC8vIGZvcmNlIGRpc2FibGUgc2F2ZSBzdGF0ZVxyXG5cdFx0XHRcdGlmICh0eXBlb2YgJChkYXRhdGFibGUpLmF0dHIoJ2lkJykgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0T3B0aW9uKCdkYXRhLnNhdmVTdGF0ZScsIGZhbHNlKTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlKS5hdHRyKCdpZCcsIHV0aWwuZ2V0VW5pcXVlSUQocGZ4ICsgJ2RhdGF0YWJsZS0nKSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBwcmVkZWZpbmUgdGFibGUgaGVpZ2h0XHJcblx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5taW5IZWlnaHQnKSlcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlKS5jc3MoJ21pbi1oZWlnaHQnLCBQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQubWluSGVpZ2h0JykpO1xyXG5cclxuXHRcdFx0XHRpZiAoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0LmhlaWdodCcpKVxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmNzcygnbWF4LWhlaWdodCcsIFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5oZWlnaHQnKSk7XHJcblxyXG5cdFx0XHRcdC8vIGZvciBub3JtYWwgdGFibGUgbG9hZFxyXG5cdFx0XHRcdGlmIChvcHRpb25zLmRhdGEudHlwZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmNzcygnd2lkdGgnLCAnJykuY3NzKCdkaXNwbGF5JywgJycpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gY3JlYXRlIHRhYmxlIGhlYWQgZWxlbWVudFxyXG5cdFx0XHRcdGRhdGF0YWJsZS50YWJsZUhlYWQgPSAkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgndGhlYWQnKTtcclxuXHRcdFx0XHRpZiAoJChkYXRhdGFibGUudGFibGVIZWFkKS5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS50YWJsZUhlYWQgPSAkKCc8dGhlYWQvPicpLnByZXBlbmRUbyhkYXRhdGFibGUudGFibGUpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gY3JlYXRlIHRhYmxlIGhlYWQgZWxlbWVudFxyXG5cdFx0XHRcdGRhdGF0YWJsZS50YWJsZUJvZHkgPSAkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgndGJvZHknKTtcclxuXHRcdFx0XHRpZiAoJChkYXRhdGFibGUudGFibGVCb2R5KS5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS50YWJsZUJvZHkgPSAkKCc8dGJvZHkvPicpLmFwcGVuZFRvKGRhdGF0YWJsZS50YWJsZSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAodHlwZW9mIG9wdGlvbnMubGF5b3V0LmZvb3RlciAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuXHRcdFx0XHRcdG9wdGlvbnMubGF5b3V0LmZvb3Rlcikge1xyXG5cdFx0XHRcdFx0Ly8gY3JlYXRlIHRhYmxlIGZvb3QgZWxlbWVudFxyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlRm9vdCA9ICQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCd0Zm9vdCcpO1xyXG5cdFx0XHRcdFx0aWYgKCQoZGF0YXRhYmxlLnRhYmxlRm9vdCkubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS50YWJsZUZvb3QgPSAkKCc8dGZvb3QvPicpLmFwcGVuZFRvKGRhdGF0YWJsZS50YWJsZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNldCBjb2x1bW4gZGF0YSBiZWZvcmUgdGFibGUgbWFuaXB1bGF0aW9uLlxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0dXBDZWxsRmllbGQ6IGZ1bmN0aW9uKHRhYmxlUGFydHMpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIHRhYmxlUGFydHMgPT09ICd1bmRlZmluZWQnKSB0YWJsZVBhcnRzID0gJChkYXRhdGFibGUudGFibGUpLmNoaWxkcmVuKCk7XHJcblx0XHRcdFx0dmFyIGNvbHVtbnMgPSBvcHRpb25zLmNvbHVtbnM7XHJcblx0XHRcdFx0JC5lYWNoKHRhYmxlUGFydHMsIGZ1bmN0aW9uKHBhcnQsIHRhYmxlUGFydCkge1xyXG5cdFx0XHRcdFx0JCh0YWJsZVBhcnQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5lYWNoKGZ1bmN0aW9uKHRyaSwgdHIpIHtcclxuXHRcdFx0XHRcdFx0Ly8gcHJlcGFyZSBkYXRhXHJcblx0XHRcdFx0XHRcdCQodHIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuZWFjaChmdW5jdGlvbih0ZGksIHRkKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW5zW3RkaV0gIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKHRkKS5kYXRhKGNvbHVtbnNbdGRpXSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNldCBjb2x1bW4gdGVtcGxhdGUgY2FsbGJhY2tcclxuXHRcdFx0ICogQHBhcmFtIHRhYmxlUGFydFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0dXBUZW1wbGF0ZUNlbGw6IGZ1bmN0aW9uKHRhYmxlUGFydCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgdGFibGVQYXJ0ID09PSAndW5kZWZpbmVkJykgdGFibGVQYXJ0ID0gZGF0YXRhYmxlLnRhYmxlQm9keTtcclxuXHRcdFx0XHR2YXIgY29sdW1ucyA9IG9wdGlvbnMuY29sdW1ucztcclxuXHRcdFx0XHQkKHRhYmxlUGFydCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmVhY2goZnVuY3Rpb24odHJpLCB0cikge1xyXG5cdFx0XHRcdFx0Ly8gcm93IGRhdGEgb2JqZWN0LCBpZiBhbnlcclxuXHRcdFx0XHRcdHZhciBvYmogPSAkKHRyKS5kYXRhKCdvYmonKTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gQGRlcHJlY2F0ZWQgaW4gdjUuMC42XHJcblx0XHRcdFx0XHQvLyBvYmpbJ2dldEluZGV4J10gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdC8vIFx0cmV0dXJuIHRyaTtcclxuXHRcdFx0XHRcdC8vIH07XHJcblx0XHRcdFx0XHQvLyBAZGVwcmVjYXRlZCBpbiB2NS4wLjZcclxuXHRcdFx0XHRcdC8vIG9ialsnZ2V0RGF0YXRhYmxlJ10gPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdC8vIFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0XHRcdC8vIH07XHJcblxyXG5cdFx0XHRcdFx0Ly8gQGRlcHJlY2F0ZWQgaW4gdjUuMC42XHJcblx0XHRcdFx0XHR2YXIgcm93Q2FsbGJhY2sgPSBQbHVnaW4uZ2V0T3B0aW9uKCdyb3dzLmNhbGxiYWNrJyk7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIHJvd0NhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0XHRcdHJvd0NhbGxiYWNrKCQodHIpLCBvYmosIHRyaSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBiZWZvcmUgdGVtcGxhdGUgcm93IGNhbGxiYWNrXHJcblx0XHRcdFx0XHR2YXIgYmVmb3JlVGVtcGxhdGUgPSBQbHVnaW4uZ2V0T3B0aW9uKCdyb3dzLmJlZm9yZVRlbXBsYXRlJyk7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGJlZm9yZVRlbXBsYXRlID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0XHRcdGJlZm9yZVRlbXBsYXRlKCQodHIpLCBvYmosIHRyaSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBpZiBkYXRhIG9iamVjdCBpcyB1bmRlZmluZWQsIGNvbGxlY3QgZnJvbSB0YWJsZVxyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdG9iaiA9IHt9O1xyXG5cdFx0XHRcdFx0XHQkKHRyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLmVhY2goZnVuY3Rpb24odGRpLCB0ZCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGdldCBjb2x1bW4gc2V0dGluZ3MgYnkgZmllbGRcclxuXHRcdFx0XHRcdFx0XHR2YXIgY29sdW1uID0gJC5ncmVwKGNvbHVtbnMsIGZ1bmN0aW9uKG4sIGkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAkKHRkKS5kYXRhKCdmaWVsZCcpID09PSBuLmZpZWxkO1xyXG5cdFx0XHRcdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0b2JqW2NvbHVtblsnZmllbGQnXV0gPSAkKHRkKS50ZXh0KCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQkKHRyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLmVhY2goZnVuY3Rpb24odGRpLCB0ZCkge1xyXG5cdFx0XHRcdFx0XHQvLyBnZXQgY29sdW1uIHNldHRpbmdzIGJ5IGZpZWxkXHJcblx0XHRcdFx0XHRcdHZhciBjb2x1bW4gPSAkLmdyZXAoY29sdW1ucywgZnVuY3Rpb24obiwgaSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAkKHRkKS5kYXRhKCdmaWVsZCcpID09PSBuLmZpZWxkO1xyXG5cdFx0XHRcdFx0XHR9KVswXTtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4gIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gY29sdW1uIHRlbXBsYXRlXHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4udGVtcGxhdGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgZmluYWxWYWx1ZSA9ICcnO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gdGVtcGxhdGUgc3RyaW5nXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi50ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IFBsdWdpbi5kYXRhUGxhY2Vob2xkZXIoY29sdW1uLnRlbXBsYXRlLCBvYmopO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gdGVtcGxhdGUgY2FsbGJhY2sgZnVuY3Rpb25cclxuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLnRlbXBsYXRlID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBjb2x1bW4udGVtcGxhdGUob2JqLCB0cmksIGRhdGF0YWJsZSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2FuaXRpemUgdXNpbmcgRE9NUHVyaWZ5IGlmIGluc3RhbGxlZFxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBET01QdXJpZnkgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBET01QdXJpZnkuc2FuaXRpemUoZmluYWxWYWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRzcGFuLmlubmVySFRNTCA9IGZpbmFsVmFsdWU7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaW5zZXJ0IHRvIGNlbGwsIHdyYXAgd2l0aCBzcGFuXHJcblx0XHRcdFx0XHRcdFx0XHQkKHRkKS5odG1sKHNwYW4pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIHNldCBzcGFuIG92ZXJmbG93XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5vdmVyZmxvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JChzcGFuKS5jc3MoJ292ZXJmbG93JywgY29sdW1uLm92ZXJmbG93KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JChzcGFuKS5jc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHQvLyBhZnRlciB0ZW1wbGF0ZSByb3cgY2FsbGJhY2tcclxuXHRcdFx0XHRcdHZhciBhZnRlclRlbXBsYXRlID0gUGx1Z2luLmdldE9wdGlvbigncm93cy5hZnRlclRlbXBsYXRlJyk7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGFmdGVyVGVtcGxhdGUgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0YWZ0ZXJUZW1wbGF0ZSgkKHRyKSwgb2JqLCB0cmkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNldHVwIGV4dHJhIHN5c3RlbSBjb2x1bW4gcHJvcGVydGllc1xyXG5cdFx0XHQgKiBOb3RlOiBzZWxlY3RvciBjaGVja2JveCwgc3VidGFibGUgdG9nZ2xlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXR1cFN5c3RlbUNvbHVtbjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSBkYXRhdGFibGUuZGF0YVNldCB8fCBbXTtcclxuXHRcdFx0XHQvLyBubyByZWNvcmRzIGF2YWlsYWJsZVxyXG5cdFx0XHRcdGlmIChkYXRhdGFibGUuZGF0YVNldC5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcblx0XHRcdFx0dmFyIGNvbHVtbnMgPSBvcHRpb25zLmNvbHVtbnM7XHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuZWFjaChmdW5jdGlvbih0cmksIHRyKSB7XHJcblx0XHRcdFx0XHQkKHRyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpLmVhY2goZnVuY3Rpb24odGRpLCB0ZCkge1xyXG5cdFx0XHRcdFx0XHQvLyBnZXQgY29sdW1uIHNldHRpbmdzIGJ5IGZpZWxkXHJcblx0XHRcdFx0XHRcdHZhciBjb2x1bW4gPSAkLmdyZXAoY29sdW1ucywgZnVuY3Rpb24obiwgaSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAkKHRkKS5kYXRhKCdmaWVsZCcpID09PSBuLmZpZWxkO1xyXG5cdFx0XHRcdFx0XHR9KVswXTtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4gIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHZhbHVlID0gJCh0ZCkudGV4dCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBlbmFibGUgY29sdW1uIHNlbGVjdG9yXHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uc2VsZWN0b3IgIT09ICd1bmRlZmluZWQnICYmIGNvbHVtbi5zZWxlY3RvciAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGNoZWNrIGlmIGNoZWNrYm94IGV4aXN0XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoJCh0ZCkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3ggW3R5cGU9XCJjaGVja2JveFwiXScpLmxlbmd0aCA+IDApIHJldHVybjtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQkKHRkKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWNlbGwtY2hlY2snKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQvLyBhcHBlbmQgY2hlY2tib3hcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBjaGsgPSAkKCc8bGFiZWwvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnY2hlY2tib3ggJyArIHBmeCArICdjaGVja2JveC1zaW5nbGUnKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxpbnB1dC8+JykuYXR0cigndHlwZScsICdjaGVja2JveCcpLmF0dHIoJ3ZhbHVlJywgdmFsdWUpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhZGQgY2hlY2tib3ggYWN0aXZlIHJvdyBjbGFzc1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0UGx1Z2luLnNldEFjdGl2ZSh0aGlzKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYWRkIGNoZWNrYm94IGFjdGl2ZSByb3cgY2xhc3NcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFBsdWdpbi5zZXRJbmFjdGl2ZSh0aGlzKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdH0pKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCcmbmJzcDs8c3Bhbj48L3NwYW4+Jyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY2hlY2tib3ggc2VsZWN0b3IgaGFzIG91dGxpbmUgc3R5bGVcclxuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLnNlbGVjdG9yLmNsYXNzICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKGNoaykuYWRkQ2xhc3MoY29sdW1uLnNlbGVjdG9yLmNsYXNzKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHQkKHRkKS5jaGlsZHJlbigpLmh0bWwoY2hrKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGVuYWJsZSBjb2x1bW4gc3VidGFibGUgdG9nZ2xlXHJcblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uc3VidGFibGUgIT09ICd1bmRlZmluZWQnICYmIGNvbHVtbi5zdWJ0YWJsZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY2hlY2sgaWYgc3VidGFibGUgdG9nZ2xlIGV4aXN0XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoJCh0ZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1zdWJ0YWJsZScpLmxlbmd0aCA+IDApIHJldHVybjtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGFwcGVuZCBzdWJ0YWJsZSB0b2dnbGVcclxuXHRcdFx0XHRcdFx0XHRcdCQodGQpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbigpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRodG1sKCQoJzxhLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1zdWJ0YWJsZScpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGF0dHIoJ2hyZWYnLCAnIycpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGF0dHIoJ2RhdGEtdmFsdWUnLCB2YWx1ZSkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxpLz4nKS5hZGRDbGFzcyhQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMucm93RGV0YWlsLmNvbGxhcHNlJykpKSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly8gaW5pdCBjaGVja2JveCBmb3IgaGVhZGVyL2Zvb3RlclxyXG5cdFx0XHRcdHZhciBpbml0Q2hlY2tib3ggPSBmdW5jdGlvbih0cikge1xyXG5cdFx0XHRcdFx0Ly8gZ2V0IGNvbHVtbiBzZXR0aW5ncyBieSBmaWVsZFxyXG5cdFx0XHRcdFx0dmFyIGNvbHVtbiA9ICQuZ3JlcChjb2x1bW5zLCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0eXBlb2Ygbi5zZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbi5zZWxlY3RvciAhPT0gZmFsc2U7XHJcblx0XHRcdFx0XHR9KVswXTtcclxuXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0Ly8gZW5hYmxlIGNvbHVtbiBzZWxlY3RvclxyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnNlbGVjdG9yICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciB0ZCA9ICQodHIpLmZpbmQoJ1tkYXRhLWZpZWxkPVwiJyArIGNvbHVtbi5maWVsZCArICdcIl0nKTtcclxuXHRcdFx0XHRcdFx0XHQvLyBjaGVjayBpZiBjaGVja2JveCBleGlzdFxyXG5cdFx0XHRcdFx0XHRcdGlmICgkKHRkKS5maW5kKCcuJyArIHBmeCArICdjaGVja2JveCBbdHlwZT1cImNoZWNrYm94XCJdJykubGVuZ3RoID4gMCkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQkKHRkKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWNlbGwtY2hlY2snKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gYXBwZW5kIGNoZWNrYm94XHJcblx0XHRcdFx0XHRcdFx0dmFyIGNoayA9ICQoJzxsYWJlbC8+JykuXHJcblx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnY2hlY2tib3ggJyArIHBmeCArICdjaGVja2JveC1zaW5nbGUgJyArIHBmeCArICdjaGVja2JveC1hbGwnKS5cclxuXHRcdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8aW5wdXQvPicpLmF0dHIoJ3R5cGUnLCAnY2hlY2tib3gnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRQbHVnaW4uc2V0QWN0aXZlQWxsKHRydWUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFBsdWdpbi5zZXRBY3RpdmVBbGwoZmFsc2UpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHR9KSkuXHJcblx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJyZuYnNwOzxzcGFuPjwvc3Bhbj4nKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gY2hlY2tib3ggc2VsZWN0b3IgaGFzIG91dGxpbmUgc3R5bGVcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zZWxlY3Rvci5jbGFzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRcdCQoY2hrKS5hZGRDbGFzcyhjb2x1bW4uc2VsZWN0b3IuY2xhc3MpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0JCh0ZCkuY2hpbGRyZW4oKS5odG1sKGNoayk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRpZiAob3B0aW9ucy5sYXlvdXQuaGVhZGVyKSB7XHJcblx0XHRcdFx0XHRpbml0Q2hlY2tib3goJChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuZmlyc3QoKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChvcHRpb25zLmxheW91dC5mb290ZXIpIHtcclxuXHRcdFx0XHRcdGluaXRDaGVja2JveCgkKGRhdGF0YWJsZS50YWJsZUZvb3QpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5maXJzdCgpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG4gICAgICAgICAgICBtYXhXaWR0aExpc3Q6IHt9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEFkanVzdCB3aWR0aCB0byBtYXRjaCBjb250YWluZXIgc2l6ZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0YWRqdXN0Q2VsbHNXaWR0aDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8gZ2V0IHRhYmxlIHdpZHRoXHJcblx0XHRcdFx0dmFyIGNvbnRhaW5lcldpZHRoID0gJChkYXRhdGFibGUudGFibGVCb2R5KS5pbm5lcldpZHRoKCkgLSBQbHVnaW4uaWNvbk9mZnNldDtcclxuXHJcblx0XHRcdFx0Ly8gZ2V0IHRvdGFsIG51bWJlciBvZiBjb2x1bW5zXHJcblx0XHRcdFx0dmFyIGNvbHVtbnMgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLlxyXG5cdFx0XHRcdFx0ZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdzpmaXJzdC1jaGlsZCcpLlxyXG5cdFx0XHRcdFx0ZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKS5cclxuXHRcdFx0XHRcdC8vIGV4Y2x1ZGUgZXhwYW5kIGljb25cclxuXHRcdFx0XHRcdG5vdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1kZXRhaWwnKS5cclxuXHRcdFx0XHRcdG5vdCgnOmhpZGRlbicpLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0aWYgKGNvbHVtbnMgPiAwKSB7XHJcblx0XHRcdFx0XHQvLyAgcmVtb3ZlIHJlc2VydmVkIHNvcnQgaWNvbiB3aWR0aFxyXG5cdFx0XHRcdFx0Y29udGFpbmVyV2lkdGggPSBjb250YWluZXJXaWR0aCAtIChQbHVnaW4uaWNvbk9mZnNldCAqIGNvbHVtbnMpO1xyXG5cdFx0XHRcdFx0dmFyIG1pbldpZHRoID0gTWF0aC5mbG9vcihjb250YWluZXJXaWR0aCAvIGNvbHVtbnMpO1xyXG5cclxuXHRcdFx0XHRcdC8vIG1pbmltdW0gd2lkdGhcclxuXHRcdFx0XHRcdGlmIChtaW5XaWR0aCA8PSBQbHVnaW4uY2VsbE9mZnNldCkge1xyXG5cdFx0XHRcdFx0XHRtaW5XaWR0aCA9IFBsdWdpbi5jZWxsT2Zmc2V0O1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuXHJcblx0XHRcdFx0XHRcdFx0ZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKS5cclxuXHRcdFx0XHRcdFx0XHQvLyBleGNsdWRlIGV4cGFuZCBpY29uXHJcblx0XHRcdFx0XHRcdFx0bm90KCcuJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLWRldGFpbCcpLlxyXG5cdFx0XHRcdFx0XHRcdG5vdCgnOmhpZGRlbicpLmVhY2goZnVuY3Rpb24odGRpLCB0ZCkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHdpZHRoID0gbWluV2lkdGg7XHJcblx0XHRcdFx0XHRcdHZhciBkYXRhV2lkdGggPSAkKHRkKS5kYXRhKCd3aWR0aCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhV2lkdGggIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGRhdGFXaWR0aCA9PT0gJ2F1dG8nKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgZmllbGQgPSAkKHRkKS5kYXRhKCdmaWVsZCcpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5tYXhXaWR0aExpc3RbZmllbGRdKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoID0gUGx1Z2luLm1heFdpZHRoTGlzdFtmaWVsZF07XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGNlbGxzID0gJChkYXRhdGFibGUudGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsW2RhdGEtZmllbGQ9XCInICsgZmllbGQgKyAnXCJdJyk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHdpZHRoID0gUGx1Z2luLm1heFdpZHRoTGlzdFtmaWVsZF0gPSBNYXRoLm1heC5hcHBseShudWxsLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0JChjZWxscykubWFwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJCh0aGlzKS5vdXRlcldpZHRoKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KS5nZXQoKSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0d2lkdGggPSBkYXRhV2lkdGg7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdCQodGQpLmNoaWxkcmVuKCkuY3NzKCd3aWR0aCcsIE1hdGguY2VpbCh3aWR0aCkpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEFkanVzdCBoZWlnaHQgdG8gbWF0Y2ggY29udGFpbmVyIHNpemVcclxuXHRcdFx0ICovXHJcblx0XHRcdGFkanVzdENlbGxzSGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQkLmVhY2goJChkYXRhdGFibGUudGFibGUpLmNoaWxkcmVuKCksIGZ1bmN0aW9uKHBhcnQsIHRhYmxlUGFydCkge1xyXG5cdFx0XHRcdFx0dmFyIHRvdGFsUm93cyA9ICQodGFibGVQYXJ0KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuZmlyc3QoKS5wYXJlbnQoKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykubGVuZ3RoO1xyXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDE7IGkgPD0gdG90YWxSb3dzOyBpKyspIHtcclxuXHRcdFx0XHRcdFx0dmFyIHJvd3MgPSAkKHRhYmxlUGFydCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdzpudGgtY2hpbGQoJyArIGkgKyAnKScpO1xyXG5cdFx0XHRcdFx0XHRpZiAoJChyb3dzKS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIG1heEhlaWdodCA9IE1hdGgubWF4LmFwcGx5KG51bGwsICQocm93cykubWFwKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuICQodGhpcykub3V0ZXJIZWlnaHQoKTtcclxuXHRcdFx0XHRcdFx0XHR9KS5nZXQoKSk7XHJcblx0XHRcdFx0XHRcdFx0JChyb3dzKS5jc3MoJ2hlaWdodCcsIE1hdGguY2VpbChtYXhIZWlnaHQpKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNldHVwIHRhYmxlIERPTSBhbmQgY2xhc3Nlc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0dXBET006IGZ1bmN0aW9uKHRhYmxlKSB7XHJcblx0XHRcdFx0Ly8gc2V0IHRhYmxlIGNsYXNzZXNcclxuXHRcdFx0XHQkKHRhYmxlKS5maW5kKCc+IHRoZWFkJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1oZWFkJyk7XHJcblx0XHRcdFx0JCh0YWJsZSkuZmluZCgnPiB0Ym9keScpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtYm9keScpO1xyXG5cdFx0XHRcdCQodGFibGUpLmZpbmQoJz4gdGZvb3QnKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWZvb3QnKTtcclxuXHRcdFx0XHQkKHRhYmxlKS5maW5kKCd0cicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93Jyk7XHJcblx0XHRcdFx0JCh0YWJsZSkuZmluZCgndHIgPiB0aCwgdHIgPiB0ZCcpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtY2VsbCcpO1xyXG5cdFx0XHRcdCQodGFibGUpLmZpbmQoJ3RyID4gdGgsIHRyID4gdGQnKS5lYWNoKGZ1bmN0aW9uKGksIHRkKSB7XHJcblx0XHRcdFx0XHRpZiAoJCh0ZCkuZmluZCgnc3BhbicpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHQkKHRkKS53cmFwSW5uZXIoJCgnPHNwYW4vPicpLmNzcygnd2lkdGgnLCBQbHVnaW4uY2VsbE9mZnNldCkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIERlZmF1bHQgc2Nyb2xsYmFyXHJcblx0XHRcdCAqIEByZXR1cm5zIHt7dGFibGVMb2NrZWQ6IG51bGwsIGluaXQ6IGluaXQsIG9uU2Nyb2xsaW5nOlxyXG5cdFx0XHQgKiAgICAgb25TY3JvbGxpbmd9fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2Nyb2xsYmFyOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgc2Nyb2xsID0ge1xyXG5cdFx0XHRcdFx0c2Nyb2xsYWJsZTogbnVsbCxcclxuXHRcdFx0XHRcdHRhYmxlTG9ja2VkOiBudWxsLFxyXG5cdFx0XHRcdFx0aW5pdFBvc2l0aW9uOiBudWxsLFxyXG5cdFx0XHRcdFx0aW5pdDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHZhciBzY3JlZW4gPSB1dGlsLmdldFZpZXdQb3J0KCkud2lkdGg7XHJcblx0XHRcdFx0XHRcdC8vIHNldHVwIHNjcm9sbGFibGUgZGF0YXRhYmxlXHJcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLmxheW91dC5zY3JvbGwpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBhZGQgc2Nyb2xsYWJsZSBkYXRhdGFibGUgY2xhc3NcclxuXHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS53cmFwKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXNjcm9sbCcpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgc2Nyb2xsYWJsZSA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stc2Nyb2xsJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGNoZWNrIGlmIHNjcm9sbGFibGUgYXJlYSBoYXZlIHJvd3NcclxuXHRcdFx0XHRcdFx0XHRpZiAoJChzY3JvbGxhYmxlKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykubGVuZ3RoID4gMCAmJiAkKHNjcm9sbGFibGUpLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHNjcm9sbC5zY3JvbGxIZWFkID0gJChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCc+IC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrLXNjcm9sbCA+IC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKTtcclxuXHRcdFx0XHRcdFx0XHRcdHNjcm9sbC5zY3JvbGxGb290ID0gJChkYXRhdGFibGUudGFibGVGb290KS5maW5kKCc+IC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrLXNjcm9sbCA+IC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKTtcclxuXHRcdFx0XHRcdFx0XHRcdHNjcm9sbC50YWJsZUxvY2tlZCA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2s6bm90KC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrLXNjcm9sbCknKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuY3VzdG9tU2Nyb2xsYmFyJykgJiYgdXRpbC5kZXRlY3RJRSgpICE9IDEwICYmIHNjcmVlbiA+IHV0aWwuZ2V0QnJlYWtwb2ludCgnbGcnKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzY3JvbGwuaW5pdEN1c3RvbVNjcm9sbGJhcihzY3JvbGxhYmxlWzBdKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbC5pbml0RGVmYXVsdFNjcm9sbGJhcihzY3JvbGxhYmxlKTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHNjcm9sbC5zY3JvbGxIZWFkID0gJChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCc+IC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKTtcclxuXHRcdFx0XHRcdFx0XHRcdHNjcm9sbC5zY3JvbGxGb290ID0gJChkYXRhdGFibGUudGFibGVGb290KS5maW5kKCc+IC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKTtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuY3VzdG9tU2Nyb2xsYmFyJykgJiYgdXRpbC5kZXRlY3RJRSgpICE9IDEwICYmIHNjcmVlbiA+IHV0aWwuZ2V0QnJlYWtwb2ludCgnbGcnKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzY3JvbGwuaW5pdEN1c3RvbVNjcm9sbGJhcihkYXRhdGFibGUudGFibGVCb2R5KTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbC5pbml0RGVmYXVsdFNjcm9sbGJhcihkYXRhdGFibGUudGFibGVCb2R5KTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRpbml0RGVmYXVsdFNjcm9sbGJhcjogZnVuY3Rpb24oc2Nyb2xsYWJsZSkge1xyXG5cdFx0XHRcdFx0XHQvLyBnZXQgaW5pdGlhbCBzY3JvbGwgcG9zaXRpb25cclxuXHRcdFx0XHRcdFx0c2Nyb2xsLmluaXRQb3NpdGlvbiA9ICQoc2Nyb2xsYWJsZSkuc2Nyb2xsTGVmdCgpO1xyXG5cdFx0XHRcdFx0XHQkKHNjcm9sbGFibGUpLmNzcygnb3ZlcmZsb3cteScsICdhdXRvJykub2ZmKCkub24oJ3Njcm9sbCcsIHNjcm9sbC5vblNjcm9sbGluZyk7XHJcblx0XHRcdFx0XHRcdCQoc2Nyb2xsYWJsZSkuY3NzKCdvdmVyZmxvdy14JywgJ2F1dG8nKTtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRvblNjcm9sbGluZzogZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgbGVmdCA9ICQodGhpcykuc2Nyb2xsTGVmdCgpO1xyXG5cdFx0XHRcdFx0XHR2YXIgdG9wID0gJCh0aGlzKS5zY3JvbGxUb3AoKTtcclxuXHRcdFx0XHRcdFx0aWYgKHV0aWwuaXNSVEwoKSkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGRlZHVjdCBpbml0aWFsIHBvc2l0aW9uIGZvciBSVExcclxuXHRcdFx0XHRcdFx0XHRsZWZ0ID0gbGVmdCAtIHNjcm9sbC5pbml0UG9zaXRpb247XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0JChzY3JvbGwuc2Nyb2xsSGVhZCkuY3NzKCdsZWZ0JywgLWxlZnQpO1xyXG5cdFx0XHRcdFx0XHQkKHNjcm9sbC5zY3JvbGxGb290KS5jc3MoJ2xlZnQnLCAtbGVmdCk7XHJcblx0XHRcdFx0XHRcdCQoc2Nyb2xsLnRhYmxlTG9ja2VkKS5lYWNoKGZ1bmN0aW9uKGksIHRhYmxlKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5pc0xvY2tlZCgpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzY3JvbGxiYXIgb2Zmc2V0XHJcblx0XHRcdFx0XHRcdFx0XHR0b3AgLT0gMTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0JCh0YWJsZSkuY3NzKCd0b3AnLCAtdG9wKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0aW5pdEN1c3RvbVNjcm9sbGJhcjogZnVuY3Rpb24oc2Nyb2xsYWJsZSkge1xyXG5cdFx0XHRcdFx0XHRzY3JvbGwuc2Nyb2xsYWJsZSA9IHNjcm9sbGFibGU7XHJcblx0XHRcdFx0XHRcdC8vIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBmb3IgdGFibGUgYm9keSB3aXRoIHNjcm9sbGJhclxyXG5cdFx0XHRcdFx0XHRQbHVnaW4uaW5pdFNjcm9sbGJhcihzY3JvbGxhYmxlKTtcclxuXHRcdFx0XHRcdFx0Ly8gZ2V0IGluaXRpYWwgc2Nyb2xsIHBvc2l0aW9uXHJcblx0XHRcdFx0XHRcdHNjcm9sbC5pbml0UG9zaXRpb24gPSAkKHNjcm9sbGFibGUpLnNjcm9sbExlZnQoKTtcclxuXHRcdFx0XHRcdFx0JChzY3JvbGxhYmxlKS5vZmYoKS5vbignc2Nyb2xsJywgc2Nyb2xsLm9uU2Nyb2xsaW5nKTtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRzY3JvbGwuaW5pdCgpO1xyXG5cdFx0XHRcdHJldHVybiBzY3JvbGw7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogSW5pdCBjdXN0b20gc2Nyb2xsYmFyIGFuZCByZXNldCBwb3NpdGlvblxyXG5cdFx0XHQgKiBAcGFyYW0gZWxlbWVudFxyXG5cdFx0XHQgKiBAcGFyYW0gb3B0aW9uc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0aW5pdFNjcm9sbGJhcjogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xyXG5cdFx0XHRcdGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5ub2RlTmFtZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmNzcygnb3ZlcmZsb3cnLCAnJyk7XHJcblx0XHRcdFx0dmFyIHBzID0gJChlbGVtZW50KS5kYXRhKCdwcycpO1xyXG5cdFx0XHRcdGlmICh1dGlsLmhhc0NsYXNzKGVsZW1lbnQsICdwcycpICYmIHR5cGVvZiBwcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdHBzLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRwcyA9IG5ldyBQZXJmZWN0U2Nyb2xsYmFyKGVsZW1lbnQsIE9iamVjdC5hc3NpZ24oe30sIHtcclxuXHRcdFx0XHRcdFx0d2hlZWxTcGVlZDogMC41LFxyXG5cdFx0XHRcdFx0XHRzd2lwZUVhc2luZzogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0Ly8gd2hlZWxQcm9wYWdhdGlvbjogZmFsc2UsXHJcblx0XHRcdFx0XHRcdG1pblNjcm9sbGJhckxlbmd0aDogNDAsXHJcblx0XHRcdFx0XHRcdG1heFNjcm9sbGJhckxlbmd0aDogMzAwLFxyXG5cdFx0XHRcdFx0XHRzdXBwcmVzc1Njcm9sbFg6IFBsdWdpbi5nZXRPcHRpb24oJ3Jvd3MuYXV0b0hpZGUnKSAmJiAhUGx1Z2luLmlzTG9ja2VkKClcclxuXHRcdFx0XHRcdH0sIG9wdGlvbnMpKTtcclxuXHRcdFx0XHRcdCQoZWxlbWVudCkuZGF0YSgncHMnLCBwcyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyByZXNldCBwZXJmZWN0IHNjcm9sbGJhciBvbiByZXNpemVcclxuXHRcdFx0XHQkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cHMudXBkYXRlKCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGNvbHVtbiB0aXRsZSBmcm9tIG9wdGlvbnMuY29sdW1ucyBzZXR0aW5nc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0SGVhZFRpdGxlOiBmdW5jdGlvbih0YWJsZVBhcnQpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIHRhYmxlUGFydCA9PT0gJ3VuZGVmaW5lZCcpIHRhYmxlUGFydCA9IGRhdGF0YWJsZS50YWJsZUhlYWQ7XHJcblx0XHRcdFx0dGFibGVQYXJ0ID0gJCh0YWJsZVBhcnQpWzBdO1xyXG5cdFx0XHRcdHZhciBjb2x1bW5zID0gb3B0aW9ucy5jb2x1bW5zO1xyXG5cdFx0XHRcdHZhciByb3cgPSB0YWJsZVBhcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyJylbMF07XHJcblx0XHRcdFx0dmFyIHRocyA9IHRhYmxlUGFydC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKTtcclxuXHJcblx0XHRcdFx0aWYgKHR5cGVvZiByb3cgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG5cdFx0XHRcdFx0dGFibGVQYXJ0LmFwcGVuZENoaWxkKHJvdyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQkLmVhY2goY29sdW1ucywgZnVuY3Rpb24oaSwgY29sdW1uKSB7XHJcblx0XHRcdFx0XHR2YXIgdGggPSB0aHNbaV07XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIHRoID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHR0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XHJcblx0XHRcdFx0XHRcdHJvdy5hcHBlbmRDaGlsZCh0aCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2V0IGNvbHVtbiB0aXRsZVxyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW5bJ3RpdGxlJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHRoLmlubmVySFRNTCA9IGNvbHVtbi50aXRsZTtcclxuXHRcdFx0XHRcdFx0dGguc2V0QXR0cmlidXRlKCdkYXRhLWZpZWxkJywgY29sdW1uLmZpZWxkKTtcclxuXHRcdFx0XHRcdFx0dXRpbC5hZGRDbGFzcyh0aCwgY29sdW1uLmNsYXNzKTtcclxuXHRcdFx0XHRcdFx0Ly8gc2V0IGRpc2FibGUgYXV0b0hpZGUgb3IgZm9yY2UgZW5hYmxlXHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLmF1dG9IaWRlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChjb2x1bW4uYXV0b0hpZGUgIT09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoLnNldEF0dHJpYnV0ZSgnZGF0YS1hdXRvaGlkZS1kaXNhYmxlZCcsIGNvbHVtbi5hdXRvSGlkZSk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoLnNldEF0dHJpYnV0ZSgnZGF0YS1hdXRvaGlkZS1lbmFibGVkJywgY29sdW1uLmF1dG9IaWRlKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0JCh0aCkuZGF0YShjb2x1bW4pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIHNldCBoZWFkZXIgYXR0ciBvcHRpb25cclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLmF0dHIgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdCQuZWFjaChjb2x1bW4uYXR0ciwgZnVuY3Rpb24oa2V5LCB2YWwpIHtcclxuXHRcdFx0XHRcdFx0XHR0aC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWwpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBhcHBseSB0ZXh0IGFsaWduIHRvIHRoZWFkL3Rmb290XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi50ZXh0QWxpZ24gIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHZhciBhbGlnbiA9IHR5cGVvZiBkYXRhdGFibGUudGV4dEFsaWduW2NvbHVtbi50ZXh0QWxpZ25dICE9PSAndW5kZWZpbmVkJyA/IGRhdGF0YWJsZS50ZXh0QWxpZ25bY29sdW1uLnRleHRBbGlnbl0gOiAnJztcclxuXHRcdFx0XHRcdFx0dXRpbC5hZGRDbGFzcyh0aCwgYWxpZ24pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFBsdWdpbi5zZXR1cERPTSh0YWJsZVBhcnQpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEluaXRpYXRlIHRvIGdldCByZW1vdGUgb3IgbG9jYWwgZGF0YSB2aWEgYWpheFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZGF0YVJlbmRlcjogZnVuY3Rpb24oYWN0aW9uKSB7XHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLnNpYmxpbmdzKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXInKS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2luZy1sb2FkZWQnKTtcclxuXHJcblx0XHRcdFx0dmFyIGJ1aWxkTWV0YSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSBkYXRhdGFibGUuZGF0YVNldCB8fCBbXTtcclxuXHRcdFx0XHRcdFBsdWdpbi5sb2NhbERhdGFVcGRhdGUoKTtcclxuXHRcdFx0XHRcdC8vIGxvY2FsIHBhZ2luYXRpb24gbWV0YVxyXG5cdFx0XHRcdFx0dmFyIG1ldGEgPSBQbHVnaW4uZ2V0RGF0YVNvdXJjZVBhcmFtKCdwYWdpbmF0aW9uJyk7XHJcblx0XHRcdFx0XHRpZiAobWV0YS5wZXJwYWdlID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdG1ldGEucGVycGFnZSA9IG9wdGlvbnMuZGF0YS5wYWdlU2l6ZSB8fCAxMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG1ldGEudG90YWwgPSBkYXRhdGFibGUuZGF0YVNldC5sZW5ndGg7XHJcblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBNYXRoLm1heChtZXRhLnBlcnBhZ2UgKiAobWV0YS5wYWdlIC0gMSksIDApO1xyXG5cdFx0XHRcdFx0dmFyIGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgbWV0YS5wZXJwYWdlLCBtZXRhLnRvdGFsKTtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gJChkYXRhdGFibGUuZGF0YVNldCkuc2xpY2Uoc3RhcnQsIGVuZCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gbWV0YTtcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHR2YXIgYWZ0ZXJHZXREYXRhID0gZnVuY3Rpb24ocmVzdWx0KSB7XHJcblx0XHRcdFx0XHR2YXIgbG9jYWxQYWdpbmdDYWxsYmFjayA9IGZ1bmN0aW9uKGN0eCwgbWV0YSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoISQoY3R4LnBhZ2VyKS5oYXNDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2luZy1sb2FkZWQnKSkge1xyXG5cdFx0XHRcdFx0XHRcdCQoY3R4LnBhZ2VyKS5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0XHRjdHguaW5pdChtZXRhKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQkKGN0eC5wYWdlcikub2ZmKCkub24ocGZ4ICsgJ2RhdGF0YWJsZS1vbi1nb3RvLXBhZ2UnLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdFx0JChjdHgucGFnZXIpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdGN0eC5pbml0KG1ldGEpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBzdGFydCA9IE1hdGgubWF4KG1ldGEucGVycGFnZSAqIChtZXRhLnBhZ2UgLSAxKSwgMCk7XHJcblx0XHRcdFx0XHRcdHZhciBlbmQgPSBNYXRoLm1pbihzdGFydCArIG1ldGEucGVycGFnZSwgbWV0YS50b3RhbCk7XHJcblxyXG5cdFx0XHRcdFx0XHRQbHVnaW4ubG9jYWxEYXRhVXBkYXRlKCk7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gJChkYXRhdGFibGUuZGF0YVNldCkuc2xpY2Uoc3RhcnQsIGVuZCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBpbnNlcnQgZGF0YSBpbnRvIHRhYmxlIGNvbnRlbnRcclxuXHRcdFx0XHRcdFx0UGx1Z2luLmluc2VydERhdGEoKTtcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUud3JhcCkucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1lcnJvcicpO1xyXG5cdFx0XHRcdFx0Ly8gcGFnaW5hdGlvbiBlbmFibGVkXHJcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5wYWdpbmF0aW9uKSB7XHJcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLmRhdGEuc2VydmVyUGFnaW5nICYmIG9wdGlvbnMuZGF0YS50eXBlICE9PSAnbG9jYWwnKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gc2VydmVyIHBhZ2luYXRpb25cclxuXHRcdFx0XHRcdFx0XHR2YXIgc2VydmVyTWV0YSA9IFBsdWdpbi5nZXRPYmplY3QoJ21ldGEnLCByZXN1bHQgfHwgbnVsbCk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHNlcnZlck1ldGEgIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFBsdWdpbi5wYWdpbmdPYmplY3QgPSBQbHVnaW4ucGFnaW5nKHNlcnZlck1ldGEpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBubyBtZXRhIG9iamVjdCBmcm9tIHNlcnZlciByZXNwb25zZSwgZmFsbGJhY2sgdG8gbG9jYWwgcGFnaW5hdGlvblxyXG5cdFx0XHRcdFx0XHRcdFx0UGx1Z2luLnBhZ2luZ09iamVjdCA9IFBsdWdpbi5wYWdpbmcoYnVpbGRNZXRhKCksIGxvY2FsUGFnaW5nQ2FsbGJhY2spO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBsb2NhbCBwYWdpbmF0aW9uIGNhbiBiZSB1c2VkIGJ5IHJlbW90ZSBkYXRhIGFsc29cclxuXHRcdFx0XHRcdFx0XHRQbHVnaW4ucGFnaW5nT2JqZWN0ID0gUGx1Z2luLnBhZ2luZyhidWlsZE1ldGEoKSwgbG9jYWxQYWdpbmdDYWxsYmFjayk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdC8vIHBhZ2luYXRpb24gaXMgZGlzYWJsZWRcclxuXHRcdFx0XHRcdFx0UGx1Z2luLmxvY2FsRGF0YVVwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gaW5zZXJ0IGRhdGEgaW50byB0YWJsZSBjb250ZW50XHJcblx0XHRcdFx0XHRQbHVnaW4uaW5zZXJ0RGF0YSgpO1xyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdC8vIGdldCBsb2NhbCBkYXRhc291cmNlXHJcblx0XHRcdFx0aWYgKG9wdGlvbnMuZGF0YS50eXBlID09PSAnbG9jYWwnXHJcblx0XHRcdFx0XHQvLyBmb3IgcmVtb3RlIGpzb24gZGF0YXNvdXJjZVxyXG5cdFx0XHRcdFx0Ly8gfHwgdHlwZW9mIG9wdGlvbnMuZGF0YS5zb3VyY2UucmVhZCA9PT0gJ3VuZGVmaW5lZCcgJiYgZGF0YXRhYmxlLmRhdGFTZXQgIT09IG51bGxcclxuXHRcdFx0XHRcdC8vIGZvciByZW1vdGUgZGF0YXNvdXJjZSwgc2VydmVyIHNvcnRpbmcgaXMgZGlzYWJsZWQgYW5kIGRhdGEgYWxyZWFkeSByZWNlaXZlZCBmcm9tIHJlbW90ZVxyXG5cdFx0XHRcdFx0fHwgb3B0aW9ucy5kYXRhLnNlcnZlclNvcnRpbmcgPT09IGZhbHNlICYmIGFjdGlvbiA9PT0gJ3NvcnQnXHJcblx0XHRcdFx0XHR8fCBvcHRpb25zLmRhdGEuc2VydmVyRmlsdGVyaW5nID09PSBmYWxzZSAmJiBhY3Rpb24gPT09ICdzZWFyY2gnXHJcblx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRhZnRlckdldERhdGEoKTtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLnNldEF1dG9Db2x1bW5zKCk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGdldHRpbmcgZGF0YSBmcm9tIHJlbW90ZSBvbmx5XHJcblx0XHRcdFx0UGx1Z2luLmdldERhdGEoKS5kb25lKGFmdGVyR2V0RGF0YSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogUHJvY2VzcyBhamF4IGRhdGFcclxuXHRcdFx0ICovXHJcblx0XHRcdGluc2VydERhdGE6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gZGF0YXRhYmxlLmRhdGFTZXQgfHwgW107XHJcblx0XHRcdFx0dmFyIHBhcmFtcyA9IFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oKTtcclxuXHJcblx0XHRcdFx0Ly8gZ2V0IHJvdyBhdHRyaWJ1dGVzXHJcblx0XHRcdFx0dmFyIHBhZ2luYXRpb24gPSBwYXJhbXMucGFnaW5hdGlvbjtcclxuXHRcdFx0XHR2YXIgc3RhcnQgPSAoTWF0aC5tYXgocGFnaW5hdGlvbi5wYWdlLCAxKSAtIDEpICogcGFnaW5hdGlvbi5wZXJwYWdlO1xyXG5cdFx0XHRcdHZhciBlbmQgPSBNYXRoLm1pbihwYWdpbmF0aW9uLnBhZ2UsIHBhZ2luYXRpb24ucGFnZXMpICogcGFnaW5hdGlvbi5wZXJwYWdlO1xyXG5cdFx0XHRcdHZhciByb3dQcm9wcyA9IHt9O1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5kYXRhLmF0dHIucm93UHJvcHMgIT09ICd1bmRlZmluZWQnICYmIG9wdGlvbnMuZGF0YS5hdHRyLnJvd1Byb3BzLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0cm93UHJvcHMgPSBvcHRpb25zLmRhdGEuYXR0ci5yb3dQcm9wcy5zbGljZShzdGFydCwgZW5kKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciB0YWJsZUJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xyXG5cdFx0XHRcdHRhYmxlQm9keS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcblx0XHRcdFx0dmFyIGNvbExlbmd0aCA9IG9wdGlvbnMuY29sdW1ucy5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdCQuZWFjaChkYXRhdGFibGUuZGF0YVNldCwgZnVuY3Rpb24ocm93SW5kZXgsIHJvdykge1xyXG5cdFx0XHRcdFx0dmFyIHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcclxuXHRcdFx0XHRcdHRyLnNldEF0dHJpYnV0ZSgnZGF0YS1yb3cnLCByb3dJbmRleCk7XHJcblx0XHRcdFx0XHQvLyBrZWVwIGRhdGEgb2JqZWN0IHRvIHJvd1xyXG5cdFx0XHRcdFx0JCh0cikuZGF0YSgnb2JqJywgcm93KTtcclxuXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIHJvd1Byb3BzW3Jvd0luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0JC5lYWNoKHJvd1Byb3BzW3Jvd0luZGV4XSwgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0dHIuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgdGhpcy52YWx1ZSk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhciBjZWxsSW5kZXggPSAwO1xyXG5cdFx0XHRcdFx0dmFyIHRkcyA9IFtdO1xyXG5cdFx0XHRcdFx0Zm9yICh2YXIgYSA9IDA7IGEgPCBjb2xMZW5ndGg7IGEgKz0gMSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgY29sdW1uID0gb3B0aW9ucy5jb2x1bW5zW2FdO1xyXG5cdFx0XHRcdFx0XHR2YXIgY2xhc3NlcyA9IFtdO1xyXG5cdFx0XHRcdFx0XHQvLyBhZGQgc29ydGVkIGNsYXNzIHRvIGNlbGxzXHJcblx0XHRcdFx0XHRcdGlmIChQbHVnaW4uZ2V0T2JqZWN0KCdzb3J0LmZpZWxkJywgcGFyYW1zKSA9PT0gY29sdW1uLmZpZWxkKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKHBmeCArICdkYXRhdGFibGUtY2VsbC1zb3J0ZWQnKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gYXBwbHkgdGV4dCBhbGlnblxyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi50ZXh0QWxpZ24gIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGFsaWduID0gdHlwZW9mIGRhdGF0YWJsZS50ZXh0QWxpZ25bY29sdW1uLnRleHRBbGlnbl0gIT09ICd1bmRlZmluZWQnID8gZGF0YXRhYmxlLnRleHRBbGlnbltjb2x1bW4udGV4dEFsaWduXSA6ICcnO1xyXG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChhbGlnbik7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIHZhciBjbGFzc0F0dHIgPSAnJztcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uY2xhc3MgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGNvbHVtbi5jbGFzcyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHZhciB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcblx0XHRcdFx0XHRcdHV0aWwuYWRkQ2xhc3ModGQsIGNsYXNzZXMuam9pbignICcpKTtcclxuXHRcdFx0XHRcdFx0dGQuc2V0QXR0cmlidXRlKCdkYXRhLWZpZWxkJywgY29sdW1uLmZpZWxkKTtcclxuXHRcdFx0XHRcdFx0Ly8gc2V0IGRpc2FibGUgYXV0b0hpZGUgb3IgZm9yY2UgZW5hYmxlXHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uLmF1dG9IaWRlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChjb2x1bW4uYXV0b0hpZGUgIT09IHRydWUpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRkLnNldEF0dHJpYnV0ZSgnZGF0YS1hdXRvaGlkZS1kaXNhYmxlZCcsIGNvbHVtbi5hdXRvSGlkZSk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRkLnNldEF0dHJpYnV0ZSgnZGF0YS1hdXRvaGlkZS1lbmFibGVkJywgY29sdW1uLmF1dG9IaWRlKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0dGQuaW5uZXJIVE1MID0gUGx1Z2luLmdldE9iamVjdChjb2x1bW4uZmllbGQsIHJvdyk7XHJcblx0XHRcdFx0XHRcdHRkLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIFBsdWdpbi5nZXRPYmplY3QoY29sdW1uLmZpZWxkLCByb3cpKTtcclxuXHRcdFx0XHRcdFx0dHIuYXBwZW5kQ2hpbGQodGQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHRhYmxlQm9keS5hcHBlbmRDaGlsZCh0cik7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vIGRpc3BsYXkgbm8gcmVjb3JkcyBtZXNzYWdlXHJcblx0XHRcdFx0aWYgKGRhdGF0YWJsZS5kYXRhU2V0Lmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0dmFyIGVycm9yU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHRcdFx0XHRcdHV0aWwuYWRkQ2xhc3MoZXJyb3JTcGFuLCBwZnggKyAnZGF0YXRhYmxlLWVycm9yJyk7XHJcblx0XHRcdFx0XHRlcnJvclNwYW4uaW5uZXJIVE1MID0gUGx1Z2luLmdldE9wdGlvbigndHJhbnNsYXRlLnJlY29yZHMubm9SZWNvcmRzJyk7XHJcblx0XHRcdFx0XHR0YWJsZUJvZHkuYXBwZW5kQ2hpbGQoZXJyb3JTcGFuKTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLndyYXApLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtZXJyb3IgJyArIHBmeCArICdkYXRhdGFibGUtbG9hZGVkJyk7XHJcblx0XHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKGZhbHNlKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIHJlcGxhY2UgZXhpc3RpbmcgdGFibGUgYm9keVxyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkucmVwbGFjZVdpdGgodGFibGVCb2R5KTtcclxuXHRcdFx0XHRkYXRhdGFibGUudGFibGVCb2R5ID0gdGFibGVCb2R5O1xyXG5cclxuXHRcdFx0XHQvLyBsYXlvdXQgdXBkYXRlXHJcblx0XHRcdFx0UGx1Z2luLnNldHVwRE9NKGRhdGF0YWJsZS50YWJsZSk7XHJcblx0XHRcdFx0UGx1Z2luLnNldHVwQ2VsbEZpZWxkKFtkYXRhdGFibGUudGFibGVCb2R5XSk7XHJcblx0XHRcdFx0UGx1Z2luLnNldHVwVGVtcGxhdGVDZWxsKGRhdGF0YWJsZS50YWJsZUJvZHkpO1xyXG5cdFx0XHRcdFBsdWdpbi5sYXlvdXRVcGRhdGUoKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHVwZGF0ZVRhYmxlQ29tcG9uZW50czogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlSGVhZCA9ICQoZGF0YXRhYmxlLnRhYmxlKS5jaGlsZHJlbigndGhlYWQnKS5nZXQoMCk7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlQm9keSA9ICQoZGF0YXRhYmxlLnRhYmxlKS5jaGlsZHJlbigndGJvZHknKS5nZXQoMCk7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlRm9vdCA9ICQoZGF0YXRhYmxlLnRhYmxlKS5jaGlsZHJlbigndGZvb3QnKS5nZXQoMCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQ2FsbCBhamF4IGZvciByYXcgSlNPTiBkYXRhXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXREYXRhOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvLyBQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKHRydWUpO1xyXG5cclxuXHRcdFx0XHR2YXIgYWpheFBhcmFtcyA9IHtcclxuXHRcdFx0XHRcdGRhdGFUeXBlOiAnanNvbicsXHJcblx0XHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdFx0XHRcdGRhdGE6IHt9LFxyXG5cdFx0XHRcdFx0dGltZW91dDogUGx1Z2luLmdldE9wdGlvbignZGF0YS5zb3VyY2UucmVhZC50aW1lb3V0JykgfHwgMzAwMDAsXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0aWYgKG9wdGlvbnMuZGF0YS50eXBlID09PSAnbG9jYWwnKSB7XHJcblx0XHRcdFx0XHRhamF4UGFyYW1zLnVybCA9IG9wdGlvbnMuZGF0YS5zb3VyY2U7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAob3B0aW9ucy5kYXRhLnR5cGUgPT09ICdyZW1vdGUnKSB7XHJcblx0XHRcdFx0XHR2YXIgZGF0YSA9IFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oKTtcclxuXHRcdFx0XHRcdC8vIHJlbW92ZSBpZiBzZXJ2ZXIgcGFyYW1zIGlzIG5vdCBlbmFibGVkXHJcblx0XHRcdFx0XHRpZiAoIVBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc2VydmVyUGFnaW5nJykpIHtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIGRhdGFbJ3BhZ2luYXRpb24nXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICghUGx1Z2luLmdldE9wdGlvbignZGF0YS5zZXJ2ZXJTb3J0aW5nJykpIHtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIGRhdGFbJ3NvcnQnXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGFqYXhQYXJhbXMuZGF0YSA9ICQuZXh0ZW5kKHt9LCBhamF4UGFyYW1zLmRhdGEsIFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc291cmNlLnJlYWQucGFyYW1zJyksIGRhdGEpO1xyXG5cdFx0XHRcdFx0YWpheFBhcmFtcyA9ICQuZXh0ZW5kKHt9LCBhamF4UGFyYW1zLCBQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnNvdXJjZS5yZWFkJykpO1xyXG5cclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgYWpheFBhcmFtcy51cmwgIT09ICdzdHJpbmcnKSBhamF4UGFyYW1zLnVybCA9IFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc291cmNlLnJlYWQnKTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgYWpheFBhcmFtcy51cmwgIT09ICdzdHJpbmcnKSBhamF4UGFyYW1zLnVybCA9IFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc291cmNlJyk7XHJcblx0XHRcdFx0XHQvLyBhamF4UGFyYW1zLmRhdGEgPSAkLmV4dGVuZChhamF4UGFyYW1zLmRhdGEsIGRhdGEucGFnaW5hdGlvbik7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gJC5hamF4KGFqYXhQYXJhbXMpLmRvbmUoZnVuY3Rpb24ocmVzcG9uc2UsIHRleHRTdGF0dXMsIGpxWEhSKSB7XHJcblx0XHRcdFx0XHRkYXRhdGFibGUubGFzdFJlc3BvbnNlID0gcmVzcG9uc2U7XHJcblx0XHRcdFx0XHQvLyBleHRlbmRpYmxlIGRhdGEgbWFwIGNhbGxiYWNrIGZvciBjdXN0b20gZGF0YXNvdXJjZVxyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSBkYXRhdGFibGUub3JpZ2luYWxEYXRhU2V0ID0gUGx1Z2luLmRhdGFNYXBDYWxsYmFjayhyZXNwb25zZSk7XHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0QXV0b0NvbHVtbnMoKTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24tYWpheC1kb25lJywgW2RhdGF0YWJsZS5kYXRhU2V0XSk7XHJcblx0XHRcdFx0fSkuZmFpbChmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24tYWpheC1mYWlsJywgW2pxWEhSXSk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmh0bWwoJCgnPHNwYW4vPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtZXJyb3InKS5odG1sKFBsdWdpbi5nZXRPcHRpb24oJ3RyYW5zbGF0ZS5yZWNvcmRzLm5vUmVjb3JkcycpKSk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS53cmFwKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWVycm9yICcgKyBwZnggKyAnZGF0YXRhYmxlLWxvYWRlZCcpO1xyXG5cdFx0XHRcdFx0UGx1Z2luLnNwaW5uZXJDYWxsYmFjayhmYWxzZSk7XHJcblx0XHRcdFx0fSkuYWx3YXlzKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFBhZ2luYXRpb24gb2JqZWN0XHJcblx0XHRcdCAqIEBwYXJhbSBtZXRhIGlmIG51bGwsIGxvY2FsIHBhZ2luYXRpb24sIG90aGVyd2lzZSByZW1vdGVcclxuXHRcdFx0ICogICAgIHBhZ2luYXRpb25cclxuXHRcdFx0ICogQHBhcmFtIGNhbGxiYWNrIGZvciB1cGRhdGUgZGF0YSB3aGVuIG5hdmlnYXRpbmcgcGFnZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0cGFnaW5nOiBmdW5jdGlvbihtZXRhLCBjYWxsYmFjaykge1xyXG5cdFx0XHRcdHZhciBwZyA9IHtcclxuXHRcdFx0XHRcdG1ldGE6IG51bGwsXHJcblx0XHRcdFx0XHRwYWdlcjogbnVsbCxcclxuXHRcdFx0XHRcdHBhZ2luYXRlRXZlbnQ6IG51bGwsXHJcblx0XHRcdFx0XHRwYWdlckxheW91dDoge3BhZ2luYXRpb246IG51bGwsIGluZm86IG51bGx9LFxyXG5cdFx0XHRcdFx0Y2FsbGJhY2s6IG51bGwsXHJcblx0XHRcdFx0XHRpbml0OiBmdW5jdGlvbihtZXRhKSB7XHJcblx0XHRcdFx0XHRcdHBnLm1ldGEgPSBtZXRhO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcGFyc2UgcGFnaW5hdGlvbiBtZXRhIHRvIGludGVnZXJcclxuXHRcdFx0XHRcdFx0cGcubWV0YS5wYWdlID0gcGFyc2VJbnQocGcubWV0YS5wYWdlKTtcclxuXHRcdFx0XHRcdFx0cGcubWV0YS5wYWdlcyA9IHBhcnNlSW50KHBnLm1ldGEucGFnZXMpO1xyXG5cdFx0XHRcdFx0XHRwZy5tZXRhLnBlcnBhZ2UgPSBwYXJzZUludChwZy5tZXRhLnBlcnBhZ2UpO1xyXG5cdFx0XHRcdFx0XHRwZy5tZXRhLnRvdGFsID0gcGFyc2VJbnQocGcubWV0YS50b3RhbCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBhbHdheXMgcmVjb3VudCB0b3RhbCBwYWdlc1xyXG5cdFx0XHRcdFx0XHRwZy5tZXRhLnBhZ2VzID0gTWF0aC5tYXgoTWF0aC5jZWlsKHBnLm1ldGEudG90YWwgLyBwZy5tZXRhLnBlcnBhZ2UpLCAxKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGN1cnJlbnQgcGFnZSBtdXN0IGJlIG5vdCBvdmVyIHRoYW4gdG90YWwgcGFnZXNcclxuXHRcdFx0XHRcdFx0aWYgKHBnLm1ldGEucGFnZSA+IHBnLm1ldGEucGFnZXMpIHBnLm1ldGEucGFnZSA9IHBnLm1ldGEucGFnZXM7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzZXQgdW5pcXVlIGV2ZW50IG5hbWUgYmV0d2VlbiB0YWJsZXNcclxuXHRcdFx0XHRcdFx0cGcucGFnaW5hdGVFdmVudCA9IFBsdWdpbi5nZXRUYWJsZVByZWZpeCgncGFnaW5nJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRwZy5wYWdlciA9ICQoZGF0YXRhYmxlLnRhYmxlKS5zaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJyk7XHJcblx0XHRcdFx0XHRcdGlmICgkKHBnLnBhZ2VyKS5oYXNDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2luZy1sb2FkZWQnKSkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gaWYgY2xhc3MgLicrcGZ4KydkYXRhdGFibGUtcGFnaW5nLWxvYWRlZCBub3QgZXhpc3QsIHJlY3JlYXRlIHBhZ2luYXRpb25cclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikucmVtb3ZlKCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBpZiBubyBwYWdlcyBhdmFpbGFibGVcclxuXHRcdFx0XHRcdFx0aWYgKHBnLm1ldGEucGFnZXMgPT09IDApIHJldHVybjtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHVwZGF0ZSBkYXRhc291cmNlIHBhcmFtc1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVBhcmFtKCdwYWdpbmF0aW9uJywge1xyXG5cdFx0XHRcdFx0XHRcdHBhZ2U6IHBnLm1ldGEucGFnZSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlczogcGcubWV0YS5wYWdlcyxcclxuXHRcdFx0XHRcdFx0XHRwZXJwYWdlOiBwZy5tZXRhLnBlcnBhZ2UsXHJcblx0XHRcdFx0XHRcdFx0dG90YWw6IHBnLm1ldGEudG90YWwsXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gZGVmYXVsdCBjYWxsYmFjayBmdW5jdGlvbiwgY29udGFpbnMgcmVtb3RlIHBhZ2luYXRpb24gaGFuZGxlclxyXG5cdFx0XHRcdFx0XHRwZy5jYWxsYmFjayA9IHBnLnNlcnZlckNhbGxiYWNrO1xyXG5cdFx0XHRcdFx0XHQvLyBjdXN0b20gY2FsbGJhY2sgZnVuY3Rpb25cclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgcGcuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuXHJcblx0XHRcdFx0XHRcdHBnLmFkZFBhZ2luYXRlRXZlbnQoKTtcclxuXHRcdFx0XHRcdFx0cGcucG9wdWxhdGUoKTtcclxuXHJcblx0XHRcdFx0XHRcdHBnLm1ldGEucGFnZSA9IE1hdGgubWF4KHBnLm1ldGEucGFnZSB8fCAxLCBwZy5tZXRhLnBhZ2UpO1xyXG5cclxuXHRcdFx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGcucGFnaW5hdGVFdmVudCwgcGcubWV0YSk7XHJcblxyXG5cdFx0XHRcdFx0XHRwZy5wYWdpbmdCcmVha3BvaW50LmNhbGwoKTtcclxuXHRcdFx0XHRcdFx0JCh3aW5kb3cpLnJlc2l6ZShwZy5wYWdpbmdCcmVha3BvaW50KTtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRzZXJ2ZXJDYWxsYmFjazogZnVuY3Rpb24oY3R4LCBtZXRhKSB7XHJcblx0XHRcdFx0XHRcdFBsdWdpbi5kYXRhUmVuZGVyKCk7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0cG9wdWxhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IGRhdGF0YWJsZS5kYXRhU2V0IHx8IFtdO1xyXG5cdFx0XHRcdFx0XHQvLyBubyByZWNvcmRzIGF2YWlsYWJsZVxyXG5cdFx0XHRcdFx0XHRpZiAoZGF0YXRhYmxlLmRhdGFTZXQubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgaWNvbnMgPSBQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMucGFnaW5hdGlvbicpO1xyXG5cdFx0XHRcdFx0XHR2YXIgdGl0bGUgPSBQbHVnaW4uZ2V0T3B0aW9uKCd0cmFuc2xhdGUudG9vbGJhci5wYWdpbmF0aW9uLml0ZW1zLmRlZmF1bHQnKTtcclxuXHRcdFx0XHRcdFx0Ly8gcGFnZXIgcm9vdCBlbGVtZW50XHJcblx0XHRcdFx0XHRcdHBnLnBhZ2VyID0gJCgnPGRpdi8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlciAnICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdpbmctbG9hZGVkJyk7XHJcblx0XHRcdFx0XHRcdC8vIG51bWJlcmluZyBsaW5rc1xyXG5cdFx0XHRcdFx0XHR2YXIgcGFnZXJOdW1iZXIgPSAkKCc8dWwvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbmF2IG1iLTUgbWItc20tMCcpO1xyXG5cdFx0XHRcdFx0XHRwZy5wYWdlckxheW91dFsncGFnaW5hdGlvbiddID0gcGFnZXJOdW1iZXI7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBwYWdlciBmaXJzdC9wcmV2aW91cyBidXR0b25cclxuXHRcdFx0XHRcdFx0JCgnPGxpLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXR0cigndGl0bGUnLCB0aXRsZS5maXJzdCkuXHJcblx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmsgJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1maXJzdCcpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxpLz4nKS5hZGRDbGFzcyhpY29ucy5maXJzdCkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0b24oJ2NsaWNrJywgcGcuZ290b01vcmVQYWdlKS5cclxuXHRcdFx0XHRcdFx0XHRcdGF0dHIoJ2RhdGEtcGFnZScsIDEpKS5cclxuXHRcdFx0XHRcdFx0XHRhcHBlbmRUbyhwYWdlck51bWJlcik7XHJcblx0XHRcdFx0XHRcdCQoJzxsaS8+JykuXHJcblx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxhLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRcdGF0dHIoJ3RpdGxlJywgdGl0bGUucHJldikuXHJcblx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmsgJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1wcmV2JykuXHJcblx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGkvPicpLmFkZENsYXNzKGljb25zLnByZXYpKS5cclxuXHRcdFx0XHRcdFx0XHRcdG9uKCdjbGljaycsIHBnLmdvdG9Nb3JlUGFnZSkpLlxyXG5cdFx0XHRcdFx0XHRcdGFwcGVuZFRvKHBhZ2VyTnVtYmVyKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIG1vcmUgcHJldmlvdXMgcGFnZXNcclxuXHRcdFx0XHRcdFx0JCgnPGxpLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXR0cigndGl0bGUnLCB0aXRsZS5tb3JlKS5cclxuXHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluayAnICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLW1vcmUtcHJldicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0aHRtbCgkKCc8aS8+JykuYWRkQ2xhc3MoaWNvbnMubW9yZSkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0b24oJ2NsaWNrJywgcGcuZ290b01vcmVQYWdlKSkuXHJcblx0XHRcdFx0XHRcdFx0YXBwZW5kVG8ocGFnZXJOdW1iZXIpO1xyXG5cclxuXHRcdFx0XHRcdFx0JCgnPGxpLz4nKS5hcHBlbmQoJCgnPGlucHV0Lz4nKS5hdHRyKCd0eXBlJywgJ3RleHQnKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWlucHV0IGZvcm0tY29udHJvbCcpLmF0dHIoJ3RpdGxlJywgdGl0bGUuaW5wdXQpLm9uKCdrZXl1cCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIG9uIGtleXVwIHVwZGF0ZSBbZGF0YS1wYWdlXVxyXG5cdFx0XHRcdFx0XHRcdCQodGhpcykuYXR0cignZGF0YS1wYWdlJywgTWF0aC5hYnMoJCh0aGlzKS52YWwoKSkpO1xyXG5cdFx0XHRcdFx0XHR9KS5vbigna2V5cHJlc3MnLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gb24ga2V5cHJlc3NlZCBlbnRlciBidXR0b25cclxuXHRcdFx0XHRcdFx0XHRpZiAoZS53aGljaCA9PT0gMTMpIHBnLmdvdG9Nb3JlUGFnZShlKTtcclxuXHRcdFx0XHRcdFx0fSkpLmFwcGVuZFRvKHBhZ2VyTnVtYmVyKTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBwYWdlc051bWJlciA9IFBsdWdpbi5nZXRPcHRpb24oJ3Rvb2xiYXIuaXRlbXMucGFnaW5hdGlvbi5wYWdlcy5kZXNrdG9wLnBhZ2VzTnVtYmVyJyk7XHJcblx0XHRcdFx0XHRcdHZhciBlbmQgPSBNYXRoLmNlaWwocGcubWV0YS5wYWdlIC8gcGFnZXNOdW1iZXIpICogcGFnZXNOdW1iZXI7XHJcblx0XHRcdFx0XHRcdHZhciBzdGFydCA9IGVuZCAtIHBhZ2VzTnVtYmVyO1xyXG5cdFx0XHRcdFx0XHRpZiAoZW5kID4gcGcubWV0YS5wYWdlcykge1xyXG5cdFx0XHRcdFx0XHRcdGVuZCA9IHBnLm1ldGEucGFnZXM7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGtlZXAgcGFnaW5hdGlvbiAxIGlmIHRoZXJlIGlzIG5vIHJlY29yZHNcclxuXHRcdFx0XHRcdFx0aWYgKHN0YXJ0IDwgMCkge1xyXG5cdFx0XHRcdFx0XHRcdHN0YXJ0ID0gMDtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgeCA9IHN0YXJ0OyB4IDwgKGVuZCB8fCAxKTsgeCsrKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHBhZ2VOdW1iZXIgPSB4ICsgMTtcclxuXHRcdFx0XHRcdFx0XHQkKCc8bGkvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxhLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0YWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rICcgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstbnVtYmVyJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdHRleHQocGFnZU51bWJlcikuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGF0dHIoJ2RhdGEtcGFnZScsIHBhZ2VOdW1iZXIpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRhdHRyKCd0aXRsZScsIHBhZ2VOdW1iZXIpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRvbignY2xpY2snLCBwZy5nb3RvUGFnZSkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwZW5kVG8ocGFnZXJOdW1iZXIpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBtb3JlIG5leHQgcGFnZXNcclxuXHRcdFx0XHRcdFx0JCgnPGxpLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXR0cigndGl0bGUnLCB0aXRsZS5tb3JlKS5cclxuXHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluayAnICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLW1vcmUtbmV4dCcpLlxyXG5cdFx0XHRcdFx0XHRcdFx0aHRtbCgkKCc8aS8+JykuYWRkQ2xhc3MoaWNvbnMubW9yZSkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0b24oJ2NsaWNrJywgcGcuZ290b01vcmVQYWdlKSkuXHJcblx0XHRcdFx0XHRcdFx0YXBwZW5kVG8ocGFnZXJOdW1iZXIpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcGFnZXIgbmV4dC9sYXN0IGJ1dHRvblxyXG5cdFx0XHRcdFx0XHQkKCc8bGkvPicpLlxyXG5cdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8YS8+JykuXHJcblx0XHRcdFx0XHRcdFx0XHRhdHRyKCd0aXRsZScsIHRpdGxlLm5leHQpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rICcgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstbmV4dCcpLlxyXG5cdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxpLz4nKS5hZGRDbGFzcyhpY29ucy5uZXh0KSkuXHJcblx0XHRcdFx0XHRcdFx0XHRvbignY2xpY2snLCBwZy5nb3RvTW9yZVBhZ2UpKS5cclxuXHRcdFx0XHRcdFx0XHRhcHBlbmRUbyhwYWdlck51bWJlcik7XHJcblx0XHRcdFx0XHRcdCQoJzxsaS8+JykuXHJcblx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxhLz4nKS5cclxuXHRcdFx0XHRcdFx0XHRcdGF0dHIoJ3RpdGxlJywgdGl0bGUubGFzdCkuXHJcblx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmsgJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1sYXN0JykuXHJcblx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGkvPicpLmFkZENsYXNzKGljb25zLmxhc3QpKS5cclxuXHRcdFx0XHRcdFx0XHRcdG9uKCdjbGljaycsIHBnLmdvdG9Nb3JlUGFnZSkuXHJcblx0XHRcdFx0XHRcdFx0XHRhdHRyKCdkYXRhLXBhZ2UnLCBwZy5tZXRhLnBhZ2VzKSkuXHJcblx0XHRcdFx0XHRcdFx0YXBwZW5kVG8ocGFnZXJOdW1iZXIpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcGFnZSBpbmZvXHJcblx0XHRcdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCd0b29sYmFyLml0ZW1zLmluZm8nKSkge1xyXG5cdFx0XHRcdFx0XHRcdHBnLnBhZ2VyTGF5b3V0WydpbmZvJ10gPSAkKCc8ZGl2Lz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWluZm8nKS5hcHBlbmQoJCgnPHNwYW4vPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItZGV0YWlsJykpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQkLmVhY2goUGx1Z2luLmdldE9wdGlvbigndG9vbGJhci5sYXlvdXQnKSwgZnVuY3Rpb24oaSwgbGF5b3V0KSB7XHJcblx0XHRcdFx0XHRcdFx0JChwZy5wYWdlckxheW91dFtsYXlvdXRdKS5hcHBlbmRUbyhwZy5wYWdlcik7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcGFnZSBzaXplIHNlbGVjdFxyXG5cdFx0XHRcdFx0XHR2YXIgcGFnZVNpemVTZWxlY3QgPSAkKCc8c2VsZWN0Lz4nKS5cclxuXHRcdFx0XHRcdFx0XHRhZGRDbGFzcygnc2VsZWN0cGlja2VyICcgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLXNpemUnKS5cclxuXHRcdFx0XHRcdFx0XHRhdHRyKCd0aXRsZScsIFBsdWdpbi5nZXRPcHRpb24oJ3RyYW5zbGF0ZS50b29sYmFyLnBhZ2luYXRpb24uaXRlbXMuZGVmYXVsdC5zZWxlY3QnKSkuXHJcblx0XHRcdFx0XHRcdFx0YXR0cignZGF0YS13aWR0aCcsICc2MHB4JykuXHJcblx0XHRcdFx0XHRcdFx0YXR0cignZGF0YS1jb250YWluZXInLCAnYm9keScpLlxyXG5cdFx0XHRcdFx0XHRcdHZhbChwZy5tZXRhLnBlcnBhZ2UpLlxyXG5cdFx0XHRcdFx0XHRcdG9uKCdjaGFuZ2UnLCBwZy51cGRhdGVQZXJwYWdlKS5cclxuXHRcdFx0XHRcdFx0XHRwcmVwZW5kVG8ocGcucGFnZXJMYXlvdXRbJ2luZm8nXSk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgcGFnZVNpemVzID0gUGx1Z2luLmdldE9wdGlvbigndG9vbGJhci5pdGVtcy5wYWdpbmF0aW9uLnBhZ2VTaXplU2VsZWN0Jyk7XHJcblx0XHRcdFx0XHRcdC8vIGRlZmF1bHQgdmFsdWUgaGVyZSwgdG8gZml4IG92ZXJyaWRlIG9wdGlvbiBieSB1c2VyXHJcblx0XHRcdFx0XHRcdGlmIChwYWdlU2l6ZXMubGVuZ3RoID09IDApIHBhZ2VTaXplcyA9IFs1LCAxMCwgMjAsIDMwLCA1MCwgMTAwXTtcclxuXHRcdFx0XHRcdFx0JC5lYWNoKHBhZ2VTaXplcywgZnVuY3Rpb24oaSwgc2l6ZSkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBkaXNwbGF5ID0gc2l6ZTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoc2l6ZSA9PT0gLTEpIGRpc3BsYXkgPSBQbHVnaW4uZ2V0T3B0aW9uKCd0cmFuc2xhdGUudG9vbGJhci5wYWdpbmF0aW9uLml0ZW1zLmRlZmF1bHQuYWxsJyk7XHJcblx0XHRcdFx0XHRcdFx0JCgnPG9wdGlvbi8+JykuYXR0cigndmFsdWUnLCBzaXplKS5odG1sKGRpc3BsYXkpLmFwcGVuZFRvKHBhZ2VTaXplU2VsZWN0KTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBpbml0IHNlbGVjdHBpY2tlciB0byBkcm9wZG93blxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0JCgnLnNlbGVjdHBpY2tlcicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0c2VsZWN0cGlja2VyKCkuXHJcblx0XHRcdFx0XHRcdFx0XHRvbignaGlkZS5icy5zZWxlY3QnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZml4IGRyb3B1cCBhcnJvdyBpY29uIG9uIGhpZGVcclxuXHRcdFx0XHRcdFx0XHRcdFx0JCh0aGlzKS5jbG9zZXN0KCcuYm9vdHN0cmFwLXNlbGVjdCcpLnJlbW92ZUNsYXNzKCdkcm9wdXAnKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0pLlxyXG5cdFx0XHRcdFx0XHRcdFx0c2libGluZ3MoJy5kcm9wZG93bi10b2dnbGUnKS5cclxuXHRcdFx0XHRcdFx0XHRcdGF0dHIoJ3RpdGxlJywgUGx1Z2luLmdldE9wdGlvbigndHJhbnNsYXRlLnRvb2xiYXIucGFnaW5hdGlvbi5pdGVtcy5kZWZhdWx0LnNlbGVjdCcpKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRwZy5wYXN0ZSgpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHBhc3RlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0Ly8gaW5zZXJ0IHBhZ2luYXRpb24gYmFzZWQgb24gcGxhY2VtZW50IHBvc2l0aW9uLCB0b3B8Ym90dG9tXHJcblx0XHRcdFx0XHRcdCQuZWFjaCgkLnVuaXF1ZShQbHVnaW4uZ2V0T3B0aW9uKCd0b29sYmFyLnBsYWNlbWVudCcpKSxcclxuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbihpLCBwb3NpdGlvbikge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKHBnLnBhZ2VyKS5jbG9uZSh0cnVlKS5pbnNlcnRBZnRlcihkYXRhdGFibGUudGFibGUpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHBvc2l0aW9uID09PSAndG9wJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBwYWdlciB0b3AgbmVlZCBzb21lIGV4dHJhIHNwYWNlXHJcblx0XHRcdFx0XHRcdFx0XHRcdCQocGcucGFnZXIpLmNsb25lKHRydWUpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItdG9wJykuaW5zZXJ0QmVmb3JlKGRhdGF0YWJsZS50YWJsZSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0Z290b01vcmVQYWdlOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0Ly8gJCh0aGlzKSBpcyBhIGxpbmsgb2YgLicrcGZ4KydkYXRhdGFibGUtcGFnZXItbGlua1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCQodGhpcykuYXR0cignZGlzYWJsZWQnKSA9PT0gJ2Rpc2FibGVkJykgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHBhZ2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtcGFnZScpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gZXZlbnQgZnJvbSB0ZXh0IGlucHV0XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgcGFnZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHRwYWdlID0gJChlLnRhcmdldCkuYXR0cignZGF0YS1wYWdlJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHBnLm9wZW5QYWdlKHBhcnNlSW50KHBhZ2UpKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGdvdG9QYWdlOiBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdFx0Ly8gcHJldmVudCBmcm9tIGNsaWNrIHNhbWUgcGFnZSBudW1iZXJcclxuXHRcdFx0XHRcdFx0aWYgKCQodGhpcykuaGFzQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWFjdGl2ZScpKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHRwZy5vcGVuUGFnZShwYXJzZUludCgkKHRoaXMpLmRhdGEoJ3BhZ2UnKSkpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdG9wZW5QYWdlOiBmdW5jdGlvbihwYWdlKSB7XHJcblx0XHRcdFx0XHRcdC8vIGN1cnJlbnRQYWdlIGlzIDEtYmFzZWQgaW5kZXhcclxuXHRcdFx0XHRcdFx0cGcubWV0YS5wYWdlID0gcGFyc2VJbnQocGFnZSk7XHJcblxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZy5wYWdpbmF0ZUV2ZW50LCBwZy5tZXRhKTtcclxuXHRcdFx0XHRcdFx0cGcuY2FsbGJhY2socGcsIHBnLm1ldGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIHBhZ2UgY2FsbGJhY2sgZnVuY3Rpb25cclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWdvdG8tcGFnZScsIHBnLm1ldGEpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHVwZGF0ZVBlcnBhZ2U6IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0XHQvLyBpZiAoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0LmhlaWdodCcpID09PSBudWxsKSB7XHJcblx0XHRcdFx0XHRcdC8vIGZpeCB3aGl0ZSBzcGFjZSwgd2hlbiBwZXJwYWdlIGlzIHNldCBmcm9tIG1hbnkgcmVjb3JkcyB0byBsZXNzIHJlY29yZHNcclxuXHRcdFx0XHRcdFx0Ly8gJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe3Njcm9sbFRvcDogJChkYXRhdGFibGUpLnBvc2l0aW9uKCkudG9wfSk7XHJcblx0XHRcdFx0XHRcdC8vIH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGhpZGUgZHJvcGRvd24gYWZ0ZXIgc2VsZWN0XHJcblx0XHRcdFx0XHRcdCQodGhpcykuc2VsZWN0cGlja2VyKCd0b2dnbGUnKTtcclxuXHJcblx0XHRcdFx0XHRcdHBnLnBhZ2VyID0gJChkYXRhdGFibGUudGFibGUpLnNpYmxpbmdzKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXInKS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2luZy1sb2FkZWQnKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIG9uIGNoYW5nZSBzZWxlY3QgcGFnZSBzaXplXHJcblx0XHRcdFx0XHRcdGlmIChlLm9yaWdpbmFsRXZlbnQpIHtcclxuXHRcdFx0XHRcdFx0XHRwZy5tZXRhLnBlcnBhZ2UgPSBwYXJzZUludCgkKHRoaXMpLnZhbCgpKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikuZmluZCgnc2VsZWN0LicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLXNpemUnKS52YWwocGcubWV0YS5wZXJwYWdlKS5hdHRyKCdkYXRhLXNlbGVjdGVkJywgcGcubWV0YS5wZXJwYWdlKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHVwZGF0ZSBkYXRhc291cmNlIHBhcmFtc1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVBhcmFtKCdwYWdpbmF0aW9uJywge1xyXG5cdFx0XHRcdFx0XHRcdHBhZ2U6IHBnLm1ldGEucGFnZSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlczogcGcubWV0YS5wYWdlcyxcclxuXHRcdFx0XHRcdFx0XHRwZXJwYWdlOiBwZy5tZXRhLnBlcnBhZ2UsXHJcblx0XHRcdFx0XHRcdFx0dG90YWw6IHBnLm1ldGEudG90YWwsXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIHBhZ2UgY2FsbGJhY2sgZnVuY3Rpb25cclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLXVwZGF0ZS1wZXJwYWdlJywgcGcubWV0YSk7XHJcblx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBnLnBhZ2luYXRlRXZlbnQsIHBnLm1ldGEpO1xyXG5cdFx0XHRcdFx0XHRwZy5jYWxsYmFjayhwZywgcGcubWV0YSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyB1cGRhdGUgcGFnaW5hdGlvbiBpbmZvXHJcblx0XHRcdFx0XHRcdHBnLnVwZGF0ZUluZm8uY2FsbCgpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGFkZFBhZ2luYXRlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0Ly8gcGFnaW5hdGlvbiBldmVudFxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkub2ZmKHBnLnBhZ2luYXRlRXZlbnQpLm9uKHBnLnBhZ2luYXRlRXZlbnQsIGZ1bmN0aW9uKGUsIG1ldGEpIHtcclxuXHRcdFx0XHRcdFx0XHRQbHVnaW4uc3Bpbm5lckNhbGxiYWNrKHRydWUpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRwZy5wYWdlciA9ICQoZGF0YXRhYmxlLnRhYmxlKS5zaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJyk7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHBhZ2VyTnVtYmVyID0gJChwZy5wYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLW5hdicpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBzZXQgc3luYyBhY3RpdmUgcGFnZSBjbGFzc1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJOdW1iZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWFjdGl2ZScpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1hY3RpdmUnKTtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyTnVtYmVyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1udW1iZXJbZGF0YS1wYWdlPVwiJyArIG1ldGEucGFnZSArICdcIl0nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstYWN0aXZlJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIHNldCBuZXh0IGFuZCBwcmV2aW91cyBsaW5rIHBhZ2UgbnVtYmVyXHJcblx0XHRcdFx0XHRcdFx0JChwYWdlck51bWJlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstcHJldicpLmF0dHIoJ2RhdGEtcGFnZScsIE1hdGgubWF4KG1ldGEucGFnZSAtIDEsIDEpKTtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyTnVtYmVyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1uZXh0JykuYXR0cignZGF0YS1wYWdlJywgTWF0aC5taW4obWV0YS5wYWdlICsgMSwgbWV0YS5wYWdlcykpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyBjdXJyZW50IHBhZ2UgaW5wdXQgdmFsdWUgc3luY1xyXG5cdFx0XHRcdFx0XHRcdCQocGcucGFnZXIpLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKHRoaXMpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1pbnB1dFt0eXBlPVwidGV4dFwiXScpLnByb3AoJ3ZhbHVlJywgbWV0YS5wYWdlKTtcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gaWYgb25seSAxIHBhZ2UsIHNob3VsZCBoaWRlIHBhZ2U/XHJcblx0XHRcdFx0XHRcdFx0Ly8gJChwZy5wYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLW5hdicpLnNob3coKTtcclxuXHRcdFx0XHRcdFx0XHQvLyBpZiAobWV0YS5wYWdlcyA8PSAxKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gXHQvLyBoaWRlIHBhZ2VyIGlmIGhhcyAxIHBhZ2VcclxuXHRcdFx0XHRcdFx0XHQvLyBcdCQocGcucGFnZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1uYXYnKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gfVxyXG5cclxuXHRcdFx0XHRcdFx0XHQvLyB1cGRhdGUgZGF0YXNvdXJjZSBwYXJhbXNcclxuXHRcdFx0XHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVBhcmFtKCdwYWdpbmF0aW9uJywge1xyXG5cdFx0XHRcdFx0XHRcdFx0cGFnZTogcGcubWV0YS5wYWdlLFxyXG5cdFx0XHRcdFx0XHRcdFx0cGFnZXM6IHBnLm1ldGEucGFnZXMsXHJcblx0XHRcdFx0XHRcdFx0XHRwZXJwYWdlOiBwZy5tZXRhLnBlcnBhZ2UsXHJcblx0XHRcdFx0XHRcdFx0XHR0b3RhbDogcGcubWV0YS50b3RhbCxcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0JChwZy5wYWdlcikuZmluZCgnc2VsZWN0LicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLXNpemUnKS52YWwobWV0YS5wZXJwYWdlKS5hdHRyKCdkYXRhLXNlbGVjdGVkJywgbWV0YS5wZXJwYWdlKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gY2xlYXIgYWN0aXZlIHJvd3NcclxuXHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3ggPiBbdHlwZT1cImNoZWNrYm94XCJdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdy1hY3RpdmUnKS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1hY3RpdmUnKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0cGcudXBkYXRlSW5mby5jYWxsKCk7XHJcblx0XHRcdFx0XHRcdFx0cGcucGFnaW5nQnJlYWtwb2ludC5jYWxsKCk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gUGx1Z2luLnJlc2V0U2Nyb2xsKCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHVwZGF0ZUluZm86IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RhcnQgPSBNYXRoLm1heChwZy5tZXRhLnBlcnBhZ2UgKiAocGcubWV0YS5wYWdlIC0gMSkgKyAxLCAxKTtcclxuXHRcdFx0XHRcdFx0dmFyIGVuZCA9IE1hdGgubWluKHN0YXJ0ICsgcGcubWV0YS5wZXJwYWdlIC0gMSwgcGcubWV0YS50b3RhbCk7XHJcblx0XHRcdFx0XHRcdC8vIHBhZ2UgaW5mbyB1cGRhdGVcclxuXHRcdFx0XHRcdFx0JChwZy5wYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWluZm8nKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItZGV0YWlsJykuaHRtbChQbHVnaW4uZGF0YVBsYWNlaG9sZGVyKFxyXG5cdFx0XHRcdFx0XHRcdFBsdWdpbi5nZXRPcHRpb24oJ3RyYW5zbGF0ZS50b29sYmFyLnBhZ2luYXRpb24uaXRlbXMuaW5mbycpLCB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzZXQgc3RhcnQgcGFnZSAwIGlmIHRoZSBpcyBubyByZWNvcmRzLiBlZy4gU2hvd2luZyAwIC0gMCBvZiAwXHJcblx0XHRcdFx0XHRcdFx0XHRzdGFydDogcGcubWV0YS50b3RhbCA9PT0gMCA/IDAgOiBzdGFydCxcclxuXHRcdFx0XHRcdFx0XHRcdGVuZDogcGcubWV0YS5wZXJwYWdlID09PSAtMSA/IHBnLm1ldGEudG90YWwgOiBlbmQsXHJcblx0XHRcdFx0XHRcdFx0XHRwYWdlU2l6ZTogcGcubWV0YS5wZXJwYWdlID09PSAtMSB8fFxyXG5cdFx0XHRcdFx0XHRcdFx0cGcubWV0YS5wZXJwYWdlID49IHBnLm1ldGEudG90YWxcclxuXHRcdFx0XHRcdFx0XHRcdFx0PyBwZy5tZXRhLnRvdGFsXHJcblx0XHRcdFx0XHRcdFx0XHRcdDogcGcubWV0YS5wZXJwYWdlLFxyXG5cdFx0XHRcdFx0XHRcdFx0dG90YWw6IHBnLm1ldGEudG90YWwsXHJcblx0XHRcdFx0XHRcdFx0fSkpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvKipcclxuXHRcdFx0XHRcdCAqIFVwZGF0ZSBwYWdpbmF0aW9uIGxheW91dCBicmVha3BvaW50XHJcblx0XHRcdFx0XHQgKi9cclxuXHRcdFx0XHRcdHBhZ2luZ0JyZWFrcG9pbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHQvLyBrZWVwIHBhZ2UgbGlua3MgcmVmZXJlbmNlXHJcblx0XHRcdFx0XHRcdHZhciBwYWdlck51bWJlciA9ICQoZGF0YXRhYmxlLnRhYmxlKS5zaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJykuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLW5hdicpO1xyXG5cdFx0XHRcdFx0XHRpZiAoJChwYWdlck51bWJlcikubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgY3VycmVudFBhZ2UgPSBQbHVnaW4uZ2V0Q3VycmVudFBhZ2UoKTtcclxuXHRcdFx0XHRcdFx0dmFyIHBhZ2VySW5wdXQgPSAkKHBhZ2VyTnVtYmVyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItaW5wdXQnKS5jbG9zZXN0KCdsaScpO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gcmVzZXRcclxuXHRcdFx0XHRcdFx0JChwYWdlck51bWJlcikuZmluZCgnbGknKS5zaG93KCk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBwYWdpbmF0aW9uIHVwZGF0ZVxyXG5cdFx0XHRcdFx0XHQkLmVhY2goUGx1Z2luLmdldE9wdGlvbigndG9vbGJhci5pdGVtcy5wYWdpbmF0aW9uLnBhZ2VzJyksXHJcblx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24obW9kZSwgb3B0aW9uKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAodXRpbC5pc0luUmVzcG9uc2l2ZVJhbmdlKG1vZGUpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAobW9kZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgJ2Rlc2t0b3AnOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgJ3RhYmxldCc6XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgZW5kID0gTWF0aC5jZWlsKGN1cnJlbnRQYWdlIC8gb3B0aW9uLnBhZ2VzTnVtYmVyKSAqIG9wdGlvbi5wYWdlc051bWJlcjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBzdGFydCA9IGVuZCAtIG9wdGlvbi5wYWdlc051bWJlcjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQocGFnZXJJbnB1dCkuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cGcubWV0YSA9IFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oJ3BhZ2luYXRpb24nKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBnLnBhZ2luYXRpb25VcGRhdGUoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjYXNlICdtb2JpbGUnOlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0JChwYWdlcklucHV0KS5zaG93KCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQkKHBhZ2VyTnVtYmVyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1tb3JlLXByZXYnKS5jbG9zZXN0KCdsaScpLmhpZGUoKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCQocGFnZXJOdW1iZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLW1vcmUtbmV4dCcpLmNsb3Nlc3QoJ2xpJykuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0JChwYWdlck51bWJlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstbnVtYmVyJykuY2xvc2VzdCgnbGknKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvKipcclxuXHRcdFx0XHRcdCAqIFVwZGF0ZSBwYWdpbmF0aW9uIG51bWJlciBhbmQgYnV0dG9uIGRpc3BsYXlcclxuXHRcdFx0XHRcdCAqL1xyXG5cdFx0XHRcdFx0cGFnaW5hdGlvblVwZGF0ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdHZhciBwYWdlciA9ICQoZGF0YXRhYmxlLnRhYmxlKS5zaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJykuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLW5hdicpLFxyXG5cdFx0XHRcdFx0XHRcdHBhZ2VyTW9yZVByZXYgPSAkKHBhZ2VyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1tb3JlLXByZXYnKSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlck1vcmVOZXh0ID0gJChwYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstbW9yZS1uZXh0JyksXHJcblx0XHRcdFx0XHRcdFx0cGFnZXJGaXJzdCA9ICQocGFnZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWZpcnN0JyksXHJcblx0XHRcdFx0XHRcdFx0cGFnZXJQcmV2ID0gJChwYWdlcikuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstcHJldicpLFxyXG5cdFx0XHRcdFx0XHRcdHBhZ2VyTmV4dCA9ICQocGFnZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLW5leHQnKSxcclxuXHRcdFx0XHRcdFx0XHRwYWdlckxhc3QgPSAkKHBhZ2VyKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1sYXN0Jyk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBnZXQgdmlzaWJsZSBwYWdlXHJcblx0XHRcdFx0XHRcdHZhciBwYWdlck51bWJlciA9ICQocGFnZXIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLW51bWJlcicpO1xyXG5cdFx0XHRcdFx0XHQvLyBnZXQgcGFnZSBiZWZvcmUgb2YgZmlyc3QgdmlzaWJsZVxyXG5cdFx0XHRcdFx0XHR2YXIgbW9yZVByZXZQYWdlID0gTWF0aC5tYXgoJChwYWdlck51bWJlcikuZmlyc3QoKS5kYXRhKCdwYWdlJykgLSAxLCAxKTtcclxuXHRcdFx0XHRcdFx0JChwYWdlck1vcmVQcmV2KS5lYWNoKGZ1bmN0aW9uKGksIHByZXYpIHtcclxuXHRcdFx0XHRcdFx0XHQkKHByZXYpLmF0dHIoJ2RhdGEtcGFnZScsIG1vcmVQcmV2UGFnZSk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHQvLyBzaG93L2hpZGUgPGxpPlxyXG5cdFx0XHRcdFx0XHRpZiAobW9yZVByZXZQYWdlID09PSAxKSB7XHJcblx0XHRcdFx0XHRcdFx0JChwYWdlck1vcmVQcmV2KS5wYXJlbnQoKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0JChwYWdlck1vcmVQcmV2KS5wYXJlbnQoKS5zaG93KCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGdldCBwYWdlIGFmdGVyIG9mIGxhc3QgdmlzaWJsZVxyXG5cdFx0XHRcdFx0XHR2YXIgbW9yZU5leHRQYWdlID0gTWF0aC5taW4oJChwYWdlck51bWJlcikubGFzdCgpLmRhdGEoJ3BhZ2UnKSArIDEsXHJcblx0XHRcdFx0XHRcdFx0cGcubWV0YS5wYWdlcyk7XHJcblx0XHRcdFx0XHRcdCQocGFnZXJNb3JlTmV4dCkuZWFjaChmdW5jdGlvbihpLCBwcmV2KSB7XHJcblx0XHRcdFx0XHRcdFx0JChwYWdlck1vcmVOZXh0KS5hdHRyKCdkYXRhLXBhZ2UnLCBtb3JlTmV4dFBhZ2UpLnNob3coKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzaG93L2hpZGUgPGxpPlxyXG5cdFx0XHRcdFx0XHRpZiAobW9yZU5leHRQYWdlID09PSBwZy5tZXRhLnBhZ2VzXHJcblx0XHRcdFx0XHRcdFx0Ly8gbWlzc2luZyBkb3QgZml4IHdoZW4gbGFzdCBoaWRkZW4gcGFnZSBpcyBvbmUgbGVmdFxyXG5cdFx0XHRcdFx0XHRcdCYmIG1vcmVOZXh0UGFnZSA9PT0gJChwYWdlck51bWJlcikubGFzdCgpLmRhdGEoJ3BhZ2UnKSkge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJNb3JlTmV4dCkucGFyZW50KCkuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJNb3JlTmV4dCkucGFyZW50KCkuc2hvdygpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBiZWdpbi9lbmQgb2YgcGFnZXNcclxuXHRcdFx0XHRcdFx0aWYgKHBnLm1ldGEucGFnZSA9PT0gMSkge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJGaXJzdCkuYXR0cignZGlzYWJsZWQnLCB0cnVlKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyUHJldikuYXR0cignZGlzYWJsZWQnLCB0cnVlKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXBhZ2VyLWxpbmstZGlzYWJsZWQnKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyRmlyc3QpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWRpc2FibGVkJyk7XHJcblx0XHRcdFx0XHRcdFx0JChwYWdlclByZXYpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWRpc2FibGVkJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKHBnLm1ldGEucGFnZSA9PT0gcGcubWV0YS5wYWdlcykge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJOZXh0KS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJMYXN0KS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJOZXh0KS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJMYXN0KS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay1kaXNhYmxlZCcpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBkaXNwbGF5IG1vcmUgYnV0dG9uc1xyXG5cdFx0XHRcdFx0XHR2YXIgbmF2ID0gUGx1Z2luLmdldE9wdGlvbigndG9vbGJhci5pdGVtcy5wYWdpbmF0aW9uLm5hdmlnYXRpb24nKTtcclxuXHRcdFx0XHRcdFx0aWYgKCFuYXYuZmlyc3QpICQocGFnZXJGaXJzdCkucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdGlmICghbmF2LnByZXYpICQocGFnZXJQcmV2KS5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0aWYgKCFuYXYubmV4dCkgJChwYWdlck5leHQpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRpZiAoIW5hdi5sYXN0KSAkKHBhZ2VyTGFzdCkucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdGlmICghbmF2Lm1vcmUpIHtcclxuXHRcdFx0XHRcdFx0XHQkKHBhZ2VyTW9yZVByZXYpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdCQocGFnZXJNb3JlTmV4dCkucmVtb3ZlKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRwZy5pbml0KG1ldGEpO1xyXG5cdFx0XHRcdHJldHVybiBwZztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBIaWRlL3Nob3cgdGFibGUgY2VsbCBkZWZpbmVkIGJ5XHJcblx0XHRcdCAqIG9wdGlvbnNbY29sdW1uc11baV1bcmVzcG9uc2l2ZV1bdmlzaWJsZS9oaWRkZW5dXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRjb2x1bW5IaWRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgc2NyZWVuID0gdXRpbC5nZXRWaWV3UG9ydCgpLndpZHRoO1xyXG5cdFx0XHRcdC8vIGZvcmVhY2ggY29sdW1ucyBzZXR0aW5nXHJcblx0XHRcdFx0JC5lYWNoKG9wdGlvbnMuY29sdW1ucywgZnVuY3Rpb24oaSwgY29sdW1uKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5yZXNwb25zaXZlICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgY29sdW1uLnZpc2libGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHZhciBmaWVsZCA9IGNvbHVtbi5maWVsZDtcclxuXHRcdFx0XHRcdFx0dmFyIHRkcyA9ICQuZ3JlcCgkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKSwgZnVuY3Rpb24obiwgaSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBmaWVsZCA9PT0gJChuKS5kYXRhKCdmaWVsZCcpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIGhpZGUgYnkgZm9yY2VcclxuXHRcdFx0XHRcdFx0XHRpZiAoUGx1Z2luLmdldE9iamVjdCgndmlzaWJsZScsIGNvbHVtbikgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQkKHRkcykuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzaG93L2hpZGUgYnkgcmVzcG9uc2l2ZSBicmVha3BvaW50XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAodXRpbC5nZXRCcmVha3BvaW50KFBsdWdpbi5nZXRPYmplY3QoJ3Jlc3BvbnNpdmUuaGlkZGVuJywgY29sdW1uKSkgPj0gc2NyZWVuKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCQodGRzKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHQkKHRkcykuc2hvdygpO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHV0aWwuZ2V0QnJlYWtwb2ludChQbHVnaW4uZ2V0T2JqZWN0KCdyZXNwb25zaXZlLnZpc2libGUnLCBjb2x1bW4pKSA8PSBzY3JlZW4pIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JCh0ZHMpLnNob3coKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdCQodGRzKS5oaWRlKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXR1cCBzdWIgZGF0YXRhYmxlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXR1cFN1YkRhdGF0YWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIHN1YlRhYmxlQ2FsbGJhY2sgPSBQbHVnaW4uZ2V0T3B0aW9uKCdkZXRhaWwuY29udGVudCcpO1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc3ViVGFibGVDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHQvLyBzdWJ0YWJsZSBhbHJlYWR5IGV4aXN0XHJcblx0XHRcdFx0aWYgKCQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtc3VidGFibGUnKS5sZW5ndGggPiAwKSByZXR1cm47XHJcblxyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLndyYXApLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtc3VidGFibGUnKTtcclxuXHJcblx0XHRcdFx0b3B0aW9ucy5jb2x1bW5zWzBdWydzdWJ0YWJsZSddID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0Ly8gdG9nZ2xlIG9uIG9wZW4gc3ViIHRhYmxlXHJcblx0XHRcdFx0dmFyIHRvZ2dsZVN1YlRhYmxlID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdFx0Ly8gZ2V0IHBhcmVudCByb3cgb2YgdGhpcyBzdWJ0YWJsZVxyXG5cdFx0XHRcdFx0dmFyIHBhcmVudFJvdyA9ICQodGhpcykuY2xvc2VzdCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGdldCBzdWJ0YWJsZSByb3cgZm9yIHN1YiB0YWJsZVxyXG5cdFx0XHRcdFx0dmFyIHN1YlRhYmxlUm93ID0gJChwYXJlbnRSb3cpLm5leHQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3ctc3VidGFibGUnKTtcclxuXHRcdFx0XHRcdGlmICgkKHN1YlRhYmxlUm93KS5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRcdFx0Ly8gcHJlcGFyZSBET00gZm9yIHN1YiB0YWJsZSwgZWFjaCA8dHI+IGFzIHBhcmVudCBhbmQgYWRkIDx0cj4gYXMgY2hpbGQgdGFibGVcclxuXHRcdFx0XHRcdFx0c3ViVGFibGVSb3cgPSAkKCc8dHIvPicpLlxyXG5cdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LXN1YnRhYmxlICcgKyBwZnggKyAnZGF0YXRhYmxlLXJvdy1sb2FkaW5nJykuXHJcblx0XHRcdFx0XHRcdFx0aGlkZSgpLlxyXG5cdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8dGQvPicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtc3VidGFibGUnKS5hdHRyKCdjb2xzcGFuJywgUGx1Z2luLmdldFRvdGFsQ29sdW1ucygpKSk7XHJcblx0XHRcdFx0XHRcdCQocGFyZW50Um93KS5hZnRlcihzdWJUYWJsZVJvdyk7XHJcblx0XHRcdFx0XHRcdC8vIGFkZCBjbGFzcyB0byBldmVuIHJvd1xyXG5cdFx0XHRcdFx0XHRpZiAoJChwYXJlbnRSb3cpLmhhc0NsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LWV2ZW4nKSkge1xyXG5cdFx0XHRcdFx0XHRcdCQoc3ViVGFibGVSb3cpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LXN1YnRhYmxlLWV2ZW4nKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCQoc3ViVGFibGVSb3cpLnRvZ2dsZSgpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBzdWJUYWJsZSA9ICQoc3ViVGFibGVSb3cpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1zdWJ0YWJsZScpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGdldCBpZCBmcm9tIGZpcnN0IGNvbHVtbiBvZiBwYXJlbnQgcm93XHJcblx0XHRcdFx0XHR2YXIgcHJpbWFyeUtleSA9ICQodGhpcykuY2xvc2VzdCgnW2RhdGEtZmllbGRdOmZpcnN0LWNoaWxkJykuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1zdWJ0YWJsZScpLmRhdGEoJ3ZhbHVlJyk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGljb24gPSAkKHRoaXMpLmZpbmQoJ2knKS5yZW1vdmVBdHRyKCdjbGFzcycpO1xyXG5cclxuXHRcdFx0XHRcdC8vIHByZXZlbnQgZHVwbGljYXRlIGRhdGF0YWJsZSBpbml0XHJcblx0XHRcdFx0XHRpZiAoJChwYXJlbnRSb3cpLmhhc0NsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LXN1YnRhYmxlLWV4cGFuZGVkJykpIHtcclxuXHRcdFx0XHRcdFx0JChpY29uKS5hZGRDbGFzcyhQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMucm93RGV0YWlsLmNvbGxhcHNlJykpO1xyXG5cdFx0XHRcdFx0XHQvLyByZW1vdmUgZXhwYW5kIGNsYXNzIGZyb20gcGFyZW50IHJvd1xyXG5cdFx0XHRcdFx0XHQkKHBhcmVudFJvdykucmVtb3ZlQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctc3VidGFibGUtZXhwYW5kZWQnKTtcclxuXHRcdFx0XHRcdFx0Ly8gdHJpZ2dlciBldmVudCBvbiBjb2xsYXBzZVxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWNvbGxhcHNlLXN1YnRhYmxlJywgW3BhcmVudFJvd10pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ly8gZXhwYW5kIGFuZCBydW4gY2FsbGJhY2sgZnVuY3Rpb25cclxuXHRcdFx0XHRcdFx0JChpY29uKS5hZGRDbGFzcyhQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMucm93RGV0YWlsLmV4cGFuZCcpKTtcclxuXHRcdFx0XHRcdFx0Ly8gYWRkIGV4cGFuZCBjbGFzcyB0byBwYXJlbnQgcm93XHJcblx0XHRcdFx0XHRcdCQocGFyZW50Um93KS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1zdWJ0YWJsZS1leHBhbmRlZCcpO1xyXG5cdFx0XHRcdFx0XHQvLyB0cmlnZ2VyIGV2ZW50IG9uIGV4cGFuZFxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLWV4cGFuZC1zdWJ0YWJsZScsIFtwYXJlbnRSb3ddKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBwcmV2ZW50IGR1cGxpY2F0ZSBkYXRhdGFibGUgaW5pdFxyXG5cdFx0XHRcdFx0aWYgKCQoc3ViVGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZScpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHQvLyBnZXQgZGF0YSBieSBwcmltYXJ5IGlkXHJcblx0XHRcdFx0XHRcdCQubWFwKGRhdGF0YWJsZS5kYXRhU2V0LCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gcHJpbWFyeSBpZCBtdXN0IGJlIGF0IHRoZSBmaXJzdCBjb2x1bW4sIG90aGVyd2lzZSBlLmRhdGEgd2lsbCBiZSB1bmRlZmluZWRcclxuXHRcdFx0XHRcdFx0XHRpZiAocHJpbWFyeUtleSA9PT0gbltvcHRpb25zLmNvbHVtbnNbMF0uZmllbGRdKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRlLmRhdGEgPSBuO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBkZXByZWNhdGVkIGluIHY1LjAuNlxyXG5cdFx0XHRcdFx0XHRlLmRldGFpbENlbGwgPSBzdWJUYWJsZTtcclxuXHJcblx0XHRcdFx0XHRcdGUucGFyZW50Um93ID0gcGFyZW50Um93O1xyXG5cdFx0XHRcdFx0XHRlLnN1YlRhYmxlID0gc3ViVGFibGU7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBydW4gY2FsbGJhY2sgd2l0aCBldmVudFxyXG5cdFx0XHRcdFx0XHRzdWJUYWJsZUNhbGxiYWNrKGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0JChzdWJUYWJsZSkuY2hpbGRyZW4oJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZScpLm9uKHBmeCArICdkYXRhdGFibGUtb24taW5pdCcsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdFx0XHQkKHN1YlRhYmxlUm93KS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1sb2FkaW5nJyk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRpZiAoUGx1Z2luLmdldE9wdGlvbignZGF0YS50eXBlJykgPT09ICdsb2NhbCcpIHtcclxuXHRcdFx0XHRcdFx0XHQkKHN1YlRhYmxlUm93KS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1sb2FkaW5nJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHR2YXIgY29sdW1ucyA9IG9wdGlvbnMuY29sdW1ucztcclxuXHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5lYWNoKGZ1bmN0aW9uKHRyaSwgdHIpIHtcclxuXHRcdFx0XHRcdCQodHIpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuZWFjaChmdW5jdGlvbih0ZGksIHRkKSB7XHJcblx0XHRcdFx0XHRcdC8vIGdldCBjb2x1bW4gc2V0dGluZ3MgYnkgZmllbGRcclxuXHRcdFx0XHRcdFx0dmFyIGNvbHVtbiA9ICQuZ3JlcChjb2x1bW5zLCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuICQodGQpLmRhdGEoJ2ZpZWxkJykgPT09IG4uZmllbGQ7XHJcblx0XHRcdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSAkKHRkKS50ZXh0KCk7XHJcblx0XHRcdFx0XHRcdFx0Ly8gZW5hYmxlIGNvbHVtbiBzdWJ0YWJsZSB0b2dnbGVcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zdWJ0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29sdW1uLnN1YnRhYmxlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBjaGVjayBpZiBzdWJ0YWJsZSB0b2dnbGUgZXhpc3RcclxuXHRcdFx0XHRcdFx0XHRcdGlmICgkKHRkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLXN1YnRhYmxlJykubGVuZ3RoID4gMCkgcmV0dXJuO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYXBwZW5kIHN1YnRhYmxlIHRvZ2dsZVxyXG5cdFx0XHRcdFx0XHRcdFx0JCh0ZCkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGh0bWwoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLXN1YnRhYmxlJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXR0cignaHJlZicsICcjJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXR0cignZGF0YS12YWx1ZScsIHZhbHVlKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhdHRyKCd0aXRsZScsIFBsdWdpbi5nZXRPcHRpb24oJ2RldGFpbC50aXRsZScpKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRvbignY2xpY2snLCB0b2dnbGVTdWJUYWJsZSkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YXBwZW5kKCQoJzxpLz4nKS5jc3MoJ3dpZHRoJywgJCh0ZCkuZGF0YSgnd2lkdGgnKSkuYWRkQ2xhc3MoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lmljb25zLnJvd0RldGFpbC5jb2xsYXBzZScpKSkpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdC8vICQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicrcGZ4KyctZGF0YXRhYmxlLXJvdycpLmZpcnN0KClcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBEYXRhc291cmNlIG1hcHBpbmcgY2FsbGJhY2tcclxuXHRcdFx0ICovXHJcblx0XHRcdGRhdGFNYXBDYWxsYmFjazogZnVuY3Rpb24ocmF3KSB7XHJcblx0XHRcdFx0Ly8gc3RhdGljIGRhdGFzZXQgYXJyYXlcclxuXHRcdFx0XHR2YXIgZGF0YVNldCA9IHJhdztcclxuXHRcdFx0XHQvLyBkYXRhc2V0IG1hcHBpbmcgY2FsbGJhY2tcclxuXHRcdFx0XHRpZiAodHlwZW9mIFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc291cmNlLnJlYWQubWFwJykgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdHJldHVybiBQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnNvdXJjZS5yZWFkLm1hcCcpKHJhdyk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIGRlZmF1bHQgZGF0YSBtYXBwaW5nIGZhbGxiYWNrXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIHJhdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHJhdy5kYXRhICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRkYXRhU2V0ID0gcmF3LmRhdGE7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBkYXRhU2V0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0aXNTcGlubmluZzogZmFsc2UsXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBCbG9ja1VJIHNwaW5uZXIgY2FsbGJhY2tcclxuXHRcdFx0ICogQHBhcmFtIGJsb2NrXHJcblx0XHRcdCAqIEBwYXJhbSB0YXJnZXRcclxuXHRcdFx0ICovXHJcblx0XHRcdHNwaW5uZXJDYWxsYmFjazogZnVuY3Rpb24oYmxvY2ssIHRhcmdldCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAndW5kZWZpbmVkJykgdGFyZ2V0ID0gZGF0YXRhYmxlO1xyXG5cdFx0XHRcdC8vIGdldCBzcGlubmVyIG9wdGlvbnNcclxuXHRcdFx0XHR2YXIgc3Bpbm5lck9wdGlvbnMgPSBQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuc3Bpbm5lcicpO1xyXG5cdFx0XHRcdC8vIHNwaW5uZXIgaXMgZGlzYWJsZWRcclxuXHRcdFx0XHRpZiAodHlwZW9mIHNwaW5uZXJPcHRpb25zID09PSAndW5kZWZpbmVkJyB8fCAhc3Bpbm5lck9wdGlvbnMpIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGJsb2NrKSB7XHJcblx0XHRcdFx0XHRpZiAoIVBsdWdpbi5pc1NwaW5uaW5nKSB7XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2Ygc3Bpbm5lck9wdGlvbnMubWVzc2FnZSAhPT0gJ3VuZGVmaW5lZCcgJiYgc3Bpbm5lck9wdGlvbnMubWVzc2FnZSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0XHRcdC8vIHVzZSBkZWZhdWx0IHNwaW5uZXIgbWVzc2FnZSBmcm9tIHRyYW5zbGF0aW9uXHJcblx0XHRcdFx0XHRcdFx0c3Bpbm5lck9wdGlvbnMubWVzc2FnZSA9IFBsdWdpbi5nZXRPcHRpb24oJ3RyYW5zbGF0ZS5yZWNvcmRzLnByb2Nlc3NpbmcnKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRQbHVnaW4uaXNTcGlubmluZyA9IHRydWU7XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgYXBwICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdGFwcC5ibG9jayh0YXJnZXQsIHNwaW5uZXJPcHRpb25zKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uaXNTcGlubmluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBhcHAgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdGFwcC51bmJsb2NrKHRhcmdldCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIERlZmF1bHQgc29ydCBjYWxsYmFjayBmdW5jdGlvblxyXG5cdFx0XHQgKiBAcGFyYW0gZGF0YVxyXG5cdFx0XHQgKiBAcGFyYW0gc29ydFxyXG5cdFx0XHQgKiBAcGFyYW0gY29sdW1uXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfEFycmF5LjxUPnx7c29ydCwgZmllbGR9fHthc2MsIGRlc2N9fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c29ydENhbGxiYWNrOiBmdW5jdGlvbihkYXRhLCBzb3J0LCBjb2x1bW4pIHtcclxuXHRcdFx0XHR2YXIgdHlwZSA9IGNvbHVtblsndHlwZSddIHx8ICdzdHJpbmcnO1xyXG5cdFx0XHRcdHZhciBmb3JtYXQgPSBjb2x1bW5bJ2Zvcm1hdCddIHx8ICcnO1xyXG5cdFx0XHRcdHZhciBmaWVsZCA9IGNvbHVtblsnZmllbGQnXTtcclxuXHJcblx0XHRcdFx0cmV0dXJuICQoZGF0YSkuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcblx0XHRcdFx0XHR2YXIgYUZpZWxkID0gYVtmaWVsZF07XHJcblx0XHRcdFx0XHR2YXIgYkZpZWxkID0gYltmaWVsZF07XHJcblxyXG5cdFx0XHRcdFx0c3dpdGNoICh0eXBlKSB7XHJcblx0XHRcdFx0XHRcdGNhc2UgJ2RhdGUnOlxyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgbW9tZW50ID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNb21lbnQuanMgaXMgcmVxdWlyZWQuJyk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHZhciBkaWZmID0gbW9tZW50KGFGaWVsZCwgZm9ybWF0KS5kaWZmKG1vbWVudChiRmllbGQsIGZvcm1hdCkpO1xyXG5cdFx0XHRcdFx0XHRcdGlmIChzb3J0ID09PSAnYXNjJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPiAwID8gMSA6IGRpZmYgPCAwID8gLTEgOiAwO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA8IDAgPyAxIDogZGlmZiA+IDAgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0Y2FzZSAnbnVtYmVyJzpcclxuXHRcdFx0XHRcdFx0XHRpZiAoaXNOYU4ocGFyc2VGbG9hdChhRmllbGQpKSAmJiBhRmllbGQgIT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0YUZpZWxkID0gTnVtYmVyKGFGaWVsZC5yZXBsYWNlKC9bXjAtOVxcLi1dKy9nLCAnJykpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRpZiAoaXNOYU4ocGFyc2VGbG9hdChiRmllbGQpKSAmJiBiRmllbGQgIT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0YkZpZWxkID0gTnVtYmVyKGJGaWVsZC5yZXBsYWNlKC9bXjAtOVxcLi1dKy9nLCAnJykpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRhRmllbGQgPSBwYXJzZUZsb2F0KGFGaWVsZCk7XHJcblx0XHRcdFx0XHRcdFx0YkZpZWxkID0gcGFyc2VGbG9hdChiRmllbGQpO1xyXG5cdFx0XHRcdFx0XHRcdGlmIChzb3J0ID09PSAnYXNjJykge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGFGaWVsZCA+IGJGaWVsZCA/IDEgOiBhRmllbGQgPCBiRmllbGQgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBhRmllbGQgPCBiRmllbGQgPyAxIDogYUZpZWxkID4gYkZpZWxkID8gLTEgOiAwO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdGNhc2UgJ2h0bWwnOlxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiAkKGRhdGEpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZ2V0IHRoZSB0ZXh0IG9ubHkgZnJvbSBodG1sXHJcblx0XHRcdFx0XHRcdFx0XHRhRmllbGQgPSAkKGFbZmllbGRdKS50ZXh0KCk7XHJcblx0XHRcdFx0XHRcdFx0XHRiRmllbGQgPSAkKGJbZmllbGRdKS50ZXh0KCk7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBzb3J0XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoc29ydCA9PT0gJ2FzYycpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGFGaWVsZCA+IGJGaWVsZCA/IDEgOiBhRmllbGQgPCBiRmllbGQgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYUZpZWxkIDwgYkZpZWxkID8gMSA6IGFGaWVsZCA+IGJGaWVsZCA/IC0xIDogMDtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdGNhc2UgJ3N0cmluZyc6XHJcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFx0aWYgKHNvcnQgPT09ICdhc2MnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gYUZpZWxkID4gYkZpZWxkID8gMSA6IGFGaWVsZCA8IGJGaWVsZCA/IC0xIDogMDtcclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGFGaWVsZCA8IGJGaWVsZCA/IDEgOiBhRmllbGQgPiBiRmllbGQgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEN1c3RvbSBkZWJ1ZyBsb2dcclxuXHRcdFx0ICogQHBhcmFtIHRleHRcclxuXHRcdFx0ICogQHBhcmFtIG9ialxyXG5cdFx0XHQgKi9cclxuXHRcdFx0bG9nOiBmdW5jdGlvbih0ZXh0LCBvYmopIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIG9iaiA9ICcnO1xyXG5cdFx0XHRcdGlmIChkYXRhdGFibGUuZGVidWcpIHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHRleHQsIG9iaik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEF1dG8gaGlkZSBjb2x1bW5kcyBvdmVyZmxvdyBpbiByb3dcclxuXHRcdFx0ICovXHJcblx0XHRcdGF1dG9IaWRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgaGlkZGVuRXhpc3QgPSBmYWxzZTtcclxuXHRcdFx0XHQvLyBmb3JjZSBoaWRlIGVuYWJsZWRcclxuXHRcdFx0XHR2YXIgaGlkRGVmYXVsdCA9ICQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCdbZGF0YS1hdXRvaGlkZS1lbmFibGVkXScpO1xyXG5cdFx0XHRcdGlmIChoaWREZWZhdWx0Lmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0aGlkZGVuRXhpc3QgPSB0cnVlO1xyXG5cdFx0XHRcdFx0aGlkRGVmYXVsdC5oaWRlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgdG9nZ2xlSGlkZGVuQ29sdW1ucyA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgcm93ID0gJCh0aGlzKS5jbG9zZXN0KCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93Jyk7XHJcblx0XHRcdFx0XHR2YXIgZGV0YWlsUm93ID0gJChyb3cpLm5leHQoKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoISQoZGV0YWlsUm93KS5oYXNDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1kZXRhaWwnKSkge1xyXG5cdFx0XHRcdFx0XHQkKHRoaXMpLmZpbmQoJ2knKS5yZW1vdmVDbGFzcyhQbHVnaW4uZ2V0T3B0aW9uKCdsYXlvdXQuaWNvbnMucm93RGV0YWlsLmNvbGxhcHNlJykpLmFkZENsYXNzKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5pY29ucy5yb3dEZXRhaWwuZXhwYW5kJykpO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGhpZGRlbkNlbGxzID0gJChyb3cpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsOmhpZGRlbicpO1xyXG5cdFx0XHRcdFx0XHR2YXIgY2xvbmVkQ2VsbHMgPSBoaWRkZW5DZWxscy5jbG9uZSgpLnNob3coKTtcclxuXHJcblx0XHRcdFx0XHRcdGRldGFpbFJvdyA9ICQoJzx0ci8+JykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctZGV0YWlsJykuaW5zZXJ0QWZ0ZXIocm93KTtcclxuXHRcdFx0XHRcdFx0dmFyIGRldGFpbFJvd1RkID0gJCgnPHRkLz4nKS5hZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWRldGFpbCcpLmF0dHIoJ2NvbHNwYW4nLCBQbHVnaW4uZ2V0VG90YWxDb2x1bW5zKCkpLmFwcGVuZFRvKGRldGFpbFJvdyk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgZGV0YWlsU3ViVGFibGUgPSAkKCc8dGFibGUvPicpO1xyXG5cdFx0XHRcdFx0XHQkKGNsb25lZENlbGxzKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBmaWVsZCA9ICQodGhpcykuZGF0YSgnZmllbGQnKTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgY29sdW1uID0gJC5ncmVwKG9wdGlvbnMuY29sdW1ucywgZnVuY3Rpb24obiwgaSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZpZWxkID09PSBuLmZpZWxkO1xyXG5cdFx0XHRcdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY29sdW1uID09PSAndW5kZWZpbmVkJyB8fCBjb2x1bW4udmlzaWJsZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0XHRcdCQoZGV0YWlsU3ViVGFibGUpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGFwcGVuZCgkKCc8dHIgY2xhc3M9XCInICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3dcIj48L3RyPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPHRkIGNsYXNzPVwiJyArIHBmeCArICdkYXRhdGFibGUtY2VsbFwiPjwvdGQ+JykuYXBwZW5kKCQoJzxzcGFuLz4nKS5hcHBlbmQoY29sdW1uLnRpdGxlKSkpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQodGhpcykpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdCQoZGV0YWlsUm93VGQpLmFwcGVuZChkZXRhaWxTdWJUYWJsZSk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0JCh0aGlzKS5maW5kKCdpJykucmVtb3ZlQ2xhc3MoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lmljb25zLnJvd0RldGFpbC5leHBhbmQnKSkuYWRkQ2xhc3MoUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lmljb25zLnJvd0RldGFpbC5jb2xsYXBzZScpKTtcclxuXHRcdFx0XHRcdFx0JChkZXRhaWxSb3cpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGUpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsJykuc2hvdygpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgcmVjdXJzaXZlID0gMDtcclxuXHRcdFx0XHRcdFx0d2hpbGUgKCQodGhpcylbMF0ub2Zmc2V0V2lkdGggPCAkKHRoaXMpWzBdLnNjcm9sbFdpZHRoICYmIHJlY3Vyc2l2ZSA8IG9wdGlvbnMuY29sdW1ucy5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmVhY2goZnVuY3Rpb24oaSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGNlbGwgPSAkKHRoaXMpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsOm5vdCg6aGlkZGVuKTpub3QoW2RhdGEtYXV0b2hpZGUtZGlzYWJsZWRdKScpLmxhc3QoKTtcclxuXHRcdFx0XHRcdFx0XHRcdCQoY2VsbCkuaGlkZSgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aGlkZGVuRXhpc3QgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRcdHJlY3Vyc2l2ZSsrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRpZiAoaGlkZGVuRXhpc3QpIHtcclxuXHRcdFx0XHRcdFx0Ly8gdG9nZ2xlIHNob3cgaGlkZGVuIGNvbHVtbnNcclxuXHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBpZiBubyB0b2dnbGUgeWV0XHJcblx0XHRcdFx0XHRcdFx0aWYoJCh0aGlzKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtdG9nZ2xlLWRldGFpbCcpLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYWRkIHRvZ2dsZVxyXG5cdFx0XHRcdFx0XHRcdFx0JCh0aGlzKS5wcmVwZW5kKCQoJzx0ZC8+JykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0YWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1jZWxsICcgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1kZXRhaWwnKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJCgnPGEvPicpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS10b2dnbGUtZGV0YWlsJykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhdHRyKCdocmVmJywgJycpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b24oJ2NsaWNrJywgdG9nZ2xlSGlkZGVuQ29sdW1ucykuXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBlbmQoJzxpIGNsYXNzPVwiJyArIFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5pY29ucy5yb3dEZXRhaWwuY29sbGFwc2UnKSArICdcIj48L2k+JykpKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIGNoZWNrIGlmIHN1YnRhYmxlIHRvZ2dsZSBleGlzdFxyXG5cdFx0XHRcdFx0XHRcdGlmICgkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS10b2dnbGUtZGV0YWlsJykubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBhZGQgZW1wdHkgY29sdW1uIHRvIHRoZSBoZWFkZXIgYW5kIGZvb3RlclxyXG5cdFx0XHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0ZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJzdCgpLlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRwcmVwZW5kKCc8dGggY2xhc3M9XCInICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsICcgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1kZXRhaWxcIj48c3Bhbj48L3NwYW4+PC90aD4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlRm9vdCkuXHJcblx0XHRcdFx0XHRcdFx0XHRcdGZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0Zmlyc3QoKS5cclxuXHRcdFx0XHRcdFx0XHRcdFx0cHJlcGVuZCgnPHRoIGNsYXNzPVwiJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCAnICsgcGZ4ICsgJ2RhdGF0YWJsZS10b2dnbGUtZGV0YWlsXCI+PHNwYW4+PC9zcGFuPjwvdGg+Jyk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXRvZ2dsZS1kZXRhaWwnKS5maW5kKCdzcGFuJyk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0UGx1Z2luLmFkanVzdENlbGxzV2lkdGguY2FsbCgpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFRvIGVuYWJsZSBhdXRvIGNvbHVtbnMgZmVhdHVyZXMgZm9yIHJlbW90ZSBkYXRhIHNvdXJjZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0QXV0b0NvbHVtbnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLmF1dG9Db2x1bW5zJykpIHtcclxuXHRcdFx0XHRcdCQuZWFjaChkYXRhdGFibGUuZGF0YVNldFswXSwgZnVuY3Rpb24oaywgdikge1xyXG5cdFx0XHRcdFx0XHR2YXIgZm91bmQgPSAkLmdyZXAob3B0aW9ucy5jb2x1bW5zLCBmdW5jdGlvbihuLCBpKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGsgPT09IG4uZmllbGQ7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRpZiAoZm91bmQubGVuZ3RoID09PSAwKSB7XHJcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5jb2x1bW5zLnB1c2goe2ZpZWxkOiBrLCB0aXRsZToga30pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0UGx1Z2luLnNldEhlYWRUaXRsZSgpO1xyXG5cdFx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2xheW91dC5mb290ZXInKSkge1xyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUZvb3QpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLnNldEhlYWRUaXRsZShkYXRhdGFibGUudGFibGVGb290KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKioqKioqKioqKioqKioqKioqKipcclxuXHRcdFx0ICoqIEhFTFBFUlNcclxuXHRcdFx0ICoqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIENoZWNrIGlmIHRhYmxlIGlzIGEgbG9ja2VkIGNvbHVtcyB0YWJsZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0aXNMb2NrZWQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBpc0xvY2tlZCA9IFBsdWdpbi5sb2NrRW5hYmxlZENvbHVtbnMoKTtcclxuXHRcdFx0XHRyZXR1cm4gaXNMb2NrZWQubGVmdC5sZW5ndGggPiAwIHx8IGlzTG9ja2VkLnJpZ2h0Lmxlbmd0aCA+IDA7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRpc1N1YnRhYmxlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gdXRpbC5oYXNDbGFzcyhkYXRhdGFibGUud3JhcFswXSwgcGZ4ICsgJ2RhdGF0YWJsZS1zdWJ0YWJsZScpIHx8IGZhbHNlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCB0b3RhbCBleHRyYSBzcGFjZSBvZiBhbiBlbGVtZW50IGZvciB3aWR0aCBjYWxjdWxhdGlvbixcclxuXHRcdFx0ICogaW5jbHVkaW5nIHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyXHJcblx0XHRcdCAqIEBwYXJhbSBlbGVtZW50XHJcblx0XHRcdCAqIEByZXR1cm5zIHtudW1iZXJ9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRFeHRyYVNwYWNlOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcblx0XHRcdFx0dmFyIHBhZGRpbmcgPSBwYXJzZUludCgkKGVsZW1lbnQpLmNzcygncGFkZGluZ1JpZ2h0JykpICtcclxuXHRcdFx0XHRcdHBhcnNlSW50KCQoZWxlbWVudCkuY3NzKCdwYWRkaW5nTGVmdCcpKTtcclxuXHRcdFx0XHR2YXIgbWFyZ2luID0gcGFyc2VJbnQoJChlbGVtZW50KS5jc3MoJ21hcmdpblJpZ2h0JykpICtcclxuXHRcdFx0XHRcdHBhcnNlSW50KCQoZWxlbWVudCkuY3NzKCdtYXJnaW5MZWZ0JykpO1xyXG5cdFx0XHRcdHZhciBib3JkZXIgPSBNYXRoLmNlaWwoXHJcblx0XHRcdFx0XHQkKGVsZW1lbnQpLmNzcygnYm9yZGVyLXJpZ2h0LXdpZHRoJykucmVwbGFjZSgncHgnLCAnJykpO1xyXG5cdFx0XHRcdHJldHVybiBwYWRkaW5nICsgbWFyZ2luICsgYm9yZGVyO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEluc2VydCBkYXRhIG9mIGFycmF5IGludG8ge3sgfX0gdGVtcGxhdGUgcGxhY2Vob2xkZXJcclxuXHRcdFx0ICogQHBhcmFtIHRlbXBsYXRlXHJcblx0XHRcdCAqIEBwYXJhbSBkYXRhXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZGF0YVBsYWNlaG9sZGVyOiBmdW5jdGlvbih0ZW1wbGF0ZSwgZGF0YSkge1xyXG5cdFx0XHRcdHZhciByZXN1bHQgPSB0ZW1wbGF0ZTtcclxuXHRcdFx0XHQkLmVhY2goZGF0YSwgZnVuY3Rpb24oa2V5LCB2YWwpIHtcclxuXHRcdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKCd7eycgKyBrZXkgKyAnfX0nLCB2YWwpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHRhYmxlIHVuaXF1ZSBJRFxyXG5cdFx0XHQgKiBOb3RlOiB0YWJsZSB1bmlxdWUgY2hhbmdlIGVhY2ggdGltZSByZWZyZXNoZWRcclxuXHRcdFx0ICogQHBhcmFtIHN1ZmZpeFxyXG5cdFx0XHQgKiBAcmV0dXJucyB7Kn1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldFRhYmxlSWQ6IGZ1bmN0aW9uKHN1ZmZpeCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc3VmZml4ID09PSAndW5kZWZpbmVkJykgc3VmZml4ID0gJyc7XHJcblx0XHRcdFx0dmFyIGlkID0gJChkYXRhdGFibGUpLmF0dHIoJ2lkJyk7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdGlkID0gJChkYXRhdGFibGUpLmF0dHIoJ2NsYXNzJykuc3BsaXQoJyAnKVswXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGlkICsgc3VmZml4O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCB0YWJsZSBwcmVmaXggd2l0aCBkZXB0aCBudW1iZXJcclxuXHRcdFx0ICovXHJcblx0XHRcdGdldFRhYmxlUHJlZml4OiBmdW5jdGlvbihzdWZmaXgpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIHN1ZmZpeCAhPT0gJ3VuZGVmaW5lZCcpIHN1ZmZpeCA9ICctJyArIHN1ZmZpeDtcclxuXHRcdFx0XHRyZXR1cm4gUGx1Z2luLmdldFRhYmxlSWQoKSArICctJyArIFBsdWdpbi5nZXREZXB0aCgpICsgc3VmZml4O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCBjdXJyZW50IHRhYmxlIGRlcHRoIG9mIHN1YiB0YWJsZVxyXG5cdFx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0RGVwdGg6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBkZXB0aCA9IDA7XHJcblx0XHRcdFx0dmFyIHRhYmxlID0gZGF0YXRhYmxlLnRhYmxlO1xyXG5cdFx0XHRcdGRvIHtcclxuXHRcdFx0XHRcdHRhYmxlID0gJCh0YWJsZSkucGFyZW50cygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXRhYmxlJyk7XHJcblx0XHRcdFx0XHRkZXB0aCsrO1xyXG5cdFx0XHRcdH0gd2hpbGUgKCQodGFibGUpLmxlbmd0aCA+IDApO1xyXG5cdFx0XHRcdHJldHVybiBkZXB0aDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBLZWVwIHN0YXRlIGl0ZW1cclxuXHRcdFx0ICogQHBhcmFtIGtleVxyXG5cdFx0XHQgKiBAcGFyYW0gdmFsdWVcclxuXHRcdFx0ICovXHJcblx0XHRcdHN0YXRlS2VlcDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG5cdFx0XHRcdGtleSA9IFBsdWdpbi5nZXRUYWJsZVByZWZpeChrZXkpO1xyXG5cdFx0XHRcdGlmIChQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnNhdmVTdGF0ZScpID09PSBmYWxzZSkgcmV0dXJuO1xyXG5cdFx0XHRcdGlmIChsb2NhbFN0b3JhZ2UpIHtcclxuXHRcdFx0XHRcdGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHN0YXRlIGl0ZW1cclxuXHRcdFx0ICogQHBhcmFtIGtleVxyXG5cdFx0XHQgKiBAcGFyYW0gZGVmVmFsdWVcclxuXHRcdFx0ICovXHJcblx0XHRcdHN0YXRlR2V0OiBmdW5jdGlvbihrZXksIGRlZlZhbHVlKSB7XHJcblx0XHRcdFx0a2V5ID0gUGx1Z2luLmdldFRhYmxlUHJlZml4KGtleSk7XHJcblx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc2F2ZVN0YXRlJykgPT09IGZhbHNlKSByZXR1cm47XHJcblx0XHRcdFx0dmFyIHZhbHVlID0gbnVsbDtcclxuXHRcdFx0XHRpZiAobG9jYWxTdG9yYWdlKSB7XHJcblx0XHRcdFx0XHR2YWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFVwZGF0ZSBkYXRhIGluIHN0YXRlIHdpdGhvdXQgY2xlYXIgZXhpc3RpbmdcclxuXHRcdFx0ICogQHBhcmFtIGtleVxyXG5cdFx0XHQgKiBAcGFyYW0gdmFsdWVcclxuXHRcdFx0ICovXHJcblx0XHRcdHN0YXRlVXBkYXRlOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcblx0XHRcdFx0dmFyIG9yaSA9IFBsdWdpbi5zdGF0ZUdldChrZXkpO1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygb3JpID09PSAndW5kZWZpbmVkJyB8fCBvcmkgPT09IG51bGwpIG9yaSA9IHt9O1xyXG5cdFx0XHRcdFBsdWdpbi5zdGF0ZUtlZXAoa2V5LCAkLmV4dGVuZCh7fSwgb3JpLCB2YWx1ZSkpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFJlbW92ZSBzdGF0ZSBpdGVtXHJcblx0XHRcdCAqIEBwYXJhbSBrZXlcclxuXHRcdFx0ICovXHJcblx0XHRcdHN0YXRlUmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcclxuXHRcdFx0XHRrZXkgPSBQbHVnaW4uZ2V0VGFibGVQcmVmaXgoa2V5KTtcclxuXHRcdFx0XHRpZiAobG9jYWxTdG9yYWdlKSB7XHJcblx0XHRcdFx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgdG90YWwgY29sdW1ucy5cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldFRvdGFsQ29sdW1uczogZnVuY3Rpb24odGFibGVQYXJ0KSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiB0YWJsZVBhcnQgPT09ICd1bmRlZmluZWQnKSB0YWJsZVBhcnQgPSBkYXRhdGFibGUudGFibGVCb2R5O1xyXG5cdFx0XHRcdHJldHVybiAkKHRhYmxlUGFydCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLmZpcnN0KCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKS5sZW5ndGg7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHRhYmxlIHJvdy4gVXNlZnVsIHRvIGdldCByb3cgd2hlbiBjdXJyZW50IHRhYmxlIGlzIGluIGxvY2tcclxuXHRcdFx0ICogbW9kZS4gQ2FuIGJlIHVzZWQgZm9yIGJvdGggbG9jayBhbmQgbm9ybWFsIHRhYmxlIG1vZGUuIEJ5XHJcblx0XHRcdCAqIGRlZmF1bHQsIHJldHVybmluZyByZXN1bHQgd2lsbCBiZSBpbiBhIGxpc3Qgb2YgPHRkPi5cclxuXHRcdFx0ICogQHBhcmFtIHRhYmxlUGFydFxyXG5cdFx0XHQgKiBAcGFyYW0gcm93IDEtYmFzZWQgaW5kZXhcclxuXHRcdFx0ICogQHBhcmFtIHRkT25seSBPcHRpb25hbC4gRGVmYXVsdCB0cnVlXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0T25lUm93OiBmdW5jdGlvbih0YWJsZVBhcnQsIHJvdywgdGRPbmx5KSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiB0ZE9ubHkgPT09ICd1bmRlZmluZWQnKSB0ZE9ubHkgPSB0cnVlO1xyXG5cdFx0XHRcdC8vIGdldCBsaXN0IG9mIDx0cj5cclxuXHRcdFx0XHR2YXIgcmVzdWx0ID0gJCh0YWJsZVBhcnQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3c6bm90KC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3ctZGV0YWlsKTpudGgtY2hpbGQoJyArIHJvdyArICcpJyk7XHJcblx0XHRcdFx0aWYgKHRkT25seSkge1xyXG5cdFx0XHRcdFx0Ly8gZ2V0IGxpc3Qgb2YgPHRkPiBvciA8dGg+XHJcblx0XHRcdFx0XHRyZXN1bHQgPSByZXN1bHQuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTb3J0IHRhYmxlIHJvdyBhdCBIVE1MIGxldmVsIGJ5IGNvbHVtbiBpbmRleC5cclxuXHRcdFx0ICogdG9kbzsgTm90IGluIHVzZS5cclxuXHRcdFx0ICogQHBhcmFtIGhlYWRlciBIZWFkZXIgc29ydCBjbGlja2VkXHJcblx0XHRcdCAqIEBwYXJhbSBzb3J0IGFzY3xkZXNjLiBPcHRpb25hbC4gRGVmYXVsdCBhc2NcclxuXHRcdFx0ICogQHBhcmFtIGludCBCb29sZWFuLiBPcHRpb25hbC4gQ29tcGFyaXNvbiB2YWx1ZSBwYXJzZSB0byBpbnRlZ2VyLlxyXG5cdFx0XHQgKiAgICAgRGVmYXVsdCBmYWxzZVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c29ydENvbHVtbjogZnVuY3Rpb24oaGVhZGVyLCBzb3J0LCBpbnQpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIHNvcnQgPT09ICd1bmRlZmluZWQnKSBzb3J0ID0gJ2FzYyc7IC8vIGRlc2NcclxuXHRcdFx0XHRpZiAodHlwZW9mIGludCA9PT0gJ3VuZGVmaW5lZCcpIGludCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHR2YXIgY29sdW1uID0gJChoZWFkZXIpLmluZGV4KCk7XHJcblx0XHRcdFx0dmFyIHJvd3MgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKTtcclxuXHRcdFx0XHR2YXIgaEluZGV4ID0gJChoZWFkZXIpLmNsb3Nlc3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1sb2NrJykuaW5kZXgoKTtcclxuXHRcdFx0XHRpZiAoaEluZGV4ICE9PSAtMSkge1xyXG5cdFx0XHRcdFx0cm93cyA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2s6bnRoLWNoaWxkKCcgKyAoaEluZGV4ICsgMSkgKyAnKScpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciBjb250YWluZXIgPSAkKHJvd3MpLnBhcmVudCgpO1xyXG5cdFx0XHRcdCQocm93cykuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcblx0XHRcdFx0XHR2YXIgdGRhID0gJChhKS5maW5kKCd0ZDpudGgtY2hpbGQoJyArIGNvbHVtbiArICcpJykudGV4dCgpO1xyXG5cdFx0XHRcdFx0dmFyIHRkYiA9ICQoYikuZmluZCgndGQ6bnRoLWNoaWxkKCcgKyBjb2x1bW4gKyAnKScpLnRleHQoKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoaW50KSB7XHJcblx0XHRcdFx0XHRcdC8vIHVzZWZ1bCBmb3IgaW50ZWdlciB0eXBlIHNvcnRpbmdcclxuXHRcdFx0XHRcdFx0dGRhID0gcGFyc2VJbnQodGRhKTtcclxuXHRcdFx0XHRcdFx0dGRiID0gcGFyc2VJbnQodGRiKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoc29ydCA9PT0gJ2FzYycpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRkYSA+IHRkYiA/IDEgOiB0ZGEgPCB0ZGIgPyAtMSA6IDA7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGRhIDwgdGRiID8gMSA6IHRkYSA+IHRkYiA/IC0xIDogMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KS5hcHBlbmRUbyhjb250YWluZXIpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFBlcmZvcm0gc29ydCByZW1vdGUgYW5kIGxvY2FsXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzb3J0aW5nOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgc29ydE9iaiA9IHtcclxuXHRcdFx0XHRcdGluaXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5zb3J0YWJsZSkge1xyXG5cdFx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuXHJcblx0XHRcdFx0XHRcdFx0XHRmaW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbDpub3QoLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGwtY2hlY2spJykuXHJcblx0XHRcdFx0XHRcdFx0XHRhZGRDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWNlbGwtc29ydCcpLlxyXG5cdFx0XHRcdFx0XHRcdFx0b2ZmKCdjbGljaycpLlxyXG5cdFx0XHRcdFx0XHRcdFx0b24oJ2NsaWNrJywgc29ydE9iai5zb3J0Q2xpY2spO1xyXG5cdFx0XHRcdFx0XHRcdC8vIGZpcnN0IGluaXRcclxuXHRcdFx0XHRcdFx0XHRzb3J0T2JqLnNldEljb24oKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHNldEljb246IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgbWV0YSA9IFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oJ3NvcnQnKTtcclxuXHRcdFx0XHRcdFx0aWYgKCQuaXNFbXB0eU9iamVjdChtZXRhKSkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGNvbHVtbiA9IFBsdWdpbi5nZXRDb2x1bW5CeUZpZWxkKG1ldGEuZmllbGQpO1xyXG5cdFx0XHRcdFx0XHQvLyBzb3J0IGlzIGRpc2FibGVkIGZvciB0aGlzIGNvbHVtblxyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbiA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uc29ydGFibGUgIT09ICd1bmRlZmluZWQnICYmIGNvbHVtbi5zb3J0YWJsZSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uc2VsZWN0b3IgIT09ICd1bmRlZmluZWQnICYmIGNvbHVtbi5zZWxlY3RvciA9PT0gdHJ1ZSkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gc29ydCBpY29uIGJlc2lkZSBjb2x1bW4gaGVhZGVyXHJcblx0XHRcdFx0XHRcdHZhciB0ZCA9ICQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGxbZGF0YS1maWVsZD1cIicgKyBtZXRhLmZpZWxkICsgJ1wiXScpLmF0dHIoJ2RhdGEtc29ydCcsIG1ldGEuc29ydCk7XHJcblx0XHRcdFx0XHRcdHZhciBzb3J0aW5nID0gJCh0ZCkuZmluZCgnc3BhbicpO1xyXG5cdFx0XHRcdFx0XHR2YXIgaWNvbiA9ICQoc29ydGluZykuZmluZCgnaScpO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGljb25zID0gUGx1Z2luLmdldE9wdGlvbignbGF5b3V0Lmljb25zLnNvcnQnKTtcclxuXHRcdFx0XHRcdFx0Ly8gdXBkYXRlIHNvcnQgaWNvbjsgZGVzYyAmIGFzY1xyXG5cdFx0XHRcdFx0XHRpZiAoJChpY29uKS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0JChpY29uKS5yZW1vdmVBdHRyKCdjbGFzcycpLmFkZENsYXNzKGljb25zW21ldGEuc29ydF0pO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdCQoc29ydGluZykuYXBwZW5kKCQoJzxpLz4nKS5hZGRDbGFzcyhpY29uc1ttZXRhLnNvcnRdKSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIHNldCBzb3J0ZWQgY2xhc3MgdG8gaGVhZGVyIG9uIGluaXRcclxuXHRcdFx0XHRcdFx0JCh0ZCkuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1jZWxsLXNvcnRlZCcpO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHNvcnRDbGljazogZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0XHR2YXIgbWV0YSA9IFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oJ3NvcnQnKTtcclxuXHRcdFx0XHRcdFx0dmFyIGZpZWxkID0gJCh0aGlzKS5kYXRhKCdmaWVsZCcpO1xyXG5cdFx0XHRcdFx0XHR2YXIgY29sdW1uID0gUGx1Z2luLmdldENvbHVtbkJ5RmllbGQoZmllbGQpO1xyXG5cdFx0XHRcdFx0XHQvLyBzb3J0IGlzIGRpc2FibGVkIGZvciB0aGlzIGNvbHVtblxyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbiA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uc29ydGFibGUgIT09ICd1bmRlZmluZWQnICYmIGNvbHVtbi5zb3J0YWJsZSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uc2VsZWN0b3IgIT09ICd1bmRlZmluZWQnICYmIGNvbHVtbi5zZWxlY3RvciA9PT0gdHJ1ZSkgcmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gc2V0IHNvcnRlZCBjbGFzcyB0byBoZWFkZXJcclxuXHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCd0aCcpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtY2VsbC1zb3J0ZWQnKTtcclxuXHRcdFx0XHRcdFx0dXRpbC5hZGRDbGFzcyh0aGlzLCBwZnggKyAnZGF0YXRhYmxlLWNlbGwtc29ydGVkJyk7XHJcblxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsID4gc3BhbiA+IGknKS5yZW1vdmUoKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLnNvcnRhYmxlKSB7XHJcblx0XHRcdFx0XHRcdFx0UGx1Z2luLnNwaW5uZXJDYWxsYmFjayh0cnVlKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIHNvcnQgPSAnZGVzYyc7XHJcblx0XHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5nZXRPYmplY3QoJ2ZpZWxkJywgbWV0YSkgPT09IGZpZWxkKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRzb3J0ID0gUGx1Z2luLmdldE9iamVjdCgnc29ydCcsIG1ldGEpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0Ly8gdG9nZ2xlIHNvcnRcclxuXHRcdFx0XHRcdFx0XHRzb3J0ID0gdHlwZW9mIHNvcnQgPT09ICd1bmRlZmluZWQnIHx8IHNvcnQgPT09ICdkZXNjJ1xyXG5cdFx0XHRcdFx0XHRcdFx0PyAnYXNjJ1xyXG5cdFx0XHRcdFx0XHRcdFx0OiAnZGVzYyc7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIHVwZGF0ZSBmaWVsZCBhbmQgc29ydCBwYXJhbXNcclxuXHRcdFx0XHRcdFx0XHRtZXRhID0ge2ZpZWxkOiBmaWVsZCwgc29ydDogc29ydH07XHJcblx0XHRcdFx0XHRcdFx0UGx1Z2luLnNldERhdGFTb3VyY2VQYXJhbSgnc29ydCcsIG1ldGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRzb3J0T2JqLnNldEljb24oKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFBsdWdpbi5kYXRhUmVuZGVyKCdzb3J0Jyk7XHJcblx0XHRcdFx0XHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLXNvcnQnLCBtZXRhKTtcclxuXHRcdFx0XHRcdFx0XHR9LCAzMDApO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0c29ydE9iai5pbml0KCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogVXBkYXRlIEpTT04gZGF0YSBsaXN0IGxpbmtlZCB3aXRoIHNvcnQsIGZpbHRlciBhbmQgcGFnaW5hdGlvbi5cclxuXHRcdFx0ICogQ2FsbCB0aGlzIG1ldGhvZCwgYmVmb3JlIHVzaW5nIGRhdGFTZXQgdmFyaWFibGUuXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfG51bGx9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRsb2NhbERhdGFVcGRhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBwYXJhbXMgPSBQbHVnaW4uZ2V0RGF0YVNvdXJjZVBhcmFtKCk7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhdGFibGUub3JpZ2luYWxEYXRhU2V0ID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLm9yaWdpbmFsRGF0YVNldCA9IGRhdGF0YWJsZS5kYXRhU2V0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyIGZpZWxkID0gUGx1Z2luLmdldE9iamVjdCgnc29ydC5maWVsZCcsIHBhcmFtcyk7XHJcblx0XHRcdFx0dmFyIHNvcnQgPSBQbHVnaW4uZ2V0T2JqZWN0KCdzb3J0LnNvcnQnLCBwYXJhbXMpO1xyXG5cdFx0XHRcdHZhciBjb2x1bW4gPSBQbHVnaW4uZ2V0Q29sdW1uQnlGaWVsZChmaWVsZCk7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4gIT09ICd1bmRlZmluZWQnICYmIFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEuc2VydmVyU29ydGluZycpICE9PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5zb3J0Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSBjb2x1bW4uc29ydENhbGxiYWNrKGRhdGF0YWJsZS5vcmlnaW5hbERhdGFTZXQsIHNvcnQsIGNvbHVtbik7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IFBsdWdpbi5zb3J0Q2FsbGJhY2soZGF0YXRhYmxlLm9yaWdpbmFsRGF0YVNldCwgc29ydCwgY29sdW1uKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLmRhdGFTZXQgPSBkYXRhdGFibGUub3JpZ2luYWxEYXRhU2V0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gaWYgc2VydmVyIGZpbHRlciBlbmFibGUsIGRvbid0IHBhc3MgbG9jYWwgZmlsdGVyXHJcblx0XHRcdFx0aWYgKHR5cGVvZiBwYXJhbXMucXVlcnkgPT09ICdvYmplY3QnICYmICFQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnNlcnZlckZpbHRlcmluZycpKSB7XHJcblx0XHRcdFx0XHRwYXJhbXMucXVlcnkgPSBwYXJhbXMucXVlcnkgfHwge307XHJcblxyXG5cdFx0XHRcdFx0dmFyIG5lc3RlZFNlYXJjaCA9IGZ1bmN0aW9uKG9iaikge1xyXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBmaWVsZCBpbiBvYmopIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2Ygb2JqW2ZpZWxkXSA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChvYmpbZmllbGRdLnRvTG93ZXJDYXNlKCkgPT0gc2VhcmNoIHx8IG9ialtmaWVsZF0udG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaCkgIT09IC0xKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIG9ialtmaWVsZF0gPT09ICdudW1iZXInKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAob2JqW2ZpZWxkXSA9PT0gc2VhcmNoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIG9ialtmaWVsZF0gPT09ICdvYmplY3QnKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAobmVzdGVkU2VhcmNoKG9ialtmaWVsZF0pKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdHZhciBzZWFyY2ggPSAkKFBsdWdpbi5nZXRPcHRpb24oJ3NlYXJjaC5pbnB1dCcpKS52YWwoKTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2Ygc2VhcmNoICE9PSAndW5kZWZpbmVkJyAmJiBzZWFyY2ggIT09ICcnKSB7XHJcblx0XHRcdFx0XHRcdHNlYXJjaCA9IHNlYXJjaC50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9ICQuZ3JlcChkYXRhdGFibGUuZGF0YVNldCwgbmVzdGVkU2VhcmNoKTtcclxuXHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIGdlbmVyYWxTZWFyY2ggYXMgd2UgZG9uJ3QgbmVlZCB0aGlzIGZvciBuZXh0IGNvbHVtbnMgZmlsdGVyXHJcblx0XHRcdFx0XHRcdGRlbGV0ZSBwYXJhbXMucXVlcnlbUGx1Z2luLmdldEdlbmVyYWxTZWFyY2hLZXkoKV07XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIGVtcHR5IGVsZW1lbnQgZnJvbSBhcnJheVxyXG5cdFx0XHRcdFx0JC5lYWNoKHBhcmFtcy5xdWVyeSwgZnVuY3Rpb24oaywgdikge1xyXG5cdFx0XHRcdFx0XHRpZiAodiA9PT0gJycpIHtcclxuXHRcdFx0XHRcdFx0XHRkZWxldGUgcGFyYW1zLnF1ZXJ5W2tdO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHQvLyBmaWx0ZXIgYXJyYXkgYnkgcXVlcnlcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5kYXRhU2V0ID0gUGx1Z2luLmZpbHRlckFycmF5KGRhdGF0YWJsZS5kYXRhU2V0LCBwYXJhbXMucXVlcnkpO1xyXG5cclxuXHRcdFx0XHRcdC8vIHJlc2V0IGFycmF5IGluZGV4XHJcblx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IGRhdGF0YWJsZS5kYXRhU2V0LmZpbHRlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGUuZGF0YVNldDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBVdGlsaXR5IGhlbHBlciB0byBmaWx0ZXIgYXJyYXkgYnkgb2JqZWN0IHBhaXIgb2Yge2tleTp2YWx1ZX1cclxuXHRcdFx0ICogQHBhcmFtIGxpc3RcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3NcclxuXHRcdFx0ICogQHBhcmFtIG9wZXJhdG9yXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZmlsdGVyQXJyYXk6IGZ1bmN0aW9uKGxpc3QsIGFyZ3MsIG9wZXJhdG9yKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBsaXN0ICE9PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIFtdO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKHR5cGVvZiBvcGVyYXRvciA9PT0gJ3VuZGVmaW5lZCcpIG9wZXJhdG9yID0gJ0FORCc7XHJcblxyXG5cdFx0XHRcdGlmICh0eXBlb2YgYXJncyAhPT0gJ29iamVjdCcpIHtcclxuXHRcdFx0XHRcdHJldHVybiBsaXN0O1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0b3BlcmF0b3IgPSBvcGVyYXRvci50b1VwcGVyQ2FzZSgpO1xyXG5cclxuXHRcdFx0XHRpZiAoJC5pbkFycmF5KG9wZXJhdG9yLCBbJ0FORCcsICdPUicsICdOT1QnXSkgPT09IC0xKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gW107XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgY291bnQgPSBPYmplY3Qua2V5cyhhcmdzKS5sZW5ndGg7XHJcblx0XHRcdFx0dmFyIGZpbHRlcmVkID0gW107XHJcblxyXG5cdFx0XHRcdCQuZWFjaChsaXN0LCBmdW5jdGlvbihrZXksIG9iaikge1xyXG5cdFx0XHRcdFx0dmFyIHRvX21hdGNoID0gb2JqO1xyXG5cclxuXHRcdFx0XHRcdHZhciBtYXRjaGVkID0gMDtcclxuXHRcdFx0XHRcdCQuZWFjaChhcmdzLCBmdW5jdGlvbihtX2tleSwgbV92YWx1ZSkge1xyXG5cdFx0XHRcdFx0XHRtX3ZhbHVlID0gbV92YWx1ZSBpbnN0YW5jZW9mIEFycmF5ID8gbV92YWx1ZSA6IFttX3ZhbHVlXTtcclxuXHRcdFx0XHRcdFx0dmFyIG1hdGNoX3Byb3BlcnR5ID0gUGx1Z2luLmdldE9iamVjdChtX2tleSwgdG9fbWF0Y2gpO1xyXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIG1hdGNoX3Byb3BlcnR5ICE9PSAndW5kZWZpbmVkJyAmJiBtYXRjaF9wcm9wZXJ0eSkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBsaHMgPSBtYXRjaF9wcm9wZXJ0eS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRcdFx0XHRcdFx0bV92YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoaXRlbS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgPT0gbGhzIHx8IGxocy5pbmRleE9mKGl0ZW0udG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0bWF0Y2hlZCsrO1xyXG5cdFx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRpZiAoKCdBTkQnID09IG9wZXJhdG9yICYmIG1hdGNoZWQgPT0gY291bnQpIHx8XHJcblx0XHRcdFx0XHRcdCgnT1InID09IG9wZXJhdG9yICYmIG1hdGNoZWQgPiAwKSB8fFxyXG5cdFx0XHRcdFx0XHQoJ05PVCcgPT0gb3BlcmF0b3IgJiYgMCA9PSBtYXRjaGVkKSkge1xyXG5cdFx0XHRcdFx0XHRmaWx0ZXJlZFtrZXldID0gb2JqO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRsaXN0ID0gZmlsdGVyZWQ7XHJcblxyXG5cdFx0XHRcdHJldHVybiBsaXN0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFJlc2V0IGxvY2sgY29sdW1uIHNjcm9sbCB0byAwIHdoZW4gcmVzaXplXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRyZXNldFNjcm9sbDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmRldGFpbCA9PT0gJ3VuZGVmaW5lZCcgJiYgUGx1Z2luLmdldERlcHRoKCkgPT09IDEpIHtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93JykuY3NzKCdsZWZ0JywgMCk7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2snKS5jc3MoJ3RvcCcsIDApO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5zY3JvbGxUb3AoMCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCBjb2x1bW4gb3B0aW9ucyBieSBmaWVsZFxyXG5cdFx0XHQgKiBAcGFyYW0gZmllbGRcclxuXHRcdFx0ICogQHJldHVybnMge2Jvb2xlYW59XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRDb2x1bW5CeUZpZWxkOiBmdW5jdGlvbihmaWVsZCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgZmllbGQgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XHJcblx0XHRcdFx0dmFyIHJlc3VsdDtcclxuXHRcdFx0XHQkLmVhY2gob3B0aW9ucy5jb2x1bW5zLCBmdW5jdGlvbihpLCBjb2x1bW4pIHtcclxuXHRcdFx0XHRcdGlmIChmaWVsZCA9PT0gY29sdW1uLmZpZWxkKSB7XHJcblx0XHRcdFx0XHRcdHJlc3VsdCA9IGNvbHVtbjtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IGRlZmF1bHQgc29ydCBjb2x1bW5cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldERlZmF1bHRTb3J0Q29sdW1uOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgcmVzdWx0O1xyXG5cdFx0XHRcdCQuZWFjaChvcHRpb25zLmNvbHVtbnMsIGZ1bmN0aW9uKGksIGNvbHVtbikge1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW4uc29ydGFibGUgIT09ICd1bmRlZmluZWQnXHJcblx0XHRcdFx0XHRcdCYmICQuaW5BcnJheShjb2x1bW4uc29ydGFibGUsIFsnYXNjJywgJ2Rlc2MnXSkgIT09IC0xKSB7XHJcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHtzb3J0OiBjb2x1bW4uc29ydGFibGUsIGZpZWxkOiBjb2x1bW4uZmllbGR9O1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBIZWxwZXIgdG8gZ2V0IGVsZW1lbnQgZGltZW5zaW9ucywgd2hlbiB0aGUgZWxlbWVudCBpcyBoaWRkZW5cclxuXHRcdFx0ICogQHBhcmFtIGVsZW1lbnRcclxuXHRcdFx0ICogQHBhcmFtIGluY2x1ZGVNYXJnaW5cclxuXHRcdFx0ICogQHJldHVybnMge3t3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgaW5uZXJXaWR0aDogbnVtYmVyLFxyXG5cdFx0XHQgKiAgICAgaW5uZXJIZWlnaHQ6IG51bWJlciwgb3V0ZXJXaWR0aDogbnVtYmVyLCBvdXRlckhlaWdodDpcclxuXHRcdFx0ICogICAgIG51bWJlcn19XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRIaWRkZW5EaW1lbnNpb25zOiBmdW5jdGlvbihlbGVtZW50LCBpbmNsdWRlTWFyZ2luKSB7XHJcblx0XHRcdFx0dmFyIHByb3BzID0ge1xyXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuXHRcdFx0XHRcdFx0dmlzaWJpbGl0eTogJ2hpZGRlbicsXHJcblx0XHRcdFx0XHRcdGRpc3BsYXk6ICdibG9jaycsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0ZGltID0ge1xyXG5cdFx0XHRcdFx0XHR3aWR0aDogMCxcclxuXHRcdFx0XHRcdFx0aGVpZ2h0OiAwLFxyXG5cdFx0XHRcdFx0XHRpbm5lcldpZHRoOiAwLFxyXG5cdFx0XHRcdFx0XHRpbm5lckhlaWdodDogMCxcclxuXHRcdFx0XHRcdFx0b3V0ZXJXaWR0aDogMCxcclxuXHRcdFx0XHRcdFx0b3V0ZXJIZWlnaHQ6IDAsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0aGlkZGVuUGFyZW50cyA9ICQoZWxlbWVudCkucGFyZW50cygpLmFkZEJhY2soKS5ub3QoJzp2aXNpYmxlJyk7XHJcblx0XHRcdFx0aW5jbHVkZU1hcmdpbiA9ICh0eXBlb2YgaW5jbHVkZU1hcmdpbiA9PT0gJ2Jvb2xlYW4nKVxyXG5cdFx0XHRcdFx0PyBpbmNsdWRlTWFyZ2luXHJcblx0XHRcdFx0XHQ6IGZhbHNlO1xyXG5cclxuXHRcdFx0XHR2YXIgb2xkUHJvcHMgPSBbXTtcclxuXHRcdFx0XHRoaWRkZW5QYXJlbnRzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHR2YXIgb2xkID0ge307XHJcblxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBwcm9wcykge1xyXG5cdFx0XHRcdFx0XHRvbGRbbmFtZV0gPSB0aGlzLnN0eWxlW25hbWVdO1xyXG5cdFx0XHRcdFx0XHR0aGlzLnN0eWxlW25hbWVdID0gcHJvcHNbbmFtZV07XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0b2xkUHJvcHMucHVzaChvbGQpO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRkaW0ud2lkdGggPSAkKGVsZW1lbnQpLndpZHRoKCk7XHJcblx0XHRcdFx0ZGltLm91dGVyV2lkdGggPSAkKGVsZW1lbnQpLm91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbik7XHJcblx0XHRcdFx0ZGltLmlubmVyV2lkdGggPSAkKGVsZW1lbnQpLmlubmVyV2lkdGgoKTtcclxuXHRcdFx0XHRkaW0uaGVpZ2h0ID0gJChlbGVtZW50KS5oZWlnaHQoKTtcclxuXHRcdFx0XHRkaW0uaW5uZXJIZWlnaHQgPSAkKGVsZW1lbnQpLmlubmVySGVpZ2h0KCk7XHJcblx0XHRcdFx0ZGltLm91dGVySGVpZ2h0ID0gJChlbGVtZW50KS5vdXRlckhlaWdodChpbmNsdWRlTWFyZ2luKTtcclxuXHJcblx0XHRcdFx0aGlkZGVuUGFyZW50cy5lYWNoKGZ1bmN0aW9uKGkpIHtcclxuXHRcdFx0XHRcdHZhciBvbGQgPSBvbGRQcm9wc1tpXTtcclxuXHRcdFx0XHRcdGZvciAodmFyIG5hbWUgaW4gcHJvcHMpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5zdHlsZVtuYW1lXSA9IG9sZFtuYW1lXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGRpbTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGdldEdlbmVyYWxTZWFyY2hLZXk6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHZhciBzZWFyY2hJbnB1dCA9ICQoUGx1Z2luLmdldE9wdGlvbignc2VhcmNoLmlucHV0JykpO1xyXG5cdFx0XHRcdHJldHVybiBQbHVnaW4uZ2V0T3B0aW9uKCdzZWFyY2gua2V5JykgfHwgJChzZWFyY2hJbnB1dCkucHJvcCgnbmFtZScpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCB2YWx1ZSBieSBkb3Qgbm90YXRpb24gcGF0aCBzdHJpbmcgYW5kIHRvIHByZXZlbnQgdW5kZWZpbmVkXHJcblx0XHRcdCAqIGVycm9yc1xyXG5cdFx0XHQgKiBAcGFyYW0gcGF0aCBTdHJpbmcgRG90IG5vdGF0aW9uIHBhdGggaW4gc3RyaW5nXHJcblx0XHRcdCAqIEBwYXJhbSBvYmplY3QgT2JqZWN0IHRvIGl0ZXJhdGVcclxuXHRcdFx0ICogQHJldHVybnMgeyp9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRPYmplY3Q6IGZ1bmN0aW9uKHBhdGgsIG9iamVjdCkge1xyXG5cdFx0XHRcdHJldHVybiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKGZ1bmN0aW9uKG9iaiwgaSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqW2ldICE9PSAndW5kZWZpbmVkJyA/IG9ialtpXSA6IG51bGw7XHJcblx0XHRcdFx0fSwgb2JqZWN0KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBFeHRlbmQgb2JqZWN0XHJcblx0XHRcdCAqIEBwYXJhbSBvYmpcclxuXHRcdFx0ICogQHBhcmFtIHBhdGhcclxuXHRcdFx0ICogQHBhcmFtIHZhbHVlXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZXh0ZW5kT2JqOiBmdW5jdGlvbihvYmosIHBhdGgsIHZhbHVlKSB7XHJcblx0XHRcdFx0dmFyIGxldmVscyA9IHBhdGguc3BsaXQoJy4nKSxcclxuXHRcdFx0XHRcdGkgPSAwO1xyXG5cclxuXHRcdFx0XHRmdW5jdGlvbiBjcmVhdGVMZXZlbChjaGlsZCkge1xyXG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBsZXZlbHNbaSsrXTtcclxuXHRcdFx0XHRcdGlmICh0eXBlb2YgY2hpbGRbbmFtZV0gIT09ICd1bmRlZmluZWQnICYmIGNoaWxkW25hbWVdICE9PSBudWxsKSB7XHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgY2hpbGRbbmFtZV0gIT09ICdvYmplY3QnICYmXHJcblx0XHRcdFx0XHRcdFx0dHlwZW9mIGNoaWxkW25hbWVdICE9PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2hpbGRbbmFtZV0gPSB7fTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Y2hpbGRbbmFtZV0gPSB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChpID09PSBsZXZlbHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdGNoaWxkW25hbWVdID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRjcmVhdGVMZXZlbChjaGlsZFtuYW1lXSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjcmVhdGVMZXZlbChvYmopO1xyXG5cdFx0XHRcdHJldHVybiBvYmo7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRyb3dFdmVuT2RkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQvLyByb3cgZXZlbiBjbGFzc1xyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpLnJlbW92ZUNsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LWV2ZW4nKTtcclxuXHRcdFx0XHRpZiAoJChkYXRhdGFibGUud3JhcCkuaGFzQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1zdWJ0YWJsZScpKSB7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3c6bm90KC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3ctZGV0YWlsKTpldmVuJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctZXZlbicpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3c6bnRoLWNoaWxkKGV2ZW4pJykuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1yb3ctZXZlbicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKioqKioqKioqKioqKioqKioqKlxyXG5cdFx0XHQgKiogUFVCTElDIEFQSSBNRVRIT0RTXHJcblx0XHRcdCAqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcblx0XHRcdC8vIGRlbGF5IHRpbWVyXHJcblx0XHRcdHRpbWVyOiAwLFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFJlZHJhdyBkYXRhdGFibGUgYnkgcmVjYWxjdWxhdGluZyBpdHMgRE9NIGVsZW1lbnRzLCBldGMuXHJcblx0XHRcdCAqIEByZXR1cm5zIHtqUXVlcnl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRyZWRyYXc6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFBsdWdpbi5hZGp1c3RDZWxsc1dpZHRoLmNhbGwoKTtcclxuXHRcdFx0XHRpZiAoUGx1Z2luLmlzTG9ja2VkKCkpIHtcclxuXHRcdFx0XHRcdC8vIGZpeCBoaWRpbmcgY2VsbCB3aWR0aCBpc3N1ZVxyXG5cdFx0XHRcdFx0UGx1Z2luLnNjcm9sbGJhcigpO1xyXG5cdFx0XHRcdFx0UGx1Z2luLnJlc2V0U2Nyb2xsKCk7XHJcblx0XHRcdFx0XHRQbHVnaW4uYWRqdXN0Q2VsbHNIZWlnaHQuY2FsbCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRQbHVnaW4uYWRqdXN0TG9ja0NvbnRhaW5lci5jYWxsKCk7XHJcblx0XHRcdFx0UGx1Z2luLmluaXRIZWlnaHQuY2FsbCgpO1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2hvcnRjb2RlIHRvIHJlbG9hZFxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0bG9hZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0UGx1Z2luLnJlbG9hZCgpO1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRGF0YXNvdXJjZSByZWxvYWRcclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdHJlbG9hZDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0dmFyIGRlbGF5ID0gKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrLCBtcykge1xyXG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoUGx1Z2luLnRpbWVyKTtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLnRpbWVyID0gc2V0VGltZW91dChjYWxsYmFjaywgbXMpO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9KSgpO1xyXG5cdFx0XHRcdGRlbGF5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0Ly8gbG9jYWwgb25seS4gcmVtb3RlIHBhZ2luYXRpb24gd2lsbCBza2lwIHRoaXMgYmxvY2tcclxuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5kYXRhLnNlcnZlckZpbHRlcmluZykge1xyXG5cdFx0XHRcdFx0XHRQbHVnaW4ubG9jYWxEYXRhVXBkYXRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRQbHVnaW4uZGF0YVJlbmRlcigpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGZ4ICsgJ2RhdGF0YWJsZS1vbi1yZWxvYWRlZCcpO1xyXG5cdFx0XHRcdH0sIFBsdWdpbi5nZXRPcHRpb24oJ3NlYXJjaC5kZWxheScpKTtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCByZWNvcmQgYnkgcmVjb3JkIElEXHJcblx0XHRcdCAqIEBwYXJhbSBpZFxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0UmVjb3JkOiBmdW5jdGlvbihpZCkge1xyXG5cdFx0XHRcdGlmICh0eXBlb2YgZGF0YXRhYmxlLnRhYmxlQm9keSA9PT0gJ3VuZGVmaW5lZCcpIGRhdGF0YWJsZS50YWJsZUJvZHkgPSAkKGRhdGF0YWJsZS50YWJsZSkuY2hpbGRyZW4oJ3Rib2R5Jyk7XHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbDpmaXJzdC1jaGlsZCcpLmVhY2goZnVuY3Rpb24oaSwgY2VsbCkge1xyXG5cdFx0XHRcdFx0aWYgKGlkID09ICQoY2VsbCkudGV4dCgpKSB7XHJcblx0XHRcdFx0XHRcdHZhciByb3dOdW1iZXIgPSAkKGNlbGwpLmNsb3Nlc3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3cnKS5pbmRleCgpICsgMTtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLkFQSS5yZWNvcmQgPSBkYXRhdGFibGUuQVBJLnZhbHVlID0gUGx1Z2luLmdldE9uZVJvdyhkYXRhdGFibGUudGFibGVCb2R5LCByb3dOdW1iZXIpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQGRlcHJlY2F0ZWQgaW4gdjUuMC42XHJcblx0XHRcdCAqIEdldCBjb2x1bW4gb2YgY3VycmVudCByZWNvcmQgSURcclxuXHRcdFx0ICogQHBhcmFtIGNvbHVtbk5hbWVcclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldENvbHVtbjogZnVuY3Rpb24oY29sdW1uTmFtZSkge1xyXG5cdFx0XHRcdFBsdWdpbi5zZXRTZWxlY3RlZFJlY29yZHMoKTtcclxuXHRcdFx0XHRkYXRhdGFibGUuQVBJLnZhbHVlID0gJChkYXRhdGFibGUuQVBJLnJlY29yZCkuZmluZCgnW2RhdGEtZmllbGQ9XCInICsgY29sdW1uTmFtZSArICdcIl0nKTtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIERlc3Ryb3kgZGF0YXRhYmxlIHRvIG9yaWdpbmFsIERPTSBzdGF0ZSBiZWZvcmUgZGF0YXRhYmxlIHdhc1xyXG5cdFx0XHQgKiBpbml0aWFsaXplZFxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0JChkYXRhdGFibGUpLnBhcmVudCgpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlcicpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdHZhciBpbml0aWFsRGF0YXRhYmxlID0gJChkYXRhdGFibGUuaW5pdGlhbERhdGF0YWJsZSkuYWRkQ2xhc3MocGZ4ICsgJ2RhdGF0YWJsZS1kZXN0cm95ZWQnKS5zaG93KCk7XHJcblx0XHRcdFx0JChkYXRhdGFibGUpLnJlcGxhY2VXaXRoKGluaXRpYWxEYXRhdGFibGUpO1xyXG5cdFx0XHRcdGRhdGF0YWJsZSA9IGluaXRpYWxEYXRhdGFibGU7XHJcblx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGZ4ICsgJ2RhdGF0YWJsZS1vbi1kZXN0cm95Jyk7XHJcblx0XHRcdFx0UGx1Z2luLmlzSW5pdCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHQvLyBjbGVhbiB1cCB2YXJpYWJsZXNcclxuXHRcdFx0XHRpbml0aWFsRGF0YXRhYmxlID0gbnVsbDtcclxuXHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IG51bGw7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLm9yaWdpbmFsRGF0YVNldCA9IG51bGw7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlSGVhZCA9IG51bGw7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlQm9keSA9IG51bGw7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLnRhYmxlID0gbnVsbDtcclxuXHRcdFx0XHRkYXRhdGFibGUud3JhcCA9IG51bGw7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLkFQSSA9IHtcclxuXHRcdFx0XHRcdHJlY29yZDogbnVsbCxcclxuXHRcdFx0XHRcdHZhbHVlOiBudWxsLFxyXG5cdFx0XHRcdFx0cGFyYW1zOiBudWxsLFxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFBsdWdpbi5hamF4UGFyYW1zID0ge307XHJcblx0XHRcdFx0UGx1Z2luLnBhZ2luZ09iamVjdCA9IHt9O1xyXG5cdFx0XHRcdFBsdWdpbi5ub2RlVHIgPSBbXTtcclxuXHRcdFx0XHRQbHVnaW4ubm9kZVRkID0gW107XHJcblx0XHRcdFx0UGx1Z2luLm5vZGVDb2xzID0gW107XHJcblx0XHRcdFx0UGx1Z2luLnJlY2VudE5vZGUgPSBbXTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGluaXRpYWxEYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU29ydCBieSBjb2x1bW4gZmllbGRcclxuXHRcdFx0ICogQHBhcmFtIGZpZWxkXHJcblx0XHRcdCAqIEBwYXJhbSBzb3J0XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzb3J0OiBmdW5jdGlvbihmaWVsZCwgc29ydCkge1xyXG5cdFx0XHRcdC8vIHRvZ2dsZSBzb3J0XHJcblx0XHRcdFx0c29ydCA9IHR5cGVvZiBzb3J0ID09PSAndW5kZWZpbmVkJyA/ICdhc2MnIDogc29ydDtcclxuXHJcblx0XHRcdFx0UGx1Z2luLnNwaW5uZXJDYWxsYmFjayh0cnVlKTtcclxuXHJcblx0XHRcdFx0Ly8gdXBkYXRlIGZpZWxkIGFuZCBzb3J0IHBhcmFtc1xyXG5cdFx0XHRcdHZhciBtZXRhID0ge2ZpZWxkOiBmaWVsZCwgc29ydDogc29ydH07XHJcblx0XHRcdFx0UGx1Z2luLnNldERhdGFTb3VyY2VQYXJhbSgnc29ydCcsIG1ldGEpO1xyXG5cclxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0UGx1Z2luLmRhdGFSZW5kZXIoJ3NvcnQnKTtcclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24tc29ydCcsIG1ldGEpO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCA+IHNwYW4gPiBpJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0fSwgMzAwKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBAZGVwcmVjYXRlZCBpbiB2NS4wLjZcclxuXHRcdFx0ICogR2V0IGN1cnJlbnQgc2VsZWN0ZWQgY29sdW1uIHZhbHVlXHJcblx0XHRcdCAqIEByZXR1cm5zIHtqUXVlcnl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRWYWx1ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICQoZGF0YXRhYmxlLkFQSS52YWx1ZSkudGV4dCgpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNldCBjaGVja2JveCBhY3RpdmVcclxuXHRcdFx0ICogQHBhcmFtIGNlbGwgSlF1ZXJ5IHNlbGVjdG9yIG9yIGNoZWNrYm94IElEXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXRBY3RpdmU6IGZ1bmN0aW9uKGNlbGwpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGNlbGwgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0XHQvLyBzZXQgYnkgY2hlY2tib3ggaWRcclxuXHRcdFx0XHRcdGNlbGwgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2NoZWNrYm94LXNpbmdsZSA+IFt0eXBlPVwiY2hlY2tib3hcIl1bdmFsdWU9XCInICsgY2VsbCArICdcIl0nKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdCQoY2VsbCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cclxuXHRcdFx0XHR2YXIgaWRzID0gW107XHJcblx0XHRcdFx0JChjZWxsKS5lYWNoKGZ1bmN0aW9uKGksIHRkKSB7XHJcblx0XHRcdFx0XHQvLyBub3JtYWwgdGFibGVcclxuXHRcdFx0XHRcdHZhciByb3cgPSAkKHRkKS5jbG9zZXN0KCd0cicpLmFkZENsYXNzKHBmeCArICdkYXRhdGFibGUtcm93LWFjdGl2ZScpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBpZCA9ICQodGQpLmF0dHIoJ3ZhbHVlJyk7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGlkICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0XHRpZHMucHVzaChpZCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24tY2hlY2snLCBbaWRzXSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGNoZWNrYm94IGluYWN0aXZlXHJcblx0XHRcdCAqIEBwYXJhbSBjZWxsIEpRdWVyeSBzZWxlY3RvciBvciBjaGVja2JveCBJRFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2V0SW5hY3RpdmU6IGZ1bmN0aW9uKGNlbGwpIHtcclxuXHRcdFx0XHRpZiAodHlwZW9mIGNlbGwgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0XHQvLyBzZXQgYnkgY2hlY2tib3ggaWRcclxuXHRcdFx0XHRcdGNlbGwgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2NoZWNrYm94LXNpbmdsZSA+IFt0eXBlPVwiY2hlY2tib3hcIl1bdmFsdWU9XCInICsgY2VsbCArICdcIl0nKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdCQoY2VsbCkucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuXHJcblx0XHRcdFx0dmFyIGlkcyA9IFtdO1xyXG5cdFx0XHRcdCQoY2VsbCkuZWFjaChmdW5jdGlvbihpLCB0ZCkge1xyXG5cdFx0XHRcdFx0Ly8gbm9ybWFsIHRhYmxlXHJcblx0XHRcdFx0XHR2YXIgcm93ID0gJCh0ZCkuY2xvc2VzdCgndHInKS5yZW1vdmVDbGFzcyhwZnggKyAnZGF0YXRhYmxlLXJvdy1hY3RpdmUnKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgaWQgPSAkKHRkKS5hdHRyKCd2YWx1ZScpO1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHRcdFx0aWRzLnB1c2goaWQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQkKGRhdGF0YWJsZSkudHJpZ2dlcihwZnggKyAnZGF0YXRhYmxlLW9uLXVuY2hlY2snLCBbaWRzXSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGFsbCBjaGVja2JveGVzIGFjdGl2ZSBvciBpbmFjdGl2ZVxyXG5cdFx0XHQgKiBAcGFyYW0gYWN0aXZlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXRBY3RpdmVBbGw6IGZ1bmN0aW9uKGFjdGl2ZSkge1xyXG5cdFx0XHRcdHZhciBjaGVja2JveGVzID0gJChkYXRhdGFibGUudGFibGUpLlxyXG5cdFx0XHRcdFx0ZmluZCgnPiB0Ym9keSwgPiB0aGVhZCcpLlxyXG5cdFx0XHRcdFx0ZmluZCgndHInKS5ub3QoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1yb3ctc3VidGFibGUnKS5cclxuXHRcdFx0XHRcdGZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsLWNoZWNrIFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcclxuXHRcdFx0XHRpZiAoYWN0aXZlKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0QWN0aXZlKGNoZWNrYm94ZXMpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRQbHVnaW4uc2V0SW5hY3RpdmUoY2hlY2tib3hlcyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEBkZXByZWNhdGVkIGluIHY1LjAuNlxyXG5cdFx0XHQgKiBHZXQgc2VsZWN0ZWQgcm93cyB3aGljaCBhcmUgYWN0aXZlXHJcblx0XHRcdCAqIEByZXR1cm5zIHtqUXVlcnl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXRTZWxlY3RlZFJlY29yZHM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGRhdGF0YWJsZS5BUEkucmVjb3JkID0gJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93LWFjdGl2ZScpO1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHNlbGVjdGVkIHJlY29yZHNcclxuXHRcdFx0ICogQHJldHVybnMge251bGx9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRTZWxlY3RlZFJlY29yZHM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIHN1cHBvcnQgb2xkIG1ldGhvZFxyXG5cdFx0XHRcdFBsdWdpbi5zZXRTZWxlY3RlZFJlY29yZHMoKTtcclxuXHRcdFx0XHRkYXRhdGFibGUuQVBJLnJlY29yZCA9IGRhdGF0YWJsZS5yb3dzKCcuJyArIHBmeCArICdkYXRhdGFibGUtcm93LWFjdGl2ZScpLm5vZGVzKCk7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZS5BUEkucmVjb3JkO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCBvcHRpb25zIGJ5IGRvdHMgbm90YXRpb24gcGF0aFxyXG5cdFx0XHQgKiBAcGFyYW0gcGF0aCBTdHJpbmcgRG90IG5vdGF0aW9uIHBhdGggaW4gc3RyaW5nXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0T3B0aW9uOiBmdW5jdGlvbihwYXRoKSB7XHJcblx0XHRcdFx0cmV0dXJuIFBsdWdpbi5nZXRPYmplY3QocGF0aCwgb3B0aW9ucyk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2V0IGdsb2JhbCBvcHRpb25zIG5vZGVzIGJ5IGRvdHMgbm90YXRpb24gcGF0aFxyXG5cdFx0XHQgKiBAcGFyYW0gcGF0aFxyXG5cdFx0XHQgKiBAcGFyYW0gb2JqZWN0XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXRPcHRpb246IGZ1bmN0aW9uKHBhdGgsIG9iamVjdCkge1xyXG5cdFx0XHRcdG9wdGlvbnMgPSBQbHVnaW4uZXh0ZW5kT2JqKG9wdGlvbnMsIHBhdGgsIG9iamVjdCk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2VhcmNoIGZpbHRlciBmb3IgbG9jYWwgJiByZW1vdGVcclxuXHRcdFx0ICogQHBhcmFtIHZhbHVlXHJcblx0XHRcdCAqIEBwYXJhbSBjb2x1bW5zLiBPcHRpb25hbCBsaXN0IG9mIGNvbHVtbnMgdG8gYmUgZmlsdGVyZWQuXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZWFyY2g6IGZ1bmN0aW9uKHZhbHVlLCBjb2x1bW5zKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW5zICE9PSAndW5kZWZpbmVkJykgY29sdW1ucyA9ICQubWFrZUFycmF5KGNvbHVtbnMpO1xyXG5cdFx0XHRcdHZhciBkZWxheSA9IChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbihjYWxsYmFjaywgbXMpIHtcclxuXHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KFBsdWdpbi50aW1lcik7XHJcblx0XHRcdFx0XHRcdFBsdWdpbi50aW1lciA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIG1zKTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fSkoKTtcclxuXHJcblx0XHRcdFx0ZGVsYXkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHQvLyBnZXQgcXVlcnkgcGFyYW1ldGVyc1xyXG5cdFx0XHRcdFx0dmFyIHF1ZXJ5ID0gUGx1Z2luLmdldERhdGFTb3VyY2VRdWVyeSgpO1xyXG5cclxuXHRcdFx0XHRcdC8vIHNlYXJjaCBub3QgYnkgY29sdW1uc1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW5zID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHZhciBrZXkgPSBQbHVnaW4uZ2V0R2VuZXJhbFNlYXJjaEtleSgpO1xyXG5cdFx0XHRcdFx0XHRxdWVyeVtrZXldID0gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2VhcmNoIGJ5IGNvbHVtbnMsIHN1cHBvcnQgbXVsdGlwbGUgY29sdW1uc1xyXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBjb2x1bW5zID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRcdFx0XHQkLmVhY2goY29sdW1ucywgZnVuY3Rpb24oaywgY29sdW1uKSB7XHJcblx0XHRcdFx0XHRcdFx0cXVlcnlbY29sdW1uXSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIGVtcHR5IGVsZW1lbnQgZnJvbSBhcnJheXNcclxuXHRcdFx0XHRcdFx0JC5lYWNoKHF1ZXJ5LCBmdW5jdGlvbihrLCB2KSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHYgPT09ICcnIHx8ICQuaXNFbXB0eU9iamVjdCh2KSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0ZGVsZXRlIHF1ZXJ5W2tdO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0UGx1Z2luLnNldERhdGFTb3VyY2VRdWVyeShxdWVyeSk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVzZXQgcGFnaW5hdGlvbiB0byAxIHdoZW4gZG9pbmcgc2VlYXJjaGluZ1xyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnNldERhdGFTb3VyY2VQYXJhbSgncGFnaW5hdGlvbicsIE9iamVjdC5hc3NpZ24oe30sIGRhdGF0YWJsZS5nZXREYXRhU291cmNlUGFyYW0oJ3BhZ2luYXRpb24nKSwge3BhZ2U6IDF9KSk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbG9jYWwgZmlsdGVyIG9ubHkuIHJlbW90ZSBwYWdpbmF0aW9uIHdpbGwgc2tpcCB0aGlzIGJsb2NrXHJcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuZGF0YS5zZXJ2ZXJGaWx0ZXJpbmcpIHtcclxuXHRcdFx0XHRcdFx0UGx1Z2luLmxvY2FsRGF0YVVwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0UGx1Z2luLmRhdGFSZW5kZXIoJ3NlYXJjaCcpO1xyXG5cdFx0XHRcdH0sIFBsdWdpbi5nZXRPcHRpb24oJ3NlYXJjaC5kZWxheScpKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZXQgZGF0YXNvdXJjZSBwYXJhbXMgZXh0cmFjdFxyXG5cdFx0XHQgKiBAcGFyYW0gcGFyYW1cclxuXHRcdFx0ICogQHBhcmFtIHZhbHVlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRzZXREYXRhU291cmNlUGFyYW06IGZ1bmN0aW9uKHBhcmFtLCB2YWx1ZSkge1xyXG5cdFx0XHRcdGRhdGF0YWJsZS5BUEkucGFyYW1zID0gJC5leHRlbmQoe30sIHtcclxuXHRcdFx0XHRcdHBhZ2luYXRpb246IHtwYWdlOiAxLCBwZXJwYWdlOiBQbHVnaW4uZ2V0T3B0aW9uKCdkYXRhLnBhZ2VTaXplJyl9LFxyXG5cdFx0XHRcdFx0c29ydDogUGx1Z2luLmdldERlZmF1bHRTb3J0Q29sdW1uKCksXHJcblx0XHRcdFx0XHRxdWVyeToge30sXHJcblx0XHRcdFx0fSwgZGF0YXRhYmxlLkFQSS5wYXJhbXMsIFBsdWdpbi5zdGF0ZUdldChQbHVnaW4uc3RhdGVJZCkpO1xyXG5cclxuXHRcdFx0XHRkYXRhdGFibGUuQVBJLnBhcmFtcyA9IFBsdWdpbi5leHRlbmRPYmooZGF0YXRhYmxlLkFQSS5wYXJhbXMsIHBhcmFtLCB2YWx1ZSk7XHJcblxyXG5cdFx0XHRcdFBsdWdpbi5zdGF0ZUtlZXAoUGx1Z2luLnN0YXRlSWQsIGRhdGF0YWJsZS5BUEkucGFyYW1zKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgZGF0YXNvdXJjZSBwYXJhbXNcclxuXHRcdFx0ICogQHBhcmFtIHBhcmFtXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXREYXRhU291cmNlUGFyYW06IGZ1bmN0aW9uKHBhcmFtKSB7XHJcblx0XHRcdFx0ZGF0YXRhYmxlLkFQSS5wYXJhbXMgPSAkLmV4dGVuZCh7fSwge1xyXG5cdFx0XHRcdFx0cGFnaW5hdGlvbjoge3BhZ2U6IDEsIHBlcnBhZ2U6IFBsdWdpbi5nZXRPcHRpb24oJ2RhdGEucGFnZVNpemUnKX0sXHJcblx0XHRcdFx0XHRzb3J0OiBQbHVnaW4uZ2V0RGVmYXVsdFNvcnRDb2x1bW4oKSxcclxuXHRcdFx0XHRcdHF1ZXJ5OiB7fSxcclxuXHRcdFx0XHR9LCBkYXRhdGFibGUuQVBJLnBhcmFtcywgUGx1Z2luLnN0YXRlR2V0KFBsdWdpbi5zdGF0ZUlkKSk7XHJcblxyXG5cdFx0XHRcdGlmICh0eXBlb2YgcGFyYW0gPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gUGx1Z2luLmdldE9iamVjdChwYXJhbSwgZGF0YXRhYmxlLkFQSS5wYXJhbXMpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZS5BUEkucGFyYW1zO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNob3J0Y29kZSB0byBkYXRhdGFibGUuZ2V0RGF0YVNvdXJjZVBhcmFtKCdxdWVyeScpO1xyXG5cdFx0XHQgKiBAcmV0dXJucyB7Kn1cclxuXHRcdFx0ICovXHJcblx0XHRcdGdldERhdGFTb3VyY2VRdWVyeTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIFBsdWdpbi5nZXREYXRhU291cmNlUGFyYW0oJ3F1ZXJ5JykgfHwge307XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogU2hvcnRjb2RlIHRvIGRhdGF0YWJsZS5zZXREYXRhU291cmNlUGFyYW0oJ3F1ZXJ5JywgcXVlcnkpO1xyXG5cdFx0XHQgKiBAcGFyYW0gcXVlcnlcclxuXHRcdFx0ICovXHJcblx0XHRcdHNldERhdGFTb3VyY2VRdWVyeTogZnVuY3Rpb24ocXVlcnkpIHtcclxuXHRcdFx0XHRQbHVnaW4uc2V0RGF0YVNvdXJjZVBhcmFtKCdxdWVyeScsIHF1ZXJ5KTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgY3VycmVudCBwYWdlIG51bWJlclxyXG5cdFx0XHQgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z2V0Q3VycmVudFBhZ2U6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiAkKGRhdGF0YWJsZS50YWJsZSkuXHJcblx0XHRcdFx0XHRzaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJykuXHJcblx0XHRcdFx0XHRsYXN0KCkuXHJcblx0XHRcdFx0XHRmaW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbmF2JykuXHJcblx0XHRcdFx0XHRmaW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtcGFnZXItbGluay4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1saW5rLWFjdGl2ZScpLlxyXG5cdFx0XHRcdFx0ZGF0YSgncGFnZScpIHx8IDE7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHNlbGVjdGVkIGRyb3Bkb3duIHBhZ2Ugc2l6ZVxyXG5cdFx0XHQgKiBAcmV0dXJucyB7KnxudW1iZXJ9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXRQYWdlU2l6ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICQoZGF0YXRhYmxlLnRhYmxlKS5zaWJsaW5ncygnLicgKyBwZnggKyAnZGF0YXRhYmxlLXBhZ2VyJykubGFzdCgpLmZpbmQoJ3NlbGVjdC4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1wYWdlci1zaXplJykudmFsKCkgfHwgMTA7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IHRvdGFsIHJvd3NcclxuXHRcdFx0ICovXHJcblx0XHRcdGdldFRvdGFsUm93czogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZS5BUEkucGFyYW1zLnBhZ2luYXRpb24udG90YWw7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogR2V0IGZ1bGwgZGF0YXNldCBpbiBncmlkXHJcblx0XHRcdCAqIEByZXR1cm5zIHsqfG51bGx8QXJyYXl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRnZXREYXRhU2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlLm9yaWdpbmFsRGF0YVNldDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdG5vZGVUcjogW10sXHJcblx0XHRcdG5vZGVUZDogW10sXHJcblx0XHRcdG5vZGVDb2xzOiBbXSxcclxuXHRcdFx0cmVjZW50Tm9kZTogW10sXHJcblxyXG5cdFx0XHR0YWJsZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhdGFibGUudGFibGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlLnRhYmxlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZWxlY3QgYSBzaW5nbGUgcm93IGZyb20gdGhlIHRhYmxlXHJcblx0XHRcdCAqIEBwYXJhbSBzZWxlY3RvclxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0cm93OiBmdW5jdGlvbihzZWxlY3Rvcikge1xyXG5cdFx0XHRcdFBsdWdpbi5yb3dzKHNlbGVjdG9yKTtcclxuXHRcdFx0XHRQbHVnaW4ubm9kZVRyID0gUGx1Z2luLnJlY2VudE5vZGUgPSAkKFBsdWdpbi5ub2RlVHIpLmZpcnN0KCk7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZWxlY3QgbXVsdGlwbGUgcm93cyBmcm9tIHRoZSB0YWJsZVxyXG5cdFx0XHQgKiBAcGFyYW0gc2VsZWN0b3JcclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdHJvd3M6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcblx0XHRcdFx0aWYgKFBsdWdpbi5pc0xvY2tlZCgpKSB7XHJcblx0XHRcdFx0XHRQbHVnaW4ubm9kZVRyID0gUGx1Z2luLnJlY2VudE5vZGUgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoc2VsZWN0b3IpLmZpbHRlcignLicgKyBwZnggKyAnZGF0YXRhYmxlLWxvY2stc2Nyb2xsID4gLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRQbHVnaW4ubm9kZVRyID0gUGx1Z2luLnJlY2VudE5vZGUgPSAkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoc2VsZWN0b3IpLmZpbHRlcignLicgKyBwZnggKyAnZGF0YXRhYmxlLXJvdycpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIFNlbGVjdCBhIHNpbmdsZSBjb2x1bW4gZnJvbSB0aGUgdGFibGVcclxuXHRcdFx0ICogQHBhcmFtIGluZGV4IHplcm8tYmFzZWQgaW5kZXhcclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdGNvbHVtbjogZnVuY3Rpb24oaW5kZXgpIHtcclxuXHRcdFx0XHRQbHVnaW4ubm9kZUNvbHMgPSBQbHVnaW4ucmVjZW50Tm9kZSA9ICQoZGF0YXRhYmxlLnRhYmxlQm9keSkuZmluZCgnLicgKyBwZnggKyAnZGF0YXRhYmxlLWNlbGw6bnRoLWNoaWxkKCcgKyAoaW5kZXggKyAxKSArICcpJyk7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTZWxlY3QgbXVsdGlwbGUgY29sdW1ucyBmcm9tIHRoZSB0YWJsZVxyXG5cdFx0XHQgKiBAcGFyYW0gc2VsZWN0b3JcclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdGNvbHVtbnM6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcblx0XHRcdFx0dmFyIGNvbnRleHQgPSBkYXRhdGFibGUudGFibGU7XHJcblx0XHRcdFx0aWYgKFBsdWdpbi5ub2RlVHIgPT09IFBsdWdpbi5yZWNlbnROb2RlKSB7XHJcblx0XHRcdFx0XHRjb250ZXh0ID0gUGx1Z2luLm5vZGVUcjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFyIGNvbHVtbnMgPSAkKGNvbnRleHQpLmZpbmQoJy4nICsgcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsW2RhdGEtZmllbGQ9XCInICsgc2VsZWN0b3IgKyAnXCJdJyk7XHJcblx0XHRcdFx0aWYgKGNvbHVtbnMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0UGx1Z2luLm5vZGVDb2xzID0gUGx1Z2luLnJlY2VudE5vZGUgPSBjb2x1bW5zO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRQbHVnaW4ubm9kZUNvbHMgPSBQbHVnaW4ucmVjZW50Tm9kZSA9ICQoY29udGV4dCkuZmluZChzZWxlY3RvcikuZmlsdGVyKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Y2VsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuXHRcdFx0XHRQbHVnaW4uY2VsbHMoc2VsZWN0b3IpO1xyXG5cdFx0XHRcdFBsdWdpbi5ub2RlVGQgPSBQbHVnaW4ucmVjZW50Tm9kZSA9ICQoUGx1Z2luLm5vZGVUZCkuZmlyc3QoKTtcclxuXHRcdFx0XHRyZXR1cm4gZGF0YXRhYmxlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Y2VsbHM6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcblx0XHRcdFx0dmFyIGNlbGxzID0gJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdkYXRhdGFibGUtY2VsbCcpO1xyXG5cdFx0XHRcdGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRjZWxscyA9ICQoY2VsbHMpLmZpbHRlcihzZWxlY3Rvcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFBsdWdpbi5ub2RlVGQgPSBQbHVnaW4ucmVjZW50Tm9kZSA9IGNlbGxzO1xyXG5cdFx0XHRcdHJldHVybiBkYXRhdGFibGU7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogRGVsZXRlIHRoZSBzZWxlY3RlZCByb3cgZnJvbSB0aGUgdGFibGVcclxuXHRcdFx0ICogQHJldHVybnMge2pRdWVyeX1cclxuXHRcdFx0ICovXHJcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0aWYgKCQoUGx1Z2luLm5vZGVUci5sZW5ndGgpICYmIFBsdWdpbi5ub2RlVHIgPT09IFBsdWdpbi5yZWNlbnROb2RlKSB7XHJcblx0XHRcdFx0XHQkKFBsdWdpbi5ub2RlVHIpLnJlbW92ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRQbHVnaW4ubGF5b3V0VXBkYXRlKCk7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBTaG93IG9yIGhpZGUgdGhlIGNvbHVtbnMgb3Igcm93c1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0dmlzaWJsZTogZnVuY3Rpb24oYm9vbCkge1xyXG5cdFx0XHRcdGlmICgkKFBsdWdpbi5yZWNlbnROb2RlLmxlbmd0aCkpIHtcclxuXHRcdFx0XHRcdHZhciBsb2NrZWQgPSBQbHVnaW4ubG9ja0VuYWJsZWRDb2x1bW5zKCk7XHJcblx0XHRcdFx0XHRpZiAoUGx1Z2luLnJlY2VudE5vZGUgPT09IFBsdWdpbi5ub2RlQ29scykge1xyXG5cdFx0XHRcdFx0XHR2YXIgaW5kZXggPSBQbHVnaW4ucmVjZW50Tm9kZS5pbmRleCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5pc0xvY2tlZCgpKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHNjcm9sbENvbHVtbnMgPSAkKFBsdWdpbi5yZWNlbnROb2RlKS5jbG9zZXN0KCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1zY3JvbGwnKS5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHNjcm9sbENvbHVtbnMpIHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGlzIGF0IGNlbnRlciBvZiBzY3JvbGxhYmxlIGFyZWFcclxuXHRcdFx0XHRcdFx0XHRcdGluZGV4ICs9IGxvY2tlZC5sZWZ0Lmxlbmd0aCArIDE7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICgkKFBsdWdpbi5yZWNlbnROb2RlKS5jbG9zZXN0KCcuJyArIHBmeCArICdkYXRhdGFibGUtbG9jay1yaWdodCcpLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaXMgYXQgdGhlIHJpZ2h0IGxvY2tlZCB0YWJsZVxyXG5cdFx0XHRcdFx0XHRcdFx0aW5kZXggKz0gbG9ja2VkLmxlZnQubGVuZ3RoICsgc2Nyb2xsQ29sdW1ucyArIDE7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKGJvb2wpIHtcclxuXHRcdFx0XHRcdFx0aWYgKFBsdWdpbi5yZWNlbnROb2RlID09PSBQbHVnaW4ubm9kZUNvbHMpIHtcclxuXHRcdFx0XHRcdFx0XHRkZWxldGUgb3B0aW9ucy5jb2x1bW5zW2luZGV4XS52aXNpYmxlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdCQoUGx1Z2luLnJlY2VudE5vZGUpLnNob3coKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlmIChQbHVnaW4ucmVjZW50Tm9kZSA9PT0gUGx1Z2luLm5vZGVDb2xzKSB7XHJcblx0XHRcdFx0XHRcdFx0UGx1Z2luLnNldE9wdGlvbignY29sdW1ucy4nICsgKGluZGV4KSArICcudmlzaWJsZScsIGZhbHNlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQkKFBsdWdpbi5yZWNlbnROb2RlKS5oaWRlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRQbHVnaW4uY29sdW1uSGlkZSgpO1xyXG5cdFx0XHRcdFx0UGx1Z2luLnJlZHJhdygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgdGhlIHRoZSBET00gZWxlbWVudCBmb3IgdGhlIHNlbGVjdGVkIHJvd3Mgb3IgY29sdW1uc1xyXG5cdFx0XHQgKiBAcmV0dXJucyB7QXJyYXl9XHJcblx0XHRcdCAqL1xyXG5cdFx0XHRub2RlczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIFBsdWdpbi5yZWNlbnROb2RlO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIHdpbGwgYmUgaW1wbGVtZW50ZWQgc29vblxyXG5cdFx0XHQgKiBAcmV0dXJucyB7alF1ZXJ5fVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZGF0YXNldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBPcGVuIHBhZ2UgYnkgbnVtYmVyXHJcblx0XHRcdCAqIEBwYXJhbSBwYWdlIG51bWJlclxyXG5cdFx0XHQgKi9cclxuXHRcdFx0Z290b1BhZ2U6IGZ1bmN0aW9uIChwYWdlKSB7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBQbHVnaW4ucGFnaW5nT2JqZWN0ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0UGx1Z2luLmlzSW5pdCA9IHRydWU7XHJcblx0XHRcdFx0XHRQbHVnaW4ucGFnaW5nT2JqZWN0Lm9wZW5QYWdlKHBhZ2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogUHVibGljIEFQSSBtZXRob2RzIGNhbiBiZSB1c2VkIGRpcmVjdGx5IGJ5IGRhdGF0YWJsZVxyXG5cdFx0ICovXHJcblx0XHQkLmVhY2goUGx1Z2luLCBmdW5jdGlvbihmdW5jTmFtZSwgZnVuYykge1xyXG5cdFx0XHRkYXRhdGFibGVbZnVuY05hbWVdID0gZnVuYztcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIGluaXRpYWxpemUgbWFpbiBkYXRhdGFibGUgcGx1Z2luXHJcblx0XHRpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0XHR2YXIgbWV0aG9kID0gb3B0aW9ucztcclxuXHRcdFx0XHRkYXRhdGFibGUgPSAkKHRoaXMpLmRhdGEocGx1Z2luTmFtZSk7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBkYXRhdGFibGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRvcHRpb25zID0gZGF0YXRhYmxlLm9wdGlvbnM7XHJcblx0XHRcdFx0XHRQbHVnaW5bbWV0aG9kXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYgKCFkYXRhdGFibGUuZGF0YShwbHVnaW5OYW1lKSAmJiAhJCh0aGlzKS5oYXNDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWxvYWRlZCcpKSB7XHJcblx0XHRcdFx0XHRkYXRhdGFibGUuZGF0YVNldCA9IG51bGw7XHJcblx0XHRcdFx0XHRkYXRhdGFibGUudGV4dEFsaWduID0ge1xyXG5cdFx0XHRcdFx0XHRsZWZ0OiBwZnggKyAnZGF0YXRhYmxlLWNlbGwtbGVmdCcsXHJcblx0XHRcdFx0XHRcdGNlbnRlcjogcGZ4ICsgJ2RhdGF0YWJsZS1jZWxsLWNlbnRlcicsXHJcblx0XHRcdFx0XHRcdHJpZ2h0OiBwZnggKyAnZGF0YXRhYmxlLWNlbGwtcmlnaHQnLFxyXG5cdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0XHQvLyBtZXJnZSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgb3B0aW9uc1xyXG5cdFx0XHRcdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLmZuW3BsdWdpbk5hbWVdLmRlZmF1bHRzLCBvcHRpb25zKTtcclxuXHJcblx0XHRcdFx0XHRkYXRhdGFibGUub3B0aW9ucyA9IG9wdGlvbnM7XHJcblxyXG5cdFx0XHRcdFx0Ly8gaW5pdCBwbHVnaW4gcHJvY2Vzc1xyXG5cdFx0XHRcdFx0UGx1Z2luLmluaXQuYXBwbHkodGhpcywgW29wdGlvbnNdKTtcclxuXHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZS53cmFwKS5kYXRhKHBsdWdpbk5hbWUsIGRhdGF0YWJsZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBnZXQgZXhpc3RpbmcgaW5zdGFuY2UgZGF0YXRhYmxlXHJcblx0XHRcdGRhdGF0YWJsZSA9ICQodGhpcykuZGF0YShwbHVnaW5OYW1lKTtcclxuXHRcdFx0aWYgKHR5cGVvZiBkYXRhdGFibGUgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0JC5lcnJvcihwbHVnaW5OYW1lICsgJyBub3QgaW5pdGlhbGl6ZWQnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRvcHRpb25zID0gZGF0YXRhYmxlLm9wdGlvbnM7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHR9O1xyXG5cclxuXHQvLyBkZWZhdWx0IG9wdGlvbnNcclxuXHQkLmZuW3BsdWdpbk5hbWVdLmRlZmF1bHRzID0ge1xyXG5cdFx0Ly8gZGF0YXNvdXJjZSBkZWZpbml0aW9uXHJcblx0XHRkYXRhOiB7XHJcblx0XHRcdHR5cGU6ICdsb2NhbCcsXHJcblx0XHRcdHNvdXJjZTogbnVsbCxcclxuXHRcdFx0cGFnZVNpemU6IDEwLCAvLyBkaXNwbGF5IHJlY29yZHMgcGVyIHBhZ2VcclxuXHRcdFx0c2F2ZVN0YXRlOiB0cnVlLFxyXG5cclxuXHRcdFx0c2VydmVyUGFnaW5nOiBmYWxzZSxcclxuXHRcdFx0c2VydmVyRmlsdGVyaW5nOiBmYWxzZSxcclxuXHRcdFx0c2VydmVyU29ydGluZzogZmFsc2UsXHJcblxyXG5cdFx0XHRhdXRvQ29sdW1uczogZmFsc2UsXHJcblx0XHRcdGF0dHI6IHtcclxuXHRcdFx0XHRyb3dQcm9wczogW10sXHJcblx0XHRcdH0sXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIGxheW91dCBkZWZpbml0aW9uXHJcblx0XHRsYXlvdXQ6IHtcclxuXHRcdFx0dGhlbWU6ICdkZWZhdWx0JywgLy8gZGF0YXRhYmxlIHdpbGwgc3VwcG9ydCBtdWx0aXBsZSB0aGVtZXMgYW5kIGRlc2lnbnNcclxuXHRcdFx0Y2xhc3M6IHBmeCArICdkYXRhdGFibGUtcHJpbWFyeScsIC8vIGN1c3RvbSB3cmFwcGVyIGNsYXNzXHJcblx0XHRcdHNjcm9sbDogZmFsc2UsIC8vIGVuYWJsZS9kaXNhYmxlIGRhdGF0YWJsZSBzY3JvbGwgYm90aCBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCB3aGVuIG5lZWRlZC5cclxuXHRcdFx0aGVpZ2h0OiBudWxsLCAvLyBkYXRhdGFibGUncyBib2R5J3MgZml4ZWQgaGVpZ2h0XHJcblx0XHRcdG1pbkhlaWdodDogbnVsbCxcclxuXHRcdFx0Zm9vdGVyOiBmYWxzZSwgLy8gZGlzcGxheS9oaWRlIGZvb3RlclxyXG5cdFx0XHRoZWFkZXI6IHRydWUsIC8vIGRpc3BsYXkvaGlkZSBoZWFkZXJcclxuXHRcdFx0Y3VzdG9tU2Nyb2xsYmFyOiB0cnVlLCAvLyBzZXQgZmFsc2UgdG8gZGlzYWJsZSBjdXN0b20gc2Nyb2xsYmFyXHJcblxyXG5cdFx0XHQvLyBkYXRhdGFibGUgc3Bpbm5lclxyXG5cdFx0XHRzcGlubmVyOiB7XHJcblx0XHRcdFx0b3ZlcmxheUNvbG9yOiAnIzAwMDAwMCcsXHJcblx0XHRcdFx0b3BhY2l0eTogMCxcclxuXHRcdFx0XHR0eXBlOiAnbG9hZGVyJyxcclxuXHRcdFx0XHRzdGF0ZTogJ3ByaW1hcnknLFxyXG5cdFx0XHRcdG1lc3NhZ2U6IHRydWUsXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvLyBkYXRhdGFibGUgVUkgaWNvbnNcclxuXHRcdFx0aWNvbnM6IHtcclxuXHRcdFx0XHRzb3J0OiB7YXNjOiAnZmxhdGljb24yLWFycm93LXVwJywgZGVzYzogJ2ZsYXRpY29uMi1hcnJvdy1kb3duJ30sXHJcblx0XHRcdFx0cGFnaW5hdGlvbjoge1xyXG5cdFx0XHRcdFx0bmV4dDogJ2ZsYXRpY29uMi1uZXh0JyxcclxuXHRcdFx0XHRcdHByZXY6ICdmbGF0aWNvbjItYmFjaycsXHJcblx0XHRcdFx0XHRmaXJzdDogJ2ZsYXRpY29uMi1mYXN0LWJhY2snLFxyXG5cdFx0XHRcdFx0bGFzdDogJ2ZsYXRpY29uMi1mYXN0LW5leHQnLFxyXG5cdFx0XHRcdFx0bW9yZTogJ2ZsYXRpY29uLW1vcmUtMScsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRyb3dEZXRhaWw6IHtleHBhbmQ6ICdmYSBmYS1jYXJldC1kb3duJywgY29sbGFwc2U6ICdmYSBmYS1jYXJldC1yaWdodCd9LFxyXG5cdFx0XHR9LFxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBjb2x1bW4gc29ydGluZ1xyXG5cdFx0c29ydGFibGU6IHRydWUsXHJcblxyXG5cdFx0Ly8gcmVzaXplIGNvbHVtbiBzaXplIHdpdGggbW91c2UgZHJhZyBjb21pbmcgc29vbilcclxuXHRcdHJlc2l6YWJsZTogZmFsc2UsXHJcblxyXG5cdFx0Ly8gY29sdW1uIGJhc2VkIGZpbHRlcmluZyAoY29taW5nIHNvb24pXHJcblx0XHRmaWx0ZXJhYmxlOiBmYWxzZSxcclxuXHJcblx0XHRwYWdpbmF0aW9uOiB0cnVlLFxyXG5cclxuXHRcdC8vIGlubGluZSBhbmQgYmFjdGNoIGVkaXRpbmcgKGNvb21pbmcgc29vbilcclxuXHRcdGVkaXRhYmxlOiBmYWxzZSxcclxuXHJcblx0XHQvLyBjb2x1bW5zIGRlZmluaXRpb25cclxuXHRcdGNvbHVtbnM6IFtdLFxyXG5cclxuXHRcdHNlYXJjaDoge1xyXG5cdFx0XHQvLyBlbmFibGUgdHJpZ2dlciBzZWFyY2ggYnkga2V5dXAgZW50ZXJcclxuXHRcdFx0b25FbnRlcjogZmFsc2UsXHJcblx0XHRcdC8vIGlucHV0IHRleHQgZm9yIHNlYXJjaFxyXG5cdFx0XHRpbnB1dDogbnVsbCxcclxuXHRcdFx0Ly8gc2VhcmNoIGRlbGF5IGluIG1pbGxpc2Vjb25kc1xyXG5cdFx0XHRkZWxheTogNDAwLFxyXG5cdFx0XHQvL1x0cmVtb3RlIHNlcnZlciBzZWFyY2gga2V5IHZhbHVlXHJcblx0XHRcdGtleTogbnVsbFxyXG5cdFx0fSxcclxuXHJcblx0XHRyb3dzOiB7XHJcblx0XHRcdC8vIGRlcHJlY2F0ZWRcclxuXHRcdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBjYWxsIGJlZm9yZSByb3cgdGVtcGxhdGVcclxuXHRcdFx0YmVmb3JlVGVtcGxhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR9LFxyXG5cdFx0XHQvLyBjYWxsIGFmdGVyIHJvdyB0ZW1wbGF0ZVxyXG5cdFx0XHRhZnRlclRlbXBsYXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0fSxcclxuXHRcdFx0YXV0b0hpZGU6IHRydWUsXHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIHRvb2xiYXJcclxuXHRcdHRvb2xiYXI6IHtcclxuXHRcdFx0Ly8gcGxhY2UgcGFnaW5hdGlvbiBhbmQgZGlzcGxheUluZm8gYmxvY2tzIGFjY29yZGluZyB0byB0aGUgYXJyYXkgb3JkZXJcclxuXHRcdFx0bGF5b3V0OiBbJ3BhZ2luYXRpb24nLCAnaW5mbyddLFxyXG5cclxuXHRcdFx0Ly8gdG9vbGJhciBwbGFjZW1lbnQgY2FuIGJlIGF0IHRvcCBvciBib3R0b20gb3IgYm90aCB0b3AgYW5kIGJvdHRvbSByZXBlYXRlZFxyXG5cdFx0XHRwbGFjZW1lbnQ6IFsnYm90dG9tJ10sICAvLyd0b3AnLCAnYm90dG9tJ1xyXG5cclxuXHRcdFx0Ly8gdG9vbGJhciBpdGVtc1xyXG5cdFx0XHRpdGVtczoge1xyXG5cdFx0XHRcdC8vIHBhZ2luYXRpb25cclxuXHRcdFx0XHRwYWdpbmF0aW9uOiB7XHJcblx0XHRcdFx0XHQvLyBwYWdpbmF0aW9uIHR5cGUoZGVmYXVsdCBvciBzY3JvbGwpXHJcblx0XHRcdFx0XHR0eXBlOiAnZGVmYXVsdCcsXHJcblxyXG5cdFx0XHRcdFx0Ly8gbnVtYmVyIG9mIHBhZ2VzIHRvIGRpc3BsYXkgYnkgYnJlYWtwb2ludHNcclxuXHRcdFx0XHRcdHBhZ2VzOiB7XHJcblx0XHRcdFx0XHRcdGRlc2t0b3A6IHtcclxuXHRcdFx0XHRcdFx0XHRsYXlvdXQ6ICdkZWZhdWx0JyxcclxuXHRcdFx0XHRcdFx0XHRwYWdlc051bWJlcjogNSxcclxuXHRcdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdFx0dGFibGV0OiB7XHJcblx0XHRcdFx0XHRcdFx0bGF5b3V0OiAnZGVmYXVsdCcsXHJcblx0XHRcdFx0XHRcdFx0cGFnZXNOdW1iZXI6IDMsXHJcblx0XHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRcdG1vYmlsZToge1xyXG5cdFx0XHRcdFx0XHRcdGxheW91dDogJ2NvbXBhY3QnLFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0XHQvLyBuYXZpZ2F0aW9uIGJ1dHRvbnNcclxuXHRcdFx0XHRcdG5hdmlnYXRpb246IHtcclxuXHRcdFx0XHRcdFx0cHJldjogdHJ1ZSwgLy8gZGlzcGxheSBwcmV2IGJ1dHRvblxyXG5cdFx0XHRcdFx0XHRuZXh0OiB0cnVlLCAvLyBkaXNwbGF5IG5leHQgYnV0dG9uXHJcblx0XHRcdFx0XHRcdGZpcnN0OiB0cnVlLCAvLyBkaXNwbGF5IGZpcnN0IGJ1dHRvblxyXG5cdFx0XHRcdFx0XHRsYXN0OiB0cnVlLCAvLyBkaXNwbGF5IGxhc3QgYnV0dG9uXHJcblx0XHRcdFx0XHRcdG1vcmU6IGZhbHNlIC8vIGRpc3BsYXkgbW9yZSBidXR0b25cclxuXHRcdFx0XHRcdH0sXHJcblxyXG5cdFx0XHRcdFx0Ly8gcGFnZSBzaXplIHNlbGVjdFxyXG5cdFx0XHRcdFx0cGFnZVNpemVTZWxlY3Q6IFtdLCAvLyBkaXNwbGF5IGRyb3Bkb3duIHRvIHNlbGVjdCBwYWdpbmF0aW9uIHNpemUuIC0xIGlzIHVzZWQgZm9yIFwiQUxsXCIgb3B0aW9uXHJcblx0XHRcdFx0fSxcclxuXHJcblx0XHRcdFx0Ly8gcmVjb3JkcyBpbmZvXHJcblx0XHRcdFx0aW5mbzogdHJ1ZSxcclxuXHRcdFx0fSxcclxuXHRcdH0sXHJcblxyXG5cdFx0Ly8gaGVyZSB3ZSB3aWxsIGtlZXAgYWxsIHN0cmluZ3MgYW5kIG1lc3NhZ2UgdXNlZCBieSBkYXRhdGFibGUgVUkgc28gZGV2ZWxvcGVyIGNhbiBlYXNpbGl5IHRyYW5zbGF0ZSB0byBhbnkgbGFuZ3VhZ2UuXHJcblx0XHQvLyBCeSBkZWZhdWx0IHRoZSBzdGlybmdzIHdpbGwgYmUgaW4gdGhlIHBsdWdpbiBzb3VyY2UgYW5kIGhlcmUgY2FuIG92ZXJyaWRlIGl0XHJcblx0XHR0cmFuc2xhdGU6IHtcclxuXHRcdFx0cmVjb3Jkczoge1xyXG5cdFx0XHRcdHByb2Nlc3Npbmc6ICdQbGVhc2Ugd2FpdC4uLicsXHJcblx0XHRcdFx0bm9SZWNvcmRzOiAnTm8gcmVjb3JkcyBmb3VuZCcsXHJcblx0XHRcdH0sXHJcblx0XHRcdHRvb2xiYXI6IHtcclxuXHRcdFx0XHRwYWdpbmF0aW9uOiB7XHJcblx0XHRcdFx0XHRpdGVtczoge1xyXG5cdFx0XHRcdFx0XHRkZWZhdWx0OiB7XHJcblx0XHRcdFx0XHRcdFx0Zmlyc3Q6ICdGaXJzdCcsXHJcblx0XHRcdFx0XHRcdFx0cHJldjogJ1ByZXZpb3VzJyxcclxuXHRcdFx0XHRcdFx0XHRuZXh0OiAnTmV4dCcsXHJcblx0XHRcdFx0XHRcdFx0bGFzdDogJ0xhc3QnLFxyXG5cdFx0XHRcdFx0XHRcdG1vcmU6ICdNb3JlIHBhZ2VzJyxcclxuXHRcdFx0XHRcdFx0XHRpbnB1dDogJ1BhZ2UgbnVtYmVyJyxcclxuXHRcdFx0XHRcdFx0XHRzZWxlY3Q6ICdTZWxlY3QgcGFnZSBzaXplJyxcclxuXHRcdFx0XHRcdFx0XHRhbGw6ICdhbGwnLFxyXG5cdFx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0XHRpbmZvOiAnU2hvd2luZyB7e3N0YXJ0fX0gLSB7e2VuZH19IG9mIHt7dG90YWx9fScsXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0sXHJcblx0XHR9LFxyXG5cclxuXHRcdGV4dGVuc2lvbnM6IHt9LFxyXG5cdH07XHJcblxyXG59KGpRdWVyeSkpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuKGZ1bmN0aW9uKCQpIHtcclxuXHJcblx0dmFyIHBsdWdpbk5hbWUgPSAnS1REYXRhdGFibGUnO1xyXG5cdHZhciBwZnggPSAnJztcclxuXHJcblx0JC5mbltwbHVnaW5OYW1lXSA9ICQuZm5bcGx1Z2luTmFtZV0gfHwge307XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBwYXJhbSBkYXRhdGFibGUgTWFpbiBkYXRhdGFibGUgcGx1Z2luIGluc3RhbmNlXHJcblx0ICogQHBhcmFtIG9wdGlvbnMgRXh0ZW5zaW9uIG9wdGlvbnNcclxuXHQgKiBAcmV0dXJucyB7Kn1cclxuXHQgKi9cclxuXHQkLmZuW3BsdWdpbk5hbWVdLmNoZWNrYm94ID0gZnVuY3Rpb24oZGF0YXRhYmxlLCBvcHRpb25zKSB7XHJcblx0XHR2YXIgRXh0ZW5zaW9uID0ge1xyXG5cdFx0XHRzZWxlY3RlZEFsbFJvd3M6IGZhbHNlLFxyXG5cdFx0XHRzZWxlY3RlZFJvd3M6IFtdLFxyXG5cdFx0XHR1bnNlbGVjdGVkUm93czogW10sXHJcblxyXG5cdFx0XHRpbml0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAoRXh0ZW5zaW9uLnNlbGVjdG9yRW5hYmxlZCgpKSB7XHJcblx0XHRcdFx0XHQvLyByZXNldFxyXG5cdFx0XHRcdFx0ZGF0YXRhYmxlLnNldERhdGFTb3VyY2VQYXJhbShvcHRpb25zLnZhcnMuc2VsZWN0ZWRBbGxSb3dzLCBmYWxzZSk7XHJcblx0XHRcdFx0XHRkYXRhdGFibGUuc3RhdGVSZW1vdmUoJ2NoZWNrYm94Jyk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVxdWVzdElkcyBpcyBub3QgbnVsbFxyXG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMudmFycy5yZXF1ZXN0SWRzKSB7XHJcblx0XHRcdFx0XHRcdC8vIHJlcXVlc3QgaWRzIGluIHJlc3BvbnNlXHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5zZXREYXRhU291cmNlUGFyYW0ob3B0aW9ucy52YXJzLnJlcXVlc3RJZHMsIHRydWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIHJlbW92ZSBzZWxlY3RlZCBjaGVja2JveCBvbiBkYXRhdGFibGUgcmVsb2FkXHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZSkub24ocGZ4ICsgJ2RhdGF0YWJsZS1vbi1yZWxvYWRlZCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuc3RhdGVSZW1vdmUoJ2NoZWNrYm94Jyk7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5zZXREYXRhU291cmNlUGFyYW0ob3B0aW9ucy52YXJzLnNlbGVjdGVkQWxsUm93cywgZmFsc2UpO1xyXG5cdFx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRBbGxSb3dzID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MgPSBbXTtcclxuXHRcdFx0XHRcdFx0RXh0ZW5zaW9uLnVuc2VsZWN0ZWRSb3dzID0gW107XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHQvLyBzZWxlY3QgYWxsIG9uIGV4dGVuc2lvbiBpbml0XHJcblx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRBbGxSb3dzID0gZGF0YXRhYmxlLmdldERhdGFTb3VyY2VQYXJhbShvcHRpb25zLnZhcnMuc2VsZWN0ZWRBbGxSb3dzKTtcclxuXHJcblx0XHRcdFx0XHQkKGRhdGF0YWJsZSkub24ocGZ4ICsgJ2RhdGF0YWJsZS1vbi1sYXlvdXQtdXBkYXRlZCcsIGZ1bmN0aW9uKGUsIGFyZ3MpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGFyZ3MudGFibGUgIT0gJChkYXRhdGFibGUud3JhcCkuYXR0cignaWQnKSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUucmVhZHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRcdFx0RXh0ZW5zaW9uLmluaXRWYXJzKCk7XHJcblx0XHRcdFx0XHRcdFx0RXh0ZW5zaW9uLmluaXRFdmVudCgpO1xyXG5cdFx0XHRcdFx0XHRcdEV4dGVuc2lvbi5pbml0U2VsZWN0KCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLm9uKHBmeCArICdkYXRhdGFibGUtb24tY2hlY2snLCBmdW5jdGlvbihlLCBpZHMpIHtcclxuXHRcdFx0XHRcdFx0aWRzLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRSb3dzLnB1c2goaWQpO1xyXG5cdFx0XHRcdFx0XHRcdC8vIC8vIHJlbW92ZSBmcm9tIHVuc2VsZWN0ZWQgcm93c1xyXG5cdFx0XHRcdFx0XHRcdEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cyA9IEV4dGVuc2lvbi5yZW1vdmUoRXh0ZW5zaW9uLnVuc2VsZWN0ZWRSb3dzLCBpZCk7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RvcmFnZSA9IHt9O1xyXG5cdFx0XHRcdFx0XHRzdG9yYWdlWydzZWxlY3RlZFJvd3MnXSA9ICQudW5pcXVlKEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MpO1xyXG5cdFx0XHRcdFx0XHRzdG9yYWdlWyd1bnNlbGVjdGVkUm93cyddID0gJC51bmlxdWUoRXh0ZW5zaW9uLnVuc2VsZWN0ZWRSb3dzKTtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLnN0YXRlS2VlcCgnY2hlY2tib3gnLCBzdG9yYWdlKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLm9uKHBmeCArICdkYXRhdGFibGUtb24tdW5jaGVjaycsIGZ1bmN0aW9uKGUsIGlkcykge1xyXG5cdFx0XHRcdFx0XHRpZHMuZm9yRWFjaChmdW5jdGlvbihpZCkge1xyXG5cdFx0XHRcdFx0XHRcdEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cy5wdXNoKGlkKTtcclxuXHRcdFx0XHRcdFx0XHQvLyAvLyByZW1vdmUgZnJvbSBzZWxlY3RlZCByb3dzXHJcblx0XHRcdFx0XHRcdFx0RXh0ZW5zaW9uLnNlbGVjdGVkUm93cyA9IEV4dGVuc2lvbi5yZW1vdmUoRXh0ZW5zaW9uLnNlbGVjdGVkUm93cywgaWQpO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0dmFyIHN0b3JhZ2UgPSB7fTtcclxuXHRcdFx0XHRcdFx0c3RvcmFnZVsnc2VsZWN0ZWRSb3dzJ10gPSAkLnVuaXF1ZShFeHRlbnNpb24uc2VsZWN0ZWRSb3dzKTtcclxuXHRcdFx0XHRcdFx0c3RvcmFnZVsndW5zZWxlY3RlZFJvd3MnXSA9ICQudW5pcXVlKEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cyk7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5zdGF0ZUtlZXAoJ2NoZWNrYm94Jywgc3RvcmFnZSk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogSW5pdCBjaGVja2JveCBjbGlja3MgZXZlbnRcclxuXHRcdFx0ICovXHJcblx0XHRcdGluaXRFdmVudDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0Ly8gc2VsZWN0IGFsbCBjaGVja2JveCBjbGlja1xyXG5cdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3gtYWxsID4gW3R5cGU9XCJjaGVja2JveFwiXScpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdC8vIGNsZWFyIHNlbGVjdGVkIGFuZCB1bnNlbGVjdGVkIHJvd3NcclxuXHRcdFx0XHRcdEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MgPSBFeHRlbnNpb24udW5zZWxlY3RlZFJvd3MgPSBbXTtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5zdGF0ZVJlbW92ZSgnY2hlY2tib3gnKTtcclxuXHJcblx0XHRcdFx0XHQvLyBzZWxlY3QgYWxsIHJvd3NcclxuXHRcdFx0XHRcdEV4dGVuc2lvbi5zZWxlY3RlZEFsbFJvd3MgPSAhISQodGhpcykuaXMoJzpjaGVja2VkJyk7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbG9jYWwgc2VsZWN0IGFsbCBjdXJyZW50IHBhZ2Ugcm93c1xyXG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLnZhcnMucmVxdWVzdElkcykge1xyXG5cdFx0XHRcdFx0XHRpZiAoJCh0aGlzKS5pcygnOmNoZWNrZWQnKSkge1xyXG5cdFx0XHRcdFx0XHRcdEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MgPSAkLm1ha2VBcnJheSgkKGRhdGF0YWJsZS50YWJsZUJvZHkpLmZpbmQoJy4nICsgcGZ4ICsgJ2NoZWNrYm94LXNpbmdsZSA+IFt0eXBlPVwiY2hlY2tib3hcIl0nKS5tYXAoZnVuY3Rpb24oaSwgY2hrKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gJChjaGspLnZhbCgpO1xyXG5cdFx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR2YXIgc3RvcmFnZSA9IHt9O1xyXG5cdFx0XHRcdFx0XHRzdG9yYWdlWydzZWxlY3RlZFJvd3MnXSA9ICQudW5pcXVlKEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MpO1xyXG5cdFx0XHRcdFx0XHRkYXRhdGFibGUuc3RhdGVLZWVwKCdjaGVja2JveCcsIHN0b3JhZ2UpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIGtlZXAgc2VsZWN0ZWRBbGxSb3dzIGluIGRhdGFzb3VyY2UgcGFyYW1zXHJcblx0XHRcdFx0XHRkYXRhdGFibGUuc2V0RGF0YVNvdXJjZVBhcmFtKG9wdGlvbnMudmFycy5zZWxlY3RlZEFsbFJvd3MsIEV4dGVuc2lvbi5zZWxlY3RlZEFsbFJvd3MpO1xyXG5cclxuXHRcdFx0XHRcdCQoZGF0YXRhYmxlKS50cmlnZ2VyKHBmeCArICdkYXRhdGFibGUtb24tY2xpY2stY2hlY2tib3gnLCBbJCh0aGlzKV0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHQvLyBzaW5nbGUgcm93IGNoZWNrYm94IGNsaWNrXHJcblx0XHRcdFx0JChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdjaGVja2JveC1zaW5nbGUgPiBbdHlwZT1cImNoZWNrYm94XCJdJykuY2xpY2soZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0dmFyIGlkID0gJCh0aGlzKS52YWwoKTtcclxuXHRcdFx0XHRcdGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7XHJcblx0XHRcdFx0XHRcdEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MucHVzaChpZCk7XHJcblx0XHRcdFx0XHRcdC8vIHJlbW92ZSBmcm9tIHVuc2VsZWN0ZWQgcm93c1xyXG5cdFx0XHRcdFx0XHRFeHRlbnNpb24udW5zZWxlY3RlZFJvd3MgPSBFeHRlbnNpb24ucmVtb3ZlKEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cywgaWQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cy5wdXNoKGlkKTtcclxuXHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIGZyb20gc2VsZWN0ZWQgcm93c1xyXG5cdFx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRSb3dzID0gRXh0ZW5zaW9uLnJlbW92ZShFeHRlbnNpb24uc2VsZWN0ZWRSb3dzLCBpZCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gbG9jYWwgY2hlY2tib3ggaGVhZGVyIGNoZWNrXHJcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMudmFycy5yZXF1ZXN0SWRzICYmIEV4dGVuc2lvbi5zZWxlY3RlZFJvd3MubGVuZ3RoIDwgMSkge1xyXG5cdFx0XHRcdFx0XHQvLyByZW1vdmUgc2VsZWN0IGFsbCBjaGVja2JveCwgaWYgdGhlcmUgaXMgbm8gY2hlY2tlZCBjaGVja2JveCBsZWZ0XHJcblx0XHRcdFx0XHRcdCQoZGF0YXRhYmxlLnRhYmxlSGVhZCkuZmluZCgnLicgKyBwZnggKyAnY2hlY2tib3gtYWxsID4gW3R5cGU9XCJjaGVja2JveFwiXScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dmFyIHN0b3JhZ2UgPSB7fTtcclxuXHRcdFx0XHRcdHN0b3JhZ2VbJ3NlbGVjdGVkUm93cyddID0gRXh0ZW5zaW9uLnNlbGVjdGVkUm93cy5maWx0ZXIoRXh0ZW5zaW9uLnVuaXF1ZSk7XHJcblx0XHRcdFx0XHRzdG9yYWdlWyd1bnNlbGVjdGVkUm93cyddID0gRXh0ZW5zaW9uLnVuc2VsZWN0ZWRSb3dzLmZpbHRlcihFeHRlbnNpb24udW5pcXVlKTtcclxuXHRcdFx0XHRcdGRhdGF0YWJsZS5zdGF0ZUtlZXAoJ2NoZWNrYm94Jywgc3RvcmFnZSk7XHJcblxyXG5cdFx0XHRcdFx0JChkYXRhdGFibGUpLnRyaWdnZXIocGZ4ICsgJ2RhdGF0YWJsZS1vbi1jbGljay1jaGVja2JveCcsIFskKHRoaXMpXSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHR1bmlxdWU6IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgc2VsZikge1xyXG5cdFx0XHRcdHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGluaXRTZWxlY3Q6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIHNlbGVjdGVkIGFsbCByb3dzIGZyb20gc2VydmVyXHJcblx0XHRcdFx0aWYgKEV4dGVuc2lvbi5zZWxlY3RlZEFsbFJvd3MgJiYgb3B0aW9ucy52YXJzLnJlcXVlc3RJZHMpIHtcclxuXHRcdFx0XHRcdGlmICghZGF0YXRhYmxlLmhhc0NsYXNzKHBmeCArICdkYXRhdGFibGUtZXJyb3InKSkge1xyXG5cdFx0XHRcdFx0XHQvLyBzZXQgaGVhZGVyIHNlbGVjdCBhbGwgY2hlY2tib3ggY2hlY2tlZFxyXG5cdFx0XHRcdFx0XHQkKGRhdGF0YWJsZS50YWJsZUhlYWQpLmZpbmQoJy4nICsgcGZ4ICsgJ2NoZWNrYm94LWFsbCA+IFt0eXBlPVwiY2hlY2tib3hcIl0nKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gc2V0IGFsbCBjaGVja2JveCBpbiB0YWJsZSBib2R5XHJcblx0XHRcdFx0XHRkYXRhdGFibGUuc2V0QWN0aXZlQWxsKHRydWUpO1xyXG5cclxuXHRcdFx0XHRcdC8vIHJlbW92ZSB1bnNlbGVjdGVkIHJvd3NcclxuXHRcdFx0XHRcdEV4dGVuc2lvbi51bnNlbGVjdGVkUm93cy5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XHJcblx0XHRcdFx0XHRcdGRhdGF0YWJsZS5zZXRJbmFjdGl2ZShpZCk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gc2luZ2xlIGNoZWNrIGZvciBzZXJ2ZXIgYW5kIGxvY2FsXHJcblx0XHRcdFx0XHRFeHRlbnNpb24uc2VsZWN0ZWRSb3dzLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcclxuXHRcdFx0XHRcdFx0ZGF0YXRhYmxlLnNldEFjdGl2ZShpZCk7XHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHQvLyBsb2NhbCBjaGVja2JveDsgY2hlY2sgaWYgYWxsIGNoZWNrYm94ZXMgb2YgY3VycmVjdCBwYWdlIGFyZSBjaGVja2VkXHJcblx0XHRcdFx0XHRpZiAoIWRhdGF0YWJsZS5oYXNDbGFzcyhwZnggKyAnZGF0YXRhYmxlLWVycm9yJykgJiYgJChkYXRhdGFibGUudGFibGVCb2R5KS5maW5kKCcuJyArIHBmeCArICdjaGVja2JveC1zaW5nbGUgPiBbdHlwZT1cImNoZWNrYm94XCJdJykubm90KCc6Y2hlY2tlZCcpLmxlbmd0aCA8IDEpIHtcclxuXHRcdFx0XHRcdFx0Ly8gc2V0IGhlYWRlciBzZWxlY3QgYWxsIGNoZWNrYm94IGNoZWNrZWRcclxuXHRcdFx0XHRcdFx0JChkYXRhdGFibGUudGFibGVIZWFkKS5maW5kKCcuJyArIHBmeCArICdjaGVja2JveC1hbGwgPiBbdHlwZT1cImNoZWNrYm94XCJdJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBDaGVjayBpZiBzZWxlY3RvciBpcyBlbmFibGVkIGZyb20gb3B0aW9uc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0c2VsZWN0b3JFbmFibGVkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gJC5ncmVwKGRhdGF0YWJsZS5vcHRpb25zLmNvbHVtbnMsIGZ1bmN0aW9uKG4sIGkpIHtcclxuXHRcdFx0XHRcdHJldHVybiBuLnNlbGVjdG9yIHx8IGZhbHNlO1xyXG5cdFx0XHRcdH0pWzBdO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0aW5pdFZhcnM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdC8vIGdldCBzaW5nbGUgc2VsZWN0L3Vuc2VsZWN0IGZyb20gbG9jYWxzdG9yYWdlXHJcblx0XHRcdFx0dmFyIHN0b3JhZ2UgPSBkYXRhdGFibGUuc3RhdGVHZXQoJ2NoZWNrYm94Jyk7XHJcblx0XHRcdFx0aWYgKHR5cGVvZiBzdG9yYWdlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdFx0RXh0ZW5zaW9uLnNlbGVjdGVkUm93cyA9IHN0b3JhZ2VbJ3NlbGVjdGVkUm93cyddIHx8IFtdO1xyXG5cdFx0XHRcdFx0RXh0ZW5zaW9uLnVuc2VsZWN0ZWRSb3dzID0gc3RvcmFnZVsndW5zZWxlY3RlZFJvd3MnXSB8fCBbXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRnZXRTZWxlY3RlZElkOiBmdW5jdGlvbihwYXRoKSB7XHJcblx0XHRcdFx0RXh0ZW5zaW9uLmluaXRWYXJzKCk7XHJcblxyXG5cdFx0XHRcdC8vIHNlcnZlciBzZWxlY3RlZCBhbGwgcm93c1xyXG5cdFx0XHRcdGlmIChFeHRlbnNpb24uc2VsZWN0ZWRBbGxSb3dzICYmIG9wdGlvbnMudmFycy5yZXF1ZXN0SWRzKSB7XHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdFx0XHRcdHBhdGggPSBvcHRpb25zLnZhcnMucm93SWRzO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdC8vIGlmIHNlbGVjdGVkIGFsbCByb3dzLCByZXR1cm4gaWQgZnJvbSByZXNwb25zZSBtZXRhXHJcblx0XHRcdFx0XHR2YXIgc2VsZWN0ZWRBbGxSb3dzID0gZGF0YXRhYmxlLmdldE9iamVjdChwYXRoLCBkYXRhdGFibGUubGFzdFJlc3BvbnNlKSB8fCBbXTtcclxuXHJcblx0XHRcdFx0XHRpZiAoc2VsZWN0ZWRBbGxSb3dzLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIHNpbmdsZSB1bnNlbGVjdGVkIHJvd3MgZnJvbSBzZWxlY3RlZEFsbFJvd3MgaWRzIGZyb20gc2VydmVyIHJlc3BvbnNlIGVtdGFcclxuXHRcdFx0XHRcdFx0RXh0ZW5zaW9uLnVuc2VsZWN0ZWRSb3dzLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcclxuXHRcdFx0XHRcdFx0XHRzZWxlY3RlZEFsbFJvd3MgPSBFeHRlbnNpb24ucmVtb3ZlKHNlbGVjdGVkQWxsUm93cywgcGFyc2VJbnQoaWQpKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gJC51bmlxdWUoc2VsZWN0ZWRBbGxSb3dzKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIGVsc2UgcmV0dXJuIHNpbmdsZSBjaGVja2VkIHNlbGVjdGVkIHJvd3NcclxuXHRcdFx0XHRyZXR1cm4gRXh0ZW5zaW9uLnNlbGVjdGVkUm93cztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oYXJyYXksIGVsZW1lbnQpIHtcclxuXHRcdFx0XHRyZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRcdHJldHVybiBlICE9PSBlbGVtZW50O1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9LFxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBtYWtlIHRoZSBleHRlbnNpb24gYWNjZXNzaWJsZSBmcm9tIGRhdGF0YWJsZSBpbml0XHJcblx0XHRkYXRhdGFibGUuY2hlY2tib3ggPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIEV4dGVuc2lvbjtcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm5bcGx1Z2luTmFtZV0uY2hlY2tib3guZGVmYXVsdCwgb3B0aW9ucyk7XHJcblx0XHRcdEV4dGVuc2lvbi5pbml0LmFwcGx5KHRoaXMsIFtvcHRpb25zXSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRhdGF0YWJsZTtcclxuXHR9O1xyXG5cclxuXHQkLmZuW3BsdWdpbk5hbWVdLmNoZWNrYm94LmRlZmF1bHQgPSB7XHJcblx0XHR2YXJzOiB7XHJcblx0XHRcdC8vIHNlbGVjdCBhbGwgcm93cyBmbGFnIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlclxyXG5cdFx0XHRzZWxlY3RlZEFsbFJvd3M6ICdzZWxlY3RlZEFsbFJvd3MnLFxyXG5cdFx0XHQvLyByZXF1ZXN0IGlkIHBhcmFtZXRlcidzIG5hbWVcclxuXHRcdFx0cmVxdWVzdElkczogJ3JlcXVlc3RJZHMnLFxyXG5cdFx0XHQvLyByZXNwb25zZSBwYXRoIHRvIGFsbCByb3dzIGlkXHJcblx0XHRcdHJvd0lkczogJ21ldGEucm93SWRzJyxcclxuXHRcdH0sXHJcblx0fTtcclxuXHJcbn0oalF1ZXJ5KSk7XHJcbiIsInZhciBkZWZhdWx0cyA9IHtcclxuXHRsYXlvdXQ6IHtcclxuXHRcdGljb25zOiB7XHJcblx0XHRcdHBhZ2luYXRpb246IHtcclxuXHRcdFx0XHRuZXh0OiAnZmxhdGljb24yLW5leHQnLFxyXG5cdFx0XHRcdHByZXY6ICdmbGF0aWNvbjItYmFjaycsXHJcblx0XHRcdFx0Zmlyc3Q6ICdmbGF0aWNvbjItZmFzdC1iYWNrJyxcclxuXHRcdFx0XHRsYXN0OiAnZmxhdGljb24yLWZhc3QtbmV4dCcsXHJcblx0XHRcdFx0bW9yZTogJ2ZsYXRpY29uLW1vcmUtMScsXHJcblx0XHRcdH0sXHJcblx0XHRcdHJvd0RldGFpbDoge2V4cGFuZDogJ2ZhIGZhLWNhcmV0LWRvd24nLCBjb2xsYXBzZTogJ2ZhIGZhLWNhcmV0LXJpZ2h0J30sXHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuaWYgKEtUVXRpbC5pc1JUTCgpKSB7XHJcblx0ZGVmYXVsdHMgPSB7XHJcblx0XHRsYXlvdXQ6IHtcclxuXHRcdFx0aWNvbnM6IHtcclxuXHRcdFx0XHRwYWdpbmF0aW9uOiB7XHJcblx0XHRcdFx0XHRuZXh0OiAnZmxhdGljb24yLWJhY2snLFxyXG5cdFx0XHRcdFx0cHJldjogJ2ZsYXRpY29uMi1uZXh0JyxcclxuXHRcdFx0XHRcdGZpcnN0OiAnZmxhdGljb24yLWZhc3QtbmV4dCcsXHJcblx0XHRcdFx0XHRsYXN0OiAnZmxhdGljb24yLWZhc3QtYmFjaycsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRyb3dEZXRhaWw6IHtjb2xsYXBzZTogJ2ZhIGZhLWNhcmV0LWRvd24nLCBleHBhbmQ6ICdmYSBmYS1jYXJldC1yaWdodCd9LFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4kLmV4dGVuZCh0cnVlLCAkLmZuLktURGF0YXRhYmxlLmRlZmF1bHRzLCBkZWZhdWx0cyk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ29tcG9uZW50IERlZmluaXRpb24gXHJcbnZhciBLVERpYWxvZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIC8vIE1haW4gb2JqZWN0XHJcbiAgICB2YXIgdGhlID0gdGhpcztcclxuXHJcbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcclxuICAgIHZhciBlbGVtZW50O1xyXG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0Qm9keSgpO1xyXG5cclxuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgICdwbGFjZW1lbnQnIDogJ3RvcCBjZW50ZXInLFxyXG4gICAgICAgICd0eXBlJyAgOiAnbG9hZGVyJyxcclxuICAgICAgICAnd2lkdGgnIDogMTAwLFxyXG4gICAgICAgICdzdGF0ZScgOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgJ21lc3NhZ2UnIDogJ0xvYWRpbmcuLi4nXHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgUGx1Z2luID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0cnVjdFxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgUGx1Z2luLmluaXQob3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgc3VidG9nZ2xlIGNsaWNrIHRvZ2dsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcclxuICAgICAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhlLnN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2hvdyBkaWFsb2dcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc2hvdycpO1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7XHJcbiAgICAgICAgICAgIEtUVXRpbC5zZXRIVE1MKGVsZW1lbnQsIHRoZS5vcHRpb25zLm1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsZW1lbnQsICdkaWFsb2cgZGlhbG9nLXNob3duJyk7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCAnZGlhbG9nLScgKyB0aGUub3B0aW9ucy5zdGF0ZSk7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCAnZGlhbG9nLScgKyB0aGUub3B0aW9ucy50eXBlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ3RvcCBjZW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ2RpYWxvZy10b3AtY2VudGVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICB0aGUuc3RhdGUgPSAnc2hvd24nO1xyXG5cclxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc2hvd24nKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGlkZSBkaWFsb2dcclxuICAgICAgICAgKi9cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2hpZGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhlLnN0YXRlID0gJ2hpZGRlbic7XHJcblxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHJpZ2dlciBldmVudHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBldmVudFRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGUuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGUuZXZlbnRzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5uYW1lID09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQub25lID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmZpcmVkID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUuZXZlbnRzW2ldLmZpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24obmFtZSwgaGFuZGxlciwgb25lKSB7XHJcbiAgICAgICAgICAgIHRoZS5ldmVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcclxuICAgICAgICAgICAgICAgIG9uZTogb25lLFxyXG4gICAgICAgICAgICAgICAgZmlyZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAqL1xyXG5cclxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgc2hvd24gc3RhdGVcclxuICAgICAqL1xyXG4gICAgdGhlLnNob3duID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoZS5zdGF0ZSA9PSAnc2hvd24nO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGhpZGRlbiBzdGF0ZVxyXG4gICAgICovXHJcbiAgICB0aGUuaGlkZGVuID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoZS5zdGF0ZSA9PSAnaGlkZGVuJztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IGRpYWxvZ1xyXG4gICAgICovXHJcbiAgICB0aGUuc2hvdyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uc2hvdygpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZGUgZGlhbG9nXHJcbiAgICAgKi9cclxuICAgIHRoZS5oaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5oaWRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoIGV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyB7S1RUb2dnbGV9XHJcbiAgICAgKi9cclxuICAgIHRoZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCBldmVudCB0aGF0IHdpbGwgYmUgZmlyZWQgb25jZVxyXG4gICAgICogQHJldHVybnMge0tUVG9nZ2xlfVxyXG4gICAgICovXHJcbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENvbnN0cnVjdCBwbHVnaW5cclxuICAgIFBsdWdpbi5jb25zdHJ1Y3QuYXBwbHkodGhlLCBbb3B0aW9uc10pO1xyXG5cclxuICAgIHJldHVybiB0aGU7XHJcbn07XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1REaWFsb2c7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDb21wb25lbnQgRGVmaW5pdGlvblxyXG52YXIgS1RIZWFkZXIgPSBmdW5jdGlvbihlbGVtZW50SWQsIG9wdGlvbnMpIHtcclxuICAgIC8vIE1haW4gb2JqZWN0XHJcbiAgICB2YXIgdGhlID0gdGhpcztcclxuICAgIHZhciBpbml0ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gR2V0IGVsZW1lbnQgb2JqZWN0XHJcbiAgICB2YXIgZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGVsZW1lbnRJZCk7XHJcbiAgICB2YXIgYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG4gICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZWZhdWx0IG9wdGlvbnNcclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBvZmZzZXQ6IHtcclxuICAgICAgICAgICAgZGVza3RvcDogdHJ1ZSxcclxuICAgICAgICAgICAgdGFibGV0QW5kTW9iaWxlOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWxlc2VPblJldmVyc2U6IHtcclxuICAgICAgICAgICAgZGVza3RvcDogZmFsc2UsXHJcbiAgICAgICAgICAgIHRhYmxldEFuZE1vYmlsZTogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgUGx1Z2luID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJ1biBwbHVnaW5cclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RIZWFkZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ2hlYWRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ2hlYWRlcicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uaW5pdChvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBoZWFkZXJcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5idWlsZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKGVsZW1lbnQpLnNldCgnaGVhZGVyJywgdGhlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHN1YmhlYWRlciBjbGljayB0b2dnbGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RIZWFkZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGUuZXZlbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBtZXJnZSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgb3B0aW9uc1xyXG4gICAgICAgICAgICB0aGUub3B0aW9ucyA9IEtUVXRpbC5kZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVzZXQgaGVhZGVyXHJcbiAgICAgICAgICogQHJldHVybnMge0tUSGVhZGVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGV2ZW50VHJpZ2dlclN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdmFyIGxhc3RTY3JvbGxUb3AgPSAwO1xyXG5cclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IDAsIHN0LCBhdHRyTmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoS1RVdGlsLmlzQnJlYWtwb2ludERvd24oJ2xnJykgJiYgdGhlLm9wdGlvbnMub2Zmc2V0LnRhYmxldEFuZE1vYmlsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEtUVXRpbC5pc0JyZWFrcG9pbnRVcCgnbGcnKSAmJiB0aGUub3B0aW9ucy5vZmZzZXQuZGVza3RvcCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKEtUVXRpbC5pc0JyZWFrcG9pbnRVcCgnbGcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoZS5vcHRpb25zLm9mZnNldC5kZXNrdG9wO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChLVFV0aWwuaXNCcmVha3BvaW50RG93bignbGcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoZS5vcHRpb25zLm9mZnNldC50YWJsZXRBbmRNb2JpbGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc3QgPSBLVFV0aWwuZ2V0U2Nyb2xsVG9wKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgIChLVFV0aWwuaXNCcmVha3BvaW50RG93bignbGcnKSAmJiB0aGUub3B0aW9ucy5yZWxlc2VPblJldmVyc2UudGFibGV0QW5kTW9iaWxlKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykgJiYgdGhlLm9wdGlvbnMucmVsZXNlT25SZXZlcnNlLmRlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPiBvZmZzZXQgJiYgbGFzdFNjcm9sbFRvcCA8IHN0KSB7IC8vIGRvd24gc2Nyb2xsIG1vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuaGFzQXR0cmlidXRlKCdkYXRhLWhlYWRlci1zY3JvbGwnKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkuc2V0QXR0cmlidXRlKCdkYXRhLWhlYWRlci1zY3JvbGwnLCAnb24nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50VHJpZ2dlclN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdzY3JvbGxPbicsIHRoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFRyaWdnZXJTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gYmFjayBzY3JvbGwgbW9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtaGVhZGVyLXNjcm9sbCcpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1oZWFkZXItc2Nyb2xsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFRyaWdnZXJTdGF0ZSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc2Nyb2xsT2ZmJywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHJpZ2dlclN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNjcm9sbFRvcCA9IHN0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPiBvZmZzZXQpIHsgLy8gZG93biBzY3JvbGwgbW9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtaGVhZGVyLXNjcm9sbCcpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaGVhZGVyLXNjcm9sbCcsICdvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ3Njcm9sbE9uJywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHJpZ2dlclN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBiYWNrIHNjcm9sbCBtb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib2R5Lmhhc0F0dHJpYnV0ZSgnZGF0YS1oZWFkZXItc2Nyb2xsJykgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWhlYWRlci1zY3JvbGwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50VHJpZ2dlclN0YXRlID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdzY3JvbGxPZmYnLCB0aGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUcmlnZ2VyU3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUcmlnZ2VyIGV2ZW50c1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV2ZW50VHJpZ2dlcjogZnVuY3Rpb24obmFtZSwgYXJncykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoZS5ldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IHRoZS5ldmVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm9uZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5maXJlZCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlLmV2ZW50c1tpXS5maXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWRkRXZlbnQ6IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIsIG9uZSkge1xyXG4gICAgICAgICAgICB0aGUuZXZlbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXHJcbiAgICAgICAgICAgICAgICBvbmU6IG9uZSxcclxuICAgICAgICAgICAgICAgIGZpcmVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAqL1xyXG5cclxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgZXZlbnRcclxuICAgICAqL1xyXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFBsdWdpbiBDb25zdHJ1Y3Rpb24gKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvLyBSdW4gcGx1Z2luXHJcbiAgICBQbHVnaW4uY29uc3RydWN0LmFwcGx5KHRoZSwgW29wdGlvbnNdKTtcclxuXHJcbiAgICAvLyBJbml0IGRvbmVcclxuICAgIGluaXQgPSB0cnVlO1xyXG5cclxuICAgIC8vIFJldHVybiBwbHVnaW4gaW5zdGFuY2VcclxuICAgIHJldHVybiB0aGU7XHJcbn07XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RIZWFkZXI7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDb21wb25lbnQgRGVmaW5pdGlvbiBcclxudmFyIEtUSW1hZ2VJbnB1dCA9IGZ1bmN0aW9uKGVsZW1lbnRJZCwgb3B0aW9ucykge1xyXG4gICAgLy8gTWFpbiBvYmplY3RcclxuICAgIHZhciB0aGUgPSB0aGlzO1xyXG4gICAgdmFyIGluaXQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcclxuICAgIHZhciBlbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoZWxlbWVudElkKTtcclxuICAgIHZhciBib2R5ID0gS1RVdGlsLmdldEJvZHkoKTtcclxuXHJcbiAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zXHJcbiAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgZWRpdE1vZGU6IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgUGx1Z2luID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0cnVjdFxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKEtUVXRpbC5kYXRhKGVsZW1lbnQpLmhhcygnaW1hZ2VpbnB1dCcpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ2ltYWdlaW5wdXQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IG1lbnVcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5pbml0KG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGJ1aWxkIG1lbnVcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5idWlsZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKGVsZW1lbnQpLnNldCgnaW1hZ2VpbnB1dCcsIHRoZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5pdCBhdmF0YXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoZS5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhlLmlucHV0ID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7XHJcbiAgICAgICAgICAgIHRoZS53cmFwcGVyID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJy5pbWFnZS1pbnB1dC13cmFwcGVyJyk7XHJcbiAgICAgICAgICAgIHRoZS5jYW5jZWwgPSBLVFV0aWwuZmluZChlbGVtZW50LCAnW2RhdGEtYWN0aW9uPVwiY2FuY2VsXCJdJyk7XHJcbiAgICAgICAgICAgIHRoZS5yZW1vdmUgPSBLVFV0aWwuZmluZChlbGVtZW50LCAnW2RhdGEtYWN0aW9uPVwicmVtb3ZlXCJdJyk7XHJcbiAgICAgICAgICAgIHRoZS5zcmMgPSBLVFV0aWwuY3NzKHRoZS53cmFwcGVyLCAnYmFja2dyb3VuZEltYWdlJyk7XHJcbiAgICAgICAgICAgIHRoZS5oaWRkZW4gPSBLVFV0aWwuZmluZChlbGVtZW50LCAnaW5wdXRbdHlwZT1cImhpZGRlblwiXScpO1xyXG5cclxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcclxuICAgICAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEJ1aWxkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBIYW5kbGUgY2hhbmdlXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudCh0aGUuaW5wdXQsICdjaGFuZ2UnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmICh0aGUuaW5wdXQgJiYgdGhlLmlucHV0LmZpbGVzICYmIHRoZS5pbnB1dC5maWxlc1swXSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuXHQgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLndyYXBwZXIsICdiYWNrZ3JvdW5kLWltYWdlJywgJ3VybCgnK2UudGFyZ2V0LnJlc3VsdCArJyknKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTCh0aGUuaW5wdXQuZmlsZXNbMF0pO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKHRoZS5lbGVtZW50LCAnaW1hZ2UtaW5wdXQtY2hhbmdlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0aGUuZWxlbWVudCwgJ2ltYWdlLWlucHV0LWVtcHR5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcmUgY2hhbmdlIGV2ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignY2hhbmdlJyk7XHJcblx0ICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBjYW5jZWxcclxuICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KHRoZS5jYW5jZWwsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBGaXJlIGNhbmNlbCBldmVudFxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignY2FuY2VsJyk7XHJcblxyXG5cdCAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0aGUuZWxlbWVudCwgJ2ltYWdlLWlucHV0LWNoYW5nZWQnKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0aGUuZWxlbWVudCwgJ2ltYWdlLWlucHV0LWVtcHR5Jyk7XHJcblx0ICAgICAgICAgICAgS1RVdGlsLmNzcyh0aGUud3JhcHBlciwgJ2JhY2tncm91bmQtaW1hZ2UnLCB0aGUuc3JjKTtcclxuXHQgICAgICAgICAgICB0aGUuaW5wdXQudmFsdWUgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGUuaGlkZGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhlLmhpZGRlbi52YWx1ZSA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSByZW1vdmVcclxuICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KHRoZS5yZW1vdmUsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBGaXJlIGNhbmNlbCBldmVudFxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcigncmVtb3ZlJyk7XHJcblxyXG5cdCAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0aGUuZWxlbWVudCwgJ2ltYWdlLWlucHV0LWNoYW5nZWQnKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyh0aGUuZWxlbWVudCwgJ2ltYWdlLWlucHV0LWVtcHR5Jyk7XHJcblx0ICAgICAgICAgICAgS1RVdGlsLmNzcyh0aGUud3JhcHBlciwgJ2JhY2tncm91bmQtaW1hZ2UnLCBcIm5vbmVcIik7XHJcblx0ICAgICAgICAgICAgdGhlLmlucHV0LnZhbHVlID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhlLmhpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZS5oaWRkZW4udmFsdWUgPSBcIjFcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHJpZ2dlciBldmVudHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBldmVudFRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgLy9LVFV0aWwudHJpZ2dlckN1c3RvbUV2ZW50KG5hbWUpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoZS5ldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IHRoZS5ldmVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm9uZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5maXJlZCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlLmV2ZW50c1tpXS5maXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWRkRXZlbnQ6IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIsIG9uZSkge1xyXG4gICAgICAgICAgICB0aGUuZXZlbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXHJcbiAgICAgICAgICAgICAgICBvbmU6IG9uZSxcclxuICAgICAgICAgICAgICAgIGZpcmVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHVibGljIE1ldGhvZHMgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgZGVmYXVsdCBvcHRpb25zXHJcbiAgICAgKi9cclxuXHJcbiAgICB0aGUuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCBldmVudFxyXG4gICAgICovXHJcbiAgICB0aGUub24gPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5hZGRFdmVudChuYW1lLCBoYW5kbGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2ggZXZlbnQgdGhhdCB3aWxsIGJlIGZpcmVkIG9uY2VcclxuICAgICAqL1xyXG4gICAgdGhlLm9uZSA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDb25zdHJ1Y3QgcGx1Z2luXHJcbiAgICBQbHVnaW4uY29uc3RydWN0LmFwcGx5KHRoZSwgW29wdGlvbnNdKTtcclxuXHJcbiAgICByZXR1cm4gdGhlO1xyXG59O1xyXG5cclxuLy8gd2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEtUSW1hZ2VJbnB1dDtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENvbXBvbmVudCBEZWZpbml0aW9uXHJcbnZhciBLVE1lbnUgPSBmdW5jdGlvbihlbGVtZW50SWQsIG9wdGlvbnMpIHtcclxuICAgIC8vIE1haW4gb2JqZWN0XHJcbiAgICB2YXIgdGhlID0gdGhpcztcclxuICAgIHZhciBpbml0ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gR2V0IGVsZW1lbnQgb2JqZWN0XHJcbiAgICB2YXIgZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGVsZW1lbnRJZCk7XHJcbiAgICB2YXIgYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG4gICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgIC8vIHNjcm9sbGFibGUgYXJlYSB3aXRoIFBlcmZlY3QgU2Nyb2xsXHJcbiAgICAgICAgc2Nyb2xsOiB7XHJcbiAgICAgICAgICAgIHJlbWVtYmVyUG9zaXRpb246IGZhbHNlXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gYWNjb3JkaW9uIHN1Ym1lbnUgbW9kZVxyXG4gICAgICAgIGFjY29yZGlvbjoge1xyXG4gICAgICAgICAgICBzbGlkZVNwZWVkOiAyMDAsIC8vIGFjY29yZGlvbiB0b2dnbGUgc2xpZGUgc3BlZWQgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgICAgIGF1dG9TY3JvbGw6IGZhbHNlLCAvLyBlbmFibGUgYXV0byBzY3JvbGxpbmcoZm9jdXMpIHRvIHRoZSBjbGlja2VkIG1lbnUgaXRlbVxyXG4gICAgICAgICAgICBhdXRvU2Nyb2xsU3BlZWQ6IDEyMDAsXHJcbiAgICAgICAgICAgIGV4cGFuZEFsbDogdHJ1ZSAvLyBhbGxvdyBoYXZpbmcgbXVsdGlwbGUgZXhwYW5kZWQgYWNjb3JkaW9ucyBpbiB0aGUgbWVudVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIGRyb3Bkb3duIHN1Ym1lbnUgbW9kZVxyXG4gICAgICAgIGRyb3Bkb3duOiB7XHJcbiAgICAgICAgICAgIHRpbWVvdXQ6IDUwMCAvLyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBzaG93IGFuZCBoaWRlIHRoZSBob3ZlcmFibGUgc3VibWVudSBkcm9wZG93blxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHZhciBQbHVnaW4gPSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUnVuIHBsdWdpblxyXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ21lbnUnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhlID0gS1RVdGlsLmRhdGEoZWxlbWVudCkuZ2V0KCdtZW51Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXNldCBtZW51XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uaW5pdChvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyByZXNldCBtZW51XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4ucmVzZXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBtZW51XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uYnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbGVtZW50KS5zZXQoJ21lbnUnLCB0aGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgc3VibWVudSBjbGljayB0b2dnbGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhlLmV2ZW50SGFuZGxlcnMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8vIG1lcmdlIGRlZmF1bHQgYW5kIHVzZXIgZGVmaW5lZCBvcHRpb25zXHJcbiAgICAgICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHBhdXNlIG1lbnVcclxuICAgICAgICAgICAgdGhlLnBhdXNlRHJvcGRvd25Ib3ZlclRpbWUgPSAwO1xyXG5cclxuICAgICAgICAgICAgdGhlLnVpZCA9IEtUVXRpbC5nZXRVbmlxdWVJRCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICAvLyBtZXJnZSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgb3B0aW9uc1xyXG4gICAgICAgICAgICB0aGUub3B0aW9ucyA9IEtUVXRpbC5kZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAvLyBwYXVzZSBtZW51XHJcbiAgICAgICAgICAgIHRoZS5wYXVzZURyb3Bkb3duSG92ZXJUaW1lID0gMDtcclxuXHJcbiAgICAgICAgICAgICAvLyByZXNldCBtZW51XHJcbiAgICAgICAgICAgIFBsdWdpbi5yZXNldCgpO1xyXG5cclxuICAgICAgICAgICAgdGhlLmV2ZW50SGFuZGxlcnMgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJ1aWxkIG1lbnVcclxuICAgICAgICAgICAgUGx1Z2luLmJ1aWxkKCk7XHJcblxyXG4gICAgICAgICAgICBLVFV0aWwuZGF0YShlbGVtZW50KS5zZXQoJ21lbnUnLCB0aGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbG9hZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAvLyByZXNldCBtZW51XHJcbiAgICAgICAgICAgIFBsdWdpbi5yZXNldCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gYnVpbGQgbWVudVxyXG4gICAgICAgICAgICBQbHVnaW4uYnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlc2V0IHN1Ym1lbnUgcHJvcHNcclxuICAgICAgICAgICAgUGx1Z2luLnJlc2V0U3VibWVudVByb3BzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVzZXQgbWVudVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBHZW5lcmFsIGFjY29yZGlvbiBzdWJtZW51IHRvZ2dsZVxyXG4gICAgICAgICAgICB0aGUuZXZlbnRIYW5kbGVyc1snZXZlbnRfMSddID0gS1RVdGlsLm9uKCBlbGVtZW50LCAnLm1lbnUtdG9nZ2xlJywgJ2NsaWNrJywgUGx1Z2luLmhhbmRsZVN1Ym1lbnVBY2NvcmRpb24pO1xyXG5cclxuICAgICAgICAgICAgLy8gRHJvcGRvd24gbW9kZShob3ZlcmFibGUpXHJcbiAgICAgICAgICAgIGlmIChQbHVnaW4uZ2V0U3VibWVudU1vZGUoKSA9PT0gJ2Ryb3Bkb3duJyB8fCBQbHVnaW4uaXNDb25kaXRpb25hbFN1Ym1lbnVEcm9wZG93bigpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkcm9wZG93biBzdWJtZW51IC0gaG92ZXIgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICB0aGUuZXZlbnRIYW5kbGVyc1snZXZlbnRfMiddID0gS1RVdGlsLm9uKCBlbGVtZW50LCAnW2RhdGEtbWVudS10b2dnbGU9XCJob3ZlclwiXScsICdtb3VzZW92ZXInLCBQbHVnaW4uaGFuZGxlU3VibWVudURyb2Rvd25Ib3ZlckVudGVyKTtcclxuICAgICAgICAgICAgICAgIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF8zJ10gPSBLVFV0aWwub24oIGVsZW1lbnQsICdbZGF0YS1tZW51LXRvZ2dsZT1cImhvdmVyXCJdJywgJ21vdXNlb3V0JywgUGx1Z2luLmhhbmRsZVN1Ym1lbnVEcm9kb3duSG92ZXJFeGl0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBkcm9wZG93biBzdWJtZW51IC0gY2xpY2sgdG9nZ2xlXHJcbiAgICAgICAgICAgICAgICB0aGUuZXZlbnRIYW5kbGVyc1snZXZlbnRfNCddID0gS1RVdGlsLm9uKCBlbGVtZW50LCAnW2RhdGEtbWVudS10b2dnbGU9XCJjbGlja1wiXSA+IC5tZW51LXRvZ2dsZSwgW2RhdGEtbWVudS10b2dnbGU9XCJjbGlja1wiXSA+IC5tZW51LWxpbmsgLm1lbnUtdG9nZ2xlJywgJ2NsaWNrJywgUGx1Z2luLmhhbmRsZVN1Ym1lbnVEcm9wZG93bkNsaWNrKTtcclxuICAgICAgICAgICAgICAgIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF81J10gPSBLVFV0aWwub24oIGVsZW1lbnQsICdbZGF0YS1tZW51LXRvZ2dsZT1cInRhYlwiXSA+IC5tZW51LXRvZ2dsZSwgW2RhdGEtbWVudS10b2dnbGU9XCJ0YWJcIl0gPiAubWVudS1saW5rIC5tZW51LXRvZ2dsZScsICdjbGljaycsIFBsdWdpbi5oYW5kbGVTdWJtZW51RHJvcGRvd25UYWJDbGljayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBnZW5lcmFsIGxpbmsgY2xpY2tcclxuICAgICAgICAgICAgdGhlLmV2ZW50SGFuZGxlcnNbJ2V2ZW50XzYnXSA9IEtUVXRpbC5vbihlbGVtZW50LCAnLm1lbnUtaXRlbSA+IC5tZW51LWxpbms6bm90KC5tZW51LXRvZ2dsZSk6bm90KC5tZW51LWxpbmstdG9nZ2xlLXNraXApJywgJ2NsaWNrJywgUGx1Z2luLmhhbmRsZUxpbmtDbGljayk7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0IHNjcm9sbGFibGUgbWVudVxyXG4gICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMuc2Nyb2xsICYmIHRoZS5vcHRpb25zLnNjcm9sbC5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5zY3JvbGxJbml0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXNldCBtZW51XHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIEtUVXRpbC5vZmYoIGVsZW1lbnQsICdjbGljaycsIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF8xJ10pO1xyXG5cclxuICAgICAgICAgICAgLy8gZHJvcGRvd24gc3VibWVudSAtIGhvdmVyIHRvZ2dsZVxyXG4gICAgICAgICAgICBLVFV0aWwub2ZmKCBlbGVtZW50LCAnbW91c2VvdmVyJywgdGhlLmV2ZW50SGFuZGxlcnNbJ2V2ZW50XzInXSk7XHJcbiAgICAgICAgICAgIEtUVXRpbC5vZmYoIGVsZW1lbnQsICdtb3VzZW91dCcsIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF8zJ10pO1xyXG5cclxuICAgICAgICAgICAgLy8gZHJvcGRvd24gc3VibWVudSAtIGNsaWNrIHRvZ2dsZVxyXG4gICAgICAgICAgICBLVFV0aWwub2ZmKCBlbGVtZW50LCAnY2xpY2snLCB0aGUuZXZlbnRIYW5kbGVyc1snZXZlbnRfNCddKTtcclxuICAgICAgICAgICAgS1RVdGlsLm9mZiggZWxlbWVudCwgJ2NsaWNrJywgdGhlLmV2ZW50SGFuZGxlcnNbJ2V2ZW50XzUnXSk7XHJcblxyXG4gICAgICAgICAgICAvLyBoYW5kbGUgbGluayBjbGlja1xyXG4gICAgICAgICAgICBLVFV0aWwub2ZmKGVsZW1lbnQsICdjbGljaycsIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF82J10pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluaXQgc2Nyb2xsIG1lbnVcclxuICAgICAgICAgKlxyXG4gICAgICAgICovXHJcbiAgICAgICAgc2Nyb2xsSW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICggdGhlLm9wdGlvbnMuc2Nyb2xsICYmIHRoZS5vcHRpb25zLnNjcm9sbC5oZWlnaHQgKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsRGVzdHJveShlbGVtZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KGVsZW1lbnQsIHttb2JpbGVOYXRpdmVTY3JvbGw6IHRydWUsIHdpbmRvd1Njcm9sbDogZmFsc2UsIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLCBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsIGhlaWdodDogdGhlLm9wdGlvbnMuc2Nyb2xsLmhlaWdodCwgcmVtZW1iZXJQb3NpdGlvbjogdGhlLm9wdGlvbnMuc2Nyb2xsLnJlbWVtYmVyUG9zaXRpb259KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxEZXN0cm95KGVsZW1lbnQsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVXBkYXRlIHNjcm9sbCBtZW51XHJcbiAgICAgICAgKi9cclxuICAgICAgICBzY3JvbGxVcGRhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIHRoZS5vcHRpb25zLnNjcm9sbCAmJiB0aGUub3B0aW9ucy5zY3JvbGwuaGVpZ2h0ICkge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFVwZGF0ZShlbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNjcm9sbCB0b3BcclxuICAgICAgICAqL1xyXG4gICAgICAgIHNjcm9sbFRvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICggdGhlLm9wdGlvbnMuc2Nyb2xsICYmIHRoZS5vcHRpb25zLnNjcm9sbC5oZWlnaHQgKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVG9wKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0IHN1Ym1lbnUgbW9kZSBmb3IgY3VycmVudCBicmVha3BvaW50IGFuZCBtZW51IHN0YXRlXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRTdWJtZW51TW9kZTogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgaWYgKCBLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgS1RVdGlsLmhhc0F0dHIoZWwsICdkYXRhLW1lbnUtdG9nZ2xlJykgJiYgS1RVdGlsLmF0dHIoZWwsICdkYXRhLW1lbnUtdG9nZ2xlJykgPT0gJ2hvdmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZHJvcGRvd24nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggS1RVdGlsLmlzc2V0KHRoZS5vcHRpb25zLnN1Ym1lbnUsICdkZXNrdG9wLnN0YXRlLmJvZHknKSApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIEtUVXRpbC5oYXNDbGFzc2VzKGJvZHksIHRoZS5vcHRpb25zLnN1Ym1lbnUuZGVza3RvcC5zdGF0ZS5ib2R5KSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoZS5vcHRpb25zLnN1Ym1lbnUuZGVza3RvcC5zdGF0ZS5tb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGUub3B0aW9ucy5zdWJtZW51LmRlc2t0b3AuZGVmYXVsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBLVFV0aWwuaXNzZXQodGhlLm9wdGlvbnMuc3VibWVudSwgJ2Rlc2t0b3AnKSApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhlLm9wdGlvbnMuc3VibWVudS5kZXNrdG9wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBLVFV0aWwuaXNCcmVha3BvaW50VXAoJ21kJykgJiYgS1RVdGlsLmlzQnJlYWtwb2ludERvd24oJ2xnJykgJiYgS1RVdGlsLmlzc2V0KHRoZS5vcHRpb25zLnN1Ym1lbnUsICd0YWJsZXQnKSApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGUub3B0aW9ucy5zdWJtZW51LnRhYmxldDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICggS1RVdGlsLmlzQnJlYWtwb2ludERvd24oJ21kJykgJiYgS1RVdGlsLmlzc2V0KHRoZS5vcHRpb25zLnN1Ym1lbnUsICdtb2JpbGUnKSApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGUub3B0aW9ucy5zdWJtZW51Lm1vYmlsZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldCBzdWJtZW51IG1vZGUgZm9yIGN1cnJlbnQgYnJlYWtwb2ludCBhbmQgbWVudSBzdGF0ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNDb25kaXRpb25hbFN1Ym1lbnVEcm9wZG93bjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICggS1RVdGlsLmlzQnJlYWtwb2ludFVwKCdsZycpICYmIEtUVXRpbC5pc3NldCh0aGUub3B0aW9ucy5zdWJtZW51LCAnZGVza3RvcC5zdGF0ZS5ib2R5JykgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXNldCBzdWJtZW51IGF0dHJpYnV0ZXNcclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlc2V0U3VibWVudVByb3BzOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJtZW51cyA9IEtUVXRpbC5maW5kQWxsKGVsZW1lbnQsICcubWVudS1zdWJtZW51Jyk7XHJcbiAgICAgICAgICAgIGlmICggc3VibWVudXMgKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3VibWVudXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3VibWVudSA9IHN1Ym1lbnVzWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHN1Ym1lbnUsICdkaXNwbGF5JywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3Moc3VibWVudSwgJ292ZXJmbG93JywgJycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3VibWVudS5oYXNBdHRyaWJ1dGUoJ2RhdGEtaG9yLWRpcmVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhzdWJtZW51LCAnbWVudS1zdWJtZW51LWxlZnQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKHN1Ym1lbnUsICdtZW51LXN1Ym1lbnUtcmlnaHQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKHN1Ym1lbnUsIHN1Ym1lbnUuZ2V0QXR0cmlidXRlKCdkYXRhLWhvci1kaXJlY3Rpb24nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGFuZGxlcyBzdWJtZW51IGhvdmVyIHRvZ2dsZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGFuZGxlU3VibWVudURyb2Rvd25Ib3ZlckVudGVyOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmICggUGx1Z2luLmdldFN1Ym1lbnVNb2RlKHRoaXMpID09PSAnYWNjb3JkaW9uJyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCB0aGUucmVzdW1lRHJvcGRvd25Ib3ZlcigpID09PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1ob3ZlcicpID09ICcxJyApIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWhvdmVyJyk7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXRpbWVvdXQnKSApO1xyXG4gICAgICAgICAgICAgICAgaXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtdGltZW91dCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uc2hvd1N1Ym1lbnVEcm9wZG93bihpdGVtKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHN1Ym1lbnUgaG92ZXIgdG9nZ2xlXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBoYW5kbGVTdWJtZW51RHJvZG93bkhvdmVyRXhpdDogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoIHRoZS5yZXN1bWVEcm9wZG93bkhvdmVyKCkgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIFBsdWdpbi5nZXRTdWJtZW51TW9kZSh0aGlzKSA9PT0gJ2FjY29yZGlvbicgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHRpbWUgPSB0aGUub3B0aW9ucy5kcm9wZG93bi50aW1lb3V0O1xyXG5cclxuICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1ob3ZlcicpID09ICcxJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bihpdGVtLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGltZSk7XHJcblxyXG4gICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1ob3ZlcicsICcxJyk7XHJcbiAgICAgICAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXRpbWVvdXQnLCB0aW1lb3V0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHN1Ym1lbnUgY2xpY2sgdG9nZ2xlXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBoYW5kbGVTdWJtZW51RHJvcGRvd25DbGljazogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoIFBsdWdpbi5nZXRTdWJtZW51TW9kZSh0aGlzKSA9PT0gJ2FjY29yZGlvbicgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5jbG9zZXN0KCcubWVudS1pdGVtJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdzdWJtZW51VG9nZ2xlJywgdGhpcywgZSk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWVudS1zdWJtZW51LW1vZGUnKSA9PSAnYWNjb3JkaW9uJyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBLVFV0aWwuaGFzQ2xhc3MoaXRlbSwgJ21lbnUtaXRlbS1ob3ZlcicpID09PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhpdGVtLCAnbWVudS1pdGVtLW9wZW4tZHJvcGRvd24nKTtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5zaG93U3VibWVudURyb3Bkb3duKGl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGl0ZW0sICdtZW51LWl0ZW0tb3Blbi1kcm9wZG93bicgKTtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5oaWRlU3VibWVudURyb3Bkb3duKGl0ZW0sIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGFuZGxlcyB0YWIgY2xpY2sgdG9nZ2xlXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBoYW5kbGVTdWJtZW51RHJvcGRvd25UYWJDbGljazogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBpZiAoUGx1Z2luLmdldFN1Ym1lbnVNb2RlKHRoaXMpID09PSAnYWNjb3JkaW9uJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5jbG9zZXN0KCcubWVudS1pdGVtJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdzdWJtZW51VG9nZ2xlJywgdGhpcywgZSk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1tZW51LXN1Ym1lbnUtbW9kZScpID09ICdhY2NvcmRpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuaGFzQ2xhc3MoaXRlbSwgJ21lbnUtaXRlbS1ob3ZlcicpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoaXRlbSwgJ21lbnUtaXRlbS1vcGVuLWRyb3Bkb3duJyk7XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uc2hvd1N1Ym1lbnVEcm9wZG93bihpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgbGluayBjbGlja1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGFuZGxlTGlua0NsaWNrOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJtZW51ID0gdGhpcy5jbG9zZXN0KCcubWVudS1pdGVtLm1lbnUtaXRlbS1zdWJtZW51Jyk7XHJcblxyXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdsaW5rQ2xpY2snLCB0aGlzLCBlKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBzdWJtZW51ICYmIFBsdWdpbi5nZXRTdWJtZW51TW9kZShzdWJtZW51KSA9PT0gJ2Ryb3Bkb3duJyApIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5oaWRlU3VibWVudURyb3Bkb3ducygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGFuZGxlcyBzdWJtZW51IGRyb3Bkb3duIGNsb3NlIG9uIGxpbmsgY2xpY2tcclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGhhbmRsZVN1Ym1lbnVEcm9wZG93bkNsb3NlOiBmdW5jdGlvbihlLCBlbCkge1xyXG4gICAgICAgICAgICAvLyBleGl0IGlmIGl0cyBub3Qgc3VibWVudSBkcm9wZG93biBtb2RlXHJcbiAgICAgICAgICAgIGlmIChQbHVnaW4uZ2V0U3VibWVudU1vZGUoZWwpID09PSAnYWNjb3JkaW9uJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc2hvd24gPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51LWl0ZW0ubWVudS1pdGVtLXN1Ym1lbnUubWVudS1pdGVtLWhvdmVyOm5vdCgubWVudS1pdGVtLXRhYnMpJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBjdXJyZW50bHkgY2xpY2tlZCBsaW5rJ3MgcGFyZW50IGl0ZW0gaGFcclxuICAgICAgICAgICAgaWYgKHNob3duLmxlbmd0aCA+IDAgJiYgS1RVdGlsLmhhc0NsYXNzKGVsLCAnbWVudS10b2dnbGUnKSA9PT0gZmFsc2UgJiYgZWwucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUtdG9nZ2xlJykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjbG9zZSBvcGVuZWQgZHJvcGRvd24gbWVudXNcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzaG93bi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5oaWRlU3VibWVudURyb3Bkb3duKHNob3duWzBdLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGhlbHBlciBmdW5jdGlvbnNcclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGhhbmRsZVN1Ym1lbnVBY2NvcmRpb246IGZ1bmN0aW9uKGUsIGVsKSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeTtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSBlbCA/IGVsIDogdGhpcztcclxuXHJcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgY2xpY2sgZXZlbnQgaGFuZGxlcnNcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFBsdWdpbi5ldmVudFRyaWdnZXIoJ3N1Ym1lbnVUb2dnbGUnLCB0aGlzLCBlKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBQbHVnaW4uZ2V0U3VibWVudU1vZGUoZWwpID09PSAnZHJvcGRvd24nICYmIChxdWVyeSA9IGl0ZW0uY2xvc2VzdCgnLm1lbnUtaXRlbScpICkgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocXVlcnkuZ2V0QXR0cmlidXRlKCdkYXRhLW1lbnUtc3VibWVudS1tb2RlJykgIT0gJ2FjY29yZGlvbicgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGxpID0gaXRlbS5jbG9zZXN0KCcubWVudS1pdGVtJyk7XHJcbiAgICAgICAgICAgIHZhciBzdWJtZW51ID0gS1RVdGlsLmNoaWxkKGxpLCAnLm1lbnUtc3VibWVudSwgLm1lbnUtaW5uZXInKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuaGFzQ2xhc3MoaXRlbS5jbG9zZXN0KCcubWVudS1pdGVtJyksICdtZW51LWl0ZW0tb3Blbi1hbHdheXMnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGxpICYmIHN1Ym1lbnUgKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3BlZWQgPSB0aGUub3B0aW9ucy5hY2NvcmRpb24uc2xpZGVTcGVlZDtcclxuICAgICAgICAgICAgICAgIHZhciBoYXNDbG9zYWJsZXMgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIEtUVXRpbC5oYXNDbGFzcyhsaSwgJ21lbnUtaXRlbS1vcGVuJykgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhpZGUgb3RoZXIgYWNjb3JkaW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggdGhlLm9wdGlvbnMuYWNjb3JkaW9uLmV4cGFuZEFsbCA9PT0gZmFsc2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJuYXYgPSBpdGVtLmNsb3Nlc3QoJy5tZW51LW5hdiwgLm1lbnUtc3VibmF2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9zYWJsZXMgPSBLVFV0aWwuY2hpbGRyZW4oc3VibmF2LCAnLm1lbnUtaXRlbS5tZW51LWl0ZW0tb3Blbi5tZW51LWl0ZW0tc3VibWVudTpub3QoLm1lbnUtaXRlbS1oZXJlKTpub3QoLm1lbnUtaXRlbS1vcGVuLWFsd2F5cyknKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc3VibmF2ICYmIGNsb3NhYmxlcyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjbG9zYWJsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxfID0gY2xvc2FibGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJtZW51XyA9IEtUVXRpbC5jaGlsZChlbF8sICcubWVudS1zdWJtZW51Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdWJtZW51XyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNsaWRlVXAoc3VibWVudV8sIHNwZWVkLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi5zY3JvbGxVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbF8sICdtZW51LWl0ZW0tb3BlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zbGlkZURvd24oc3VibWVudSwgc3BlZWQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4uc2Nyb2xsVG9JdGVtKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4uc2Nyb2xsVXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdzdWJtZW51VG9nZ2xlJywgc3VibWVudSwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhsaSwgJ21lbnUtaXRlbS1vcGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuc2xpZGVVcChzdWJtZW51LCBzcGVlZCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi5zY3JvbGxUb0l0ZW0oaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ3N1Ym1lbnVUb2dnbGUnLCBzdWJtZW51LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGxpLCAnbWVudS1pdGVtLW9wZW4nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHNjcm9sbCB0byBpdGVtIGZ1bmN0aW9uXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBzY3JvbGxUb0l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgLy8gaGFuZGxlIGF1dG8gc2Nyb2xsIGZvciBhY2NvcmRpb24gc3VibWVudXNcclxuICAgICAgICAgICAgaWYgKCBLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykgICYmIHRoZS5vcHRpb25zLmFjY29yZGlvbi5hdXRvU2Nyb2xsICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW1lbnUtc2Nyb2xsJykgIT09ICcxJyApIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUbyhpdGVtLCB0aGUub3B0aW9ucy5hY2NvcmRpb24uYXV0b1Njcm9sbFNwZWVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhpZGUgc3VibWVudSBkcm9wZG93blxyXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGlkZVN1Ym1lbnVEcm9wZG93bjogZnVuY3Rpb24oaXRlbSwgY2xhc3NBbHNvKSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBzdWJtZW51IGFjdGl2YXRpb24gY2xhc3NcclxuICAgICAgICAgICAgaWYgKCBjbGFzc0Fsc28gKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoaXRlbSwgJ21lbnUtaXRlbS1ob3ZlcicpO1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGl0ZW0sICdtZW51LWl0ZW0tYWN0aXZlLXRhYicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjbGVhciB0aW1lb3V0XHJcbiAgICAgICAgICAgIGl0ZW0ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWhvdmVyJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLW1lbnUtdG9nZ2xlLWNsYXNzJykgKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoYm9keSwgaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWVudS10b2dnbGUtY2xhc3MnKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGltZW91dCcpO1xyXG4gICAgICAgICAgICBpdGVtLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS10aW1lb3V0Jyk7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIaWRlIHN1Ym1lbnUgZHJvcGRvd25zXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBoaWRlU3VibWVudURyb3Bkb3duczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtcztcclxuICAgICAgICAgICAgaWYgKCBpdGVtcyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUtaXRlbS1zdWJtZW51Lm1lbnUtaXRlbS1ob3Zlcjpub3QoLm1lbnUtaXRlbS10YWJzKTpub3QoW2RhdGEtbWVudS10b2dnbGU9XCJ0YWJcIl0pJykgKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgY250ID0gaXRlbXMubGVuZ3RoOyBqIDwgY250OyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bihpdGVtc1tqXSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBoZWxwZXIgZnVuY3Rpb25zXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93U3VibWVudURyb3Bkb3duOiBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIC8vIGNsb3NlIGFjdGl2ZSBzdWJtZW51c1xyXG4gICAgICAgICAgICB2YXIgbGlzdCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnUtaXRlbS1zdWJtZW51Lm1lbnUtaXRlbS1ob3ZlciwgLm1lbnUtaXRlbS1zdWJtZW51Lm1lbnUtaXRlbS1hY3RpdmUtdGFiJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGxpc3QgKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IGxpc3RbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtICE9PSBlbCAmJiBlbC5jb250YWlucyhpdGVtKSA9PT0gZmFsc2UgJiYgaXRlbS5jb250YWlucyhlbCkgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bihlbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgc3VibWVudSBhY3RpdmF0aW9uIGNsYXNzXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhpdGVtLCAnbWVudS1pdGVtLWhvdmVyJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGFuZ2UgdGhlIGFsaWdubWVudCBvZiBzdWJtZW51IGlzIG9mZnNjcmVlbi5cclxuICAgICAgICAgICAgdmFyIHN1Ym1lbnUgPSBLVFV0aWwuZmluZChpdGVtLCAnLm1lbnUtc3VibWVudScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHN1Ym1lbnUgJiYgc3VibWVudS5oYXNBdHRyaWJ1dGUoJ2RhdGEtaG9yLWRpcmVjdGlvbicpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKEtUVXRpbC5oYXNDbGFzcyhzdWJtZW51LCAnbWVudS1zdWJtZW51LWxlZnQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Ym1lbnUuc2V0QXR0cmlidXRlKCdkYXRhLWhvci1kaXJlY3Rpb24nLCAnbWVudS1zdWJtZW51LWxlZnQnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoS1RVdGlsLmhhc0NsYXNzKHN1Ym1lbnUsICdtZW51LXN1Ym1lbnUtcmlnaHQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1Ym1lbnUuc2V0QXR0cmlidXRlKCdkYXRhLWhvci1kaXJlY3Rpb24nLCAnbWVudS1zdWJtZW51LXJpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggc3VibWVudSAmJiBLVFV0aWwuaXNPZmZzY3JlZW4oc3VibWVudSwgJ2xlZnQnLCAxNSkgPT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3Moc3VibWVudSwgJ21lbnUtc3VibWVudS1sZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3Moc3VibWVudSwgJ21lbnUtc3VibWVudS1yaWdodCcpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBzdWJtZW51ICYmIEtUVXRpbC5pc09mZnNjcmVlbihzdWJtZW51LCAncmlnaHQnLCAxNSkgPT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3Moc3VibWVudSwgJ21lbnUtc3VibWVudS1yaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKHN1Ym1lbnUsICdtZW51LXN1Ym1lbnUtbGVmdCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLW1lbnUtdG9nZ2xlLWNsYXNzJykgKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoYm9keSwgaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWVudS10b2dnbGUtY2xhc3MnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHN1Ym1lbnUgc2xpZGUgdG9nZ2xlXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjcmVhdGVTdWJtZW51RHJvcGRvd25DbGlja0Ryb3BvZmY6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeTtcclxuICAgICAgICAgICAgdmFyIHpJbmRleCA9IChxdWVyeSA9IEtUVXRpbC5jaGlsZChlbCwgJy5tZW51LXN1Ym1lbnUnKSA/IEtUVXRpbC5jc3MocXVlcnksICd6LWluZGV4JykgOiAwKSAtIDE7XHJcblxyXG4gICAgICAgICAgICB2YXIgZHJvcG9mZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJzxkaXYgY2xhc3M9XCJtZW51LWRyb3BvZmZcIiBzdHlsZT1cImJhY2tncm91bmQ6IHRyYW5zcGFyZW50OyBwb3NpdGlvbjogZml4ZWQ7IHRvcDogMDsgYm90dG9tOiAwOyBsZWZ0OiAwOyByaWdodDogMDsgei1pbmRleDogJyArIHpJbmRleCArICdcIj48L2Rpdj4nKTtcclxuXHJcbiAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZHJvcG9mZik7XHJcblxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQoZHJvcG9mZiwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bihlbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgc3VibWVudSBob3ZlciB0b2dnbGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBhdXNlRHJvcGRvd25Ib3ZlcjogZnVuY3Rpb24odGltZSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICB0aGUucGF1c2VEcm9wZG93bkhvdmVyVGltZSA9IGRhdGUuZ2V0VGltZSgpICsgdGltZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHN1Ym1lbnUgaG92ZXIgdG9nZ2xlXHJcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cclxuICAgICAgICAgKi9cclxuICAgICAgICByZXN1bWVEcm9wZG93bkhvdmVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChkYXRlLmdldFRpbWUoKSA+IHRoZS5wYXVzZURyb3Bkb3duSG92ZXJUaW1lID8gdHJ1ZSA6IGZhbHNlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXNldCBtZW51J3MgY3VycmVudCBhY3RpdmUgaXRlbVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVzZXRBY3RpdmVJdGVtOiBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBsaXN0O1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50cztcclxuXHJcbiAgICAgICAgICAgIGxpc3QgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51LWl0ZW0tYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gbGlzdFswXTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbCwgJ21lbnUtaXRlbS1hY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5oaWRlKCBLVFV0aWwuY2hpbGQoZWwsICcubWVudS1zdWJtZW51JykgKTtcclxuICAgICAgICAgICAgICAgIHBhcmVudHMgPSBLVFV0aWwucGFyZW50cyhlbCwgJy5tZW51LWl0ZW0tc3VibWVudScpIHx8IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGlfID0gMCwgbGVuXyA9IHBhcmVudHMubGVuZ3RoOyBpXyA8IGxlbl87IGlfKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxfID0gcGFyZW50c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoZWxfLCAnbWVudS1pdGVtLW9wZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuaGlkZSggS1RVdGlsLmNoaWxkKGVsXywgJy5tZW51LXN1Ym1lbnUnKSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjbG9zZSBvcGVuIHN1Ym1lbnVzXHJcbiAgICAgICAgICAgIGlmICggdGhlLm9wdGlvbnMuYWNjb3JkaW9uLmV4cGFuZEFsbCA9PT0gZmFsc2UgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGxpc3QgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51LWl0ZW0tb3BlbicpICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhwYXJlbnRzWzBdLCAnbWVudS1pdGVtLW9wZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXRzIG1lbnUncyBhY3RpdmUgaXRlbVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0QWN0aXZlSXRlbTogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAvLyByZXNldCBjdXJyZW50IGFjdGl2ZSBpdGVtXHJcbiAgICAgICAgICAgIFBsdWdpbi5yZXNldEFjdGl2ZUl0ZW0oKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRzID0gS1RVdGlsLnBhcmVudHMoaXRlbSwgJy5tZW51LWl0ZW0tc3VibWVudScpIHx8IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFyZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKHBhcmVudHNbaV0sICdtZW51LWl0ZW0tb3BlbicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoaXRlbSwgJ21lbnUtaXRlbS1hY3RpdmUnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHBhZ2UgYnJlYWRjcnVtYnMgZm9yIHRoZSBtZW51J3MgYWN0aXZlIGl0ZW1cclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldEJyZWFkY3J1bWJzOiBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeTtcclxuICAgICAgICAgICAgdmFyIGJyZWFkY3J1bWJzID0gW107XHJcbiAgICAgICAgICAgIHZhciBsaW5rID0gS1RVdGlsLmNoaWxkKGl0ZW0sICcubWVudS1saW5rJyk7XHJcblxyXG4gICAgICAgICAgICBicmVhZGNydW1icy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IChxdWVyeSA9IEtUVXRpbC5jaGlsZChsaW5rLCAnLm1lbnUtdGV4dCcpID8gcXVlcnkuaW5uZXJIVE1MIDogJycpLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IGxpbmsuZ2V0QXR0cmlidXRlKCd0aXRsZScpLFxyXG4gICAgICAgICAgICAgICAgaHJlZjogbGluay5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRzID0gS1RVdGlsLnBhcmVudHMoaXRlbSwgJy5tZW51LWl0ZW0tc3VibWVudScpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGFyZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1Ym1lbnVMaW5rID0gS1RVdGlsLmNoaWxkKHBhcmVudHNbaV0sICcubWVudS1saW5rJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogKHF1ZXJ5ID0gS1RVdGlsLmNoaWxkKHN1Ym1lbnVMaW5rLCAnLm1lbnUtdGV4dCcpID8gcXVlcnkuaW5uZXJIVE1MIDogJycpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzdWJtZW51TGluay5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogc3VibWVudUxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJylcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gIGJyZWFkY3J1bWJzLnJldmVyc2UoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHBhZ2UgdGl0bGUgZm9yIHRoZSBtZW51J3MgYWN0aXZlIGl0ZW1cclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFBhZ2VUaXRsZTogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKHF1ZXJ5ID0gS1RVdGlsLmNoaWxkKGl0ZW0sICcubWVudS10ZXh0JykgPyBxdWVyeS5pbm5lckhUTUwgOiAnJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHJpZ2dlciBldmVudHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBldmVudFRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUsIHRhcmdldCwgZSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoZS5ldmVudHMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGUuZXZlbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCBldmVudC5uYW1lID09IG5hbWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBldmVudC5vbmUgPT0gdHJ1ZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBldmVudC5maXJlZCA9PSBmYWxzZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZS5ldmVudHNbaV0uZmlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0YXJnZXQsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0YXJnZXQsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihuYW1lLCBoYW5kbGVyLCBvbmUpIHtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxyXG4gICAgICAgICAgICAgICAgb25lOiBvbmUsXHJcbiAgICAgICAgICAgICAgICBmaXJlZDogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoZS5ldmVudHNbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGUuZXZlbnRzW25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHVibGljIE1ldGhvZHMgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgZGVmYXVsdCBvcHRpb25zXHJcbiAgICAgKi9cclxuXHJcbiAgICB0aGUuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBzY3JvbGxcclxuICAgICAqL1xyXG4gICAgdGhlLnNjcm9sbFVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uc2Nyb2xsVXBkYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmUtaW5pdCBzY3JvbGxcclxuICAgICAqL1xyXG4gICAgdGhlLnNjcm9sbFJlSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uc2Nyb2xsSW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNjcm9sbCB0b3BcclxuICAgICAqL1xyXG4gICAgdGhlLnNjcm9sbFRvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uc2Nyb2xsVG9wKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGFjdGl2ZSBtZW51IGl0ZW1cclxuICAgICAqL1xyXG4gICAgdGhlLnNldEFjdGl2ZUl0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5zZXRBY3RpdmVJdGVtKGl0ZW0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGUucmVsb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5yZWxvYWQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhlLnVwZGF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLnVwZGF0ZShvcHRpb25zKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgYnJlYWRjcnVtYiBmb3IgbWVudSBpdGVtXHJcbiAgICAgKi9cclxuICAgIHRoZS5nZXRCcmVhZGNydW1icyA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmdldEJyZWFkY3J1bWJzKGl0ZW0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBwYWdlIHRpdGxlIGZvciBtZW51IGl0ZW1cclxuICAgICAqL1xyXG4gICAgdGhlLmdldFBhZ2VUaXRsZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmdldFBhZ2VUaXRsZShpdGVtKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgc3VibWVudSBtb2RlXHJcbiAgICAgKi9cclxuICAgIHRoZS5nZXRTdWJtZW51TW9kZSA9IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5nZXRTdWJtZW51TW9kZShlbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZSBkcm9wZG93blxyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgdGhlLmhpZGVEcm9wZG93biA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bihpdGVtLCB0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaWRlIGRyb3Bkb3duc1xyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgdGhlLmhpZGVEcm9wZG93bnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bnMoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNhYmxlIG1lbnUgZm9yIGdpdmVuIHRpbWVcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHRoZS5wYXVzZURyb3Bkb3duSG92ZXIgPSBmdW5jdGlvbih0aW1lKSB7XHJcbiAgICAgICAgUGx1Z2luLnBhdXNlRHJvcGRvd25Ib3Zlcih0aW1lKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNhYmxlIG1lbnUgZm9yIGdpdmVuIHRpbWVcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHRoZS5yZXN1bWVEcm9wZG93bkhvdmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5yZXN1bWVEcm9wZG93bkhvdmVyKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgZXZlbnRcclxuICAgICAqL1xyXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoZS5vZmYgPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5yZW1vdmVFdmVudChuYW1lKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhlLm9uZSA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQbHVnaW4gQ29uc3RydWN0aW9uICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgLy8gUnVuIHBsdWdpblxyXG4gICAgUGx1Z2luLmNvbnN0cnVjdC5hcHBseSh0aGUsIFtvcHRpb25zXSk7XHJcblxyXG4gICAgLy8gSGFuZGxlIHBsdWdpbiBvbiB3aW5kb3cgcmVzaXplXHJcbiAgICBLVFV0aWwuYWRkUmVzaXplSGFuZGxlcihmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoaW5pdCkge1xyXG4gICAgICAgICAgICB0aGUucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSW5pdCBkb25lXHJcbiAgICBpbml0ID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBSZXR1cm4gcGx1Z2luIGluc3RhbmNlXHJcbiAgICByZXR1cm4gdGhlO1xyXG59O1xyXG5cclxuLy8gd2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEtUTWVudTtcclxufVxyXG5cclxuLy8gUGx1Z2luIGdsb2JhbCBsYXp5IGluaXRpYWxpemF0aW9uXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0QnlUYWdOYW1lKCdib2R5JylbMF07XHJcbiAgICB2YXIgcXVlcnk7XHJcbiAgICBpZiAoIHF1ZXJ5ID0gYm9keS5xdWVyeVNlbGVjdG9yQWxsKCcubWVudS1uYXYgLm1lbnUtaXRlbS5tZW51LWl0ZW0tc3VibWVudS5tZW51LWl0ZW0taG92ZXI6bm90KC5tZW51LWl0ZW0tdGFicylbZGF0YS1tZW51LXRvZ2dsZT1cImNsaWNrXCJdJykgKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHF1ZXJ5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gcXVlcnlbaV0uY2xvc2VzdCgnLm1lbnUtbmF2JykucGFyZW50Tm9kZTtcclxuXHJcbiAgICAgICAgICAgIGlmICggZWxlbWVudCApIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ21lbnUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICF0aGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAhdGhlIHx8IHRoZS5nZXRTdWJtZW51TW9kZSgpICE9PSAnZHJvcGRvd24nICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggZS50YXJnZXQgIT09IGVsZW1lbnQgJiYgZWxlbWVudC5jb250YWlucyhlLnRhcmdldCkgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZS5oaWRlRHJvcGRvd25zKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENvbXBvbmVudCBEZWZpbml0aW9uXHJcbnZhciBLVE9mZmNhbnZhcyA9IGZ1bmN0aW9uKGVsZW1lbnRJZCwgb3B0aW9ucykge1xyXG4gICAgLy8gTWFpbiBvYmplY3RcclxuICAgIHZhciB0aGUgPSB0aGlzO1xyXG4gICAgdmFyIGluaXQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcclxuICAgIHZhciBlbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoZWxlbWVudElkKTtcclxuICAgIHZhciBib2R5ID0gS1RVdGlsLmdldEJvZHkoKTtcclxuXHJcbiAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zXHJcbiAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgYXR0ckN1c3RvbTogJydcclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHZhciBQbHVnaW4gPSB7XHJcbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ29mZmNhbnZhcycpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ29mZmNhbnZhcycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgb2ZmY2FudmFzXHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uaW5pdChvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBCdWlsZCBvZmZjYW52YXNcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5idWlsZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKGVsZW1lbnQpLnNldCgnb2ZmY2FudmFzJywgdGhlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoZS5ldmVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIG1lcmdlIGRlZmF1bHQgYW5kIHVzZXIgZGVmaW5lZCBvcHRpb25zXHJcbiAgICAgICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHRoZS5jbGFzc0Jhc2UgPSB0aGUub3B0aW9ucy5iYXNlQ2xhc3M7XHJcbiAgICAgICAgICAgIHRoZS5hdHRyQ3VzdG9tID0gdGhlLm9wdGlvbnMuYXR0ckN1c3RvbTtcclxuICAgICAgICAgICAgdGhlLmNsYXNzU2hvd24gPSB0aGUuY2xhc3NCYXNlICsgJy1vbic7XHJcbiAgICAgICAgICAgIHRoZS5jbGFzc092ZXJsYXkgPSB0aGUuY2xhc3NCYXNlICsgJy1vdmVybGF5JztcclxuICAgICAgICAgICAgdGhlLnRhcmdldDtcclxuXHJcbiAgICAgICAgICAgIHRoZS5zdGF0ZSA9IEtUVXRpbC5oYXNDbGFzcyhlbGVtZW50LCB0aGUuY2xhc3NTaG93bikgPyAnc2hvd24nIDogJ2hpZGRlbic7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAvLyBvZmZjYW52YXMgdG9nZ2xlXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy50b2dnbGVCeSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGUub3B0aW9ucy50b2dnbGVCeSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQoS1RVdGlsLmdldEJ5SWQodGhlLm9wdGlvbnMudG9nZ2xlQnkpLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlLnRhcmdldCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhlLm9wdGlvbnMudG9nZ2xlQnkgJiYgdGhlLm9wdGlvbnMudG9nZ2xlQnlbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMudG9nZ2xlQnlbMF0udGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhlLm9wdGlvbnMudG9nZ2xlQnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChLVFV0aWwuZ2V0QnlJZCh0aGUub3B0aW9ucy50b2dnbGVCeVtpXS50YXJnZXQpLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZS50YXJnZXQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiB0aGUub3B0aW9ucy50b2dnbGVCeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KEtUVXRpbC5nZXRCeUlkKHRoZS5vcHRpb25zLnRvZ2dsZUJ5W2ldKSwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUudGFyZ2V0ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4udG9nZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoZS5vcHRpb25zLnRvZ2dsZUJ5ICYmIHRoZS5vcHRpb25zLnRvZ2dsZUJ5LnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudCggS1RVdGlsLmdldEJ5SWQodGhlLm9wdGlvbnMudG9nZ2xlQnkudGFyZ2V0KSwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZS50YXJnZXQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4udG9nZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG9mZmNhbnZhcyBjbG9zZVxyXG4gICAgICAgICAgICB2YXIgY2xvc2VCeSA9IEtUVXRpbC5nZXRCeUlkKHRoZS5vcHRpb25zLmNsb3NlQnkpO1xyXG4gICAgICAgICAgICBpZiAoY2xvc2VCeSkge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KGNsb3NlQnksICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhlLnRhcmdldCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNTaG93bjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhlLnN0YXRlID09ICdzaG93bicgPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7O1xyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCd0b2dnbGUnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUuc3RhdGUgPT0gJ3Nob3duJykge1xyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoZS5zdGF0ZSA9PSAnc2hvd24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2JlZm9yZVNob3cnKTtcclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi50b2dnbGVDbGFzcygnc2hvdycpO1xyXG5cclxuICAgICAgICAgICAgLy8gT2ZmY2FudmFzIHBhbmVsXHJcbiAgICAgICAgICAgIEtUVXRpbC5hdHRyKGJvZHksICdkYXRhLW9mZmNhbnZhcy0nICsgdGhlLmNsYXNzQmFzZSwgJ29uJyk7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCB0aGUuY2xhc3NTaG93bik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhlLmF0dHJDdXN0b20ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmF0dHIoYm9keSwgJ2RhdGEtb2ZmY2FudmFzLScgKyB0aGUuY2xhc3NDdXN0b20sICdvbicpO1xyXG4gICAgICAgICAgICAgICAgLy9LVFV0aWwuYWRkQ2xhc3MoYm9keSwgdGhlLmNsYXNzQ3VzdG9tKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhlLnN0YXRlID0gJ3Nob3duJztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy5vdmVybGF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGUub3ZlcmxheSA9IEtUVXRpbC5pbnNlcnRBZnRlcihkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKSAsIGVsZW1lbnQgKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyh0aGUub3ZlcmxheSwgdGhlLmNsYXNzT3ZlcmxheSk7XHJcblxyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KHRoZS5vdmVybGF5LCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBQbHVnaW4uaGlkZSh0aGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlclNob3cnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoZS5zdGF0ZSA9PSAnaGlkZGVuJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdiZWZvcmVIaWRlJyk7XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4udG9nZ2xlQ2xhc3MoJ2hpZGUnKTtcclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVBdHRyKGJvZHksICdkYXRhLW9mZmNhbnZhcy0nICsgdGhlLmNsYXNzQmFzZSk7XHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LCB0aGUuY2xhc3NTaG93bik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhlLmF0dHJDdXN0b20ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUF0dHIoYm9keSwgJ2RhdGEtb2ZmY2FudmFzLScgKyB0aGUuYXR0ckN1c3RvbSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoZS5zdGF0ZSA9ICdoaWRkZW4nO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoZS5vcHRpb25zLm92ZXJsYXkgJiYgdGhlLm92ZXJsYXkpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmUodGhlLm92ZXJsYXkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlckhpZGUnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b2dnbGVDbGFzczogZnVuY3Rpb24obW9kZSkge1xyXG4gICAgICAgICAgICB2YXIgaWQgPSBLVFV0aWwuYXR0cih0aGUudGFyZ2V0LCAnaWQnKTtcclxuICAgICAgICAgICAgdmFyIHRvZ2dsZUJ5O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoZS5vcHRpb25zLnRvZ2dsZUJ5ICYmIHRoZS5vcHRpb25zLnRvZ2dsZUJ5WzBdICYmIHRoZS5vcHRpb25zLnRvZ2dsZUJ5WzBdLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiB0aGUub3B0aW9ucy50b2dnbGVCeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy50b2dnbGVCeVtpXS50YXJnZXQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUJ5ID0gdGhlLm9wdGlvbnMudG9nZ2xlQnlbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoZS5vcHRpb25zLnRvZ2dsZUJ5ICYmIHRoZS5vcHRpb25zLnRvZ2dsZUJ5LnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlQnkgPSB0aGUub3B0aW9ucy50b2dnbGVCeTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvZ2dsZUJ5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBLVFV0aWwuZ2V0QnlJZCh0b2dnbGVCeS50YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAnc2hvdycpIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWwsIHRvZ2dsZUJ5LnN0YXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2hpZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGVsLCB0b2dnbGVCeS5zdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBldmVudFRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGUuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGUuZXZlbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5vbmUgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZmlyZWQgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZS5ldmVudHNbaV0uZmlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihuYW1lLCBoYW5kbGVyLCBvbmUpIHtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxyXG4gICAgICAgICAgICAgICAgb25lOiBvbmUsXHJcbiAgICAgICAgICAgICAgICBmaXJlZDogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHVibGljIE1ldGhvZHMgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgZGVmYXVsdCBvcHRpb25zXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICB0aGUuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGNhbnZhcyBpcyBzaG93blxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHRoZS5pc1Nob3duID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5pc1Nob3duKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRvIGhpZGUgdGhlIGNhbnZhc1xyXG4gICAgICovXHJcbiAgICB0aGUuaGlkZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uaGlkZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0byBzaG93IHRoZSBjYW52YXNcclxuICAgICAqL1xyXG4gICAgdGhlLnNob3cgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLnNob3coKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2ggZXZlbnRcclxuICAgICAqIEBwYXJhbSBuYW1lXHJcbiAgICAgKiBAcGFyYW0gaGFuZGxlclxyXG4gICAgICovXHJcbiAgICB0aGUub24gPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5hZGRFdmVudChuYW1lLCBoYW5kbGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2ggZXZlbnQgdGhhdCB3aWxsIGJlIGZpcmVkIG9uY2VcclxuICAgICAqIEBwYXJhbSBuYW1lXHJcbiAgICAgKiBAcGFyYW0gaGFuZGxlclxyXG4gICAgICovXHJcbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFBsdWdpbiBDb25zdHJ1Y3Rpb24gKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvLyBSdW4gcGx1Z2luXHJcbiAgICBQbHVnaW4uY29uc3RydWN0LmFwcGx5KHRoZSwgW29wdGlvbnNdKTtcclxuXHJcbiAgICAvLyBJbml0IGRvbmVcclxuICAgIGluaXQgPSB0cnVlO1xyXG5cclxuICAgIC8vIFJldHVybiBwbHVnaW4gaW5zdGFuY2VcclxuICAgIHJldHVybiB0aGU7XHJcbn07XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RPZmZjYW52YXM7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBDb21wb25lbnQgRGVmaW5pdGlvblxyXG52YXIgS1RTY3JvbGx0b3AgPSBmdW5jdGlvbihlbGVtZW50SWQsIG9wdGlvbnMpIHtcclxuICAgIC8vIE1haW4gb2JqZWN0XHJcbiAgICB2YXIgdGhlID0gdGhpcztcclxuICAgIHZhciBpbml0ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gR2V0IGVsZW1lbnQgb2JqZWN0XHJcbiAgICB2YXIgZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGVsZW1lbnRJZCk7XHJcbiAgICB2YXIgYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG4gICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAgIG9mZnNldDogMzAwLFxyXG4gICAgICAgIHNwZWVkOiA2MDAwXHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgUGx1Z2luID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJ1biBwbHVnaW5cclxuICAgICAgICAgKiBAcmV0dXJucyB7bXNjcm9sbHRvcH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKEtUVXRpbC5kYXRhKGVsZW1lbnQpLmhhcygnc2Nyb2xsdG9wJykpIHtcclxuICAgICAgICAgICAgICAgIHRoZSA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgnc2Nyb2xsdG9wJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXNldCBzY3JvbGx0b3BcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5pbml0KG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGJ1aWxkIHNjcm9sbHRvcFxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmJ1aWxkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KCdzY3JvbGx0b3AnLCB0aGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgc3Vic2Nyb2xsdG9wIGNsaWNrIHRvZ2dsZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHttc2Nyb2xsdG9wfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcclxuICAgICAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRpbWVyO1xyXG5cclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLnRocm90dGxlKHRpbWVyLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBQbHVnaW4uaGFuZGxlKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAyMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSBidXR0b24gY2xpY2tcclxuICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KGVsZW1lbnQsICdjbGljaycsIFBsdWdpbi5zY3JvbGwpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgc2Nyb2xsdG9wIGNsaWNrIHNjcm9sbFRvcFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGhhbmRsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3MgPSBLVFV0aWwuZ2V0U2Nyb2xsVG9wKCk7IC8vIGN1cnJlbnQgdmVydGljYWwgcG9zaXRpb25cclxuXHJcbiAgICAgICAgICAgIGlmIChwb3MgPiB0aGUub3B0aW9ucy5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChib2R5Lmhhc0F0dHJpYnV0ZSgnZGF0YS1zY3JvbGx0b3AnKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5LnNldEF0dHJpYnV0ZSgnZGF0YS1zY3JvbGx0b3AnLCAnb24nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChib2R5Lmhhc0F0dHJpYnV0ZSgnZGF0YS1zY3JvbGx0b3AnKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNjcm9sbHRvcCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGFuZGxlcyBzY3JvbGx0b3AgY2xpY2sgc2Nyb2xsVG9wXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2Nyb2xsOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUb3AoMCwgdGhlLm9wdGlvbnMuc3BlZWQpO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUcmlnZ2VyIGV2ZW50c1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV2ZW50VHJpZ2dlcjogZnVuY3Rpb24obmFtZSwgYXJncykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoZS5ldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IHRoZS5ldmVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm9uZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5maXJlZCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlLmV2ZW50c1tpXS5maXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWRkRXZlbnQ6IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIsIG9uZSkge1xyXG4gICAgICAgICAgICB0aGUuZXZlbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXHJcbiAgICAgICAgICAgICAgICBvbmU6IG9uZSxcclxuICAgICAgICAgICAgICAgIGZpcmVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAqL1xyXG5cclxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHN1YnNjcm9sbHRvcCBtb2RlXHJcbiAgICAgKi9cclxuICAgIHRoZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBzY3JvbGx0b3AgY29udGVudFxyXG4gICAgICogQHJldHVybnMge21zY3JvbGx0b3B9XHJcbiAgICAgKi9cclxuICAgIHRoZS5vbmUgPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5hZGRFdmVudChuYW1lLCBoYW5kbGVyLCB0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUGx1Z2luIENvbnN0cnVjdGlvbiAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIC8vIFJ1biBwbHVnaW5cclxuICAgIFBsdWdpbi5jb25zdHJ1Y3QuYXBwbHkodGhlLCBbb3B0aW9uc10pO1xyXG5cclxuICAgIC8vIEluaXQgZG9uZVxyXG4gICAgaW5pdCA9IHRydWU7XHJcblxyXG4gICAgLy8gUmV0dXJuIHBsdWdpbiBpbnN0YW5jZVxyXG4gICAgcmV0dXJuIHRoZTtcclxufTtcclxuXHJcbi8vIHdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVFNjcm9sbHRvcDtcclxufSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ29tcG9uZW50IERlZmluaXRpb25cclxudmFyIEtUVG9nZ2xlID0gZnVuY3Rpb24oZWxlbWVudElkLCBvcHRpb25zKSB7XHJcbiAgICAvLyBNYWluIG9iamVjdFxyXG4gICAgdmFyIHRoZSA9IHRoaXM7XHJcbiAgICB2YXIgaW5pdCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIEdldCBlbGVtZW50IG9iamVjdFxyXG4gICAgdmFyIGVsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChlbGVtZW50SWQpO1xyXG5cclxuICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZWZhdWx0IG9wdGlvbnNcclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICB0YXJnZXRUb2dnbGVNb2RlOiAnY2xhc3MnIC8vIGNsYXNzfGF0dHJpYnV0ZVxyXG4gICAgfTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQcml2YXRlIE1ldGhvZHMgICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgdmFyIFBsdWdpbiA9IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb25zdHJ1Y3RcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ3RvZ2dsZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3RvZ2dsZScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgbWVudVxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmluaXQob3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgbWVudVxyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmJ1aWxkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KCd0b2dnbGUnLCB0aGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgc3VidG9nZ2xlIGNsaWNrIHRvZ2dsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhlLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgICAgICB0aGUuZXZlbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBNZXJnZSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgb3B0aW9uc1xyXG4gICAgICAgICAgICB0aGUub3B0aW9ucyA9IEtUVXRpbC5kZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAvL2FsZXJ0KHRoZS5vcHRpb25zLnRhcmdldC50YWdOYW1lKTtcclxuICAgICAgICAgICAgdGhlLnRhcmdldCA9IEtUVXRpbC5nZXRCeUlkKG9wdGlvbnMudGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgIHRoZS50YXJnZXRTdGF0ZSA9IHRoZS5vcHRpb25zLnRhcmdldFN0YXRlO1xyXG4gICAgICAgICAgICB0aGUudG9nZ2xlU3RhdGUgPSB0aGUub3B0aW9ucy50b2dnbGVTdGF0ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy50YXJnZXRUb2dnbGVNb2RlID09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgICAgIHRoZS5zdGF0ZSA9IEtUVXRpbC5oYXNDbGFzc2VzKHRoZS50YXJnZXQsIHRoZS50YXJnZXRTdGF0ZSkgPyAnb24nIDogJ29mZic7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGUuc3RhdGUgPSBLVFV0aWwuaGFzQXR0cih0aGUudGFyZ2V0LCAnZGF0YS0nICsgdGhlLnRhcmdldFN0YXRlKSA/IEtUVXRpbC5hdHRyKHRoZS50YXJnZXQsICdkYXRhLScgKyB0aGUudGFyZ2V0U3RhdGUpIDogJ29mZic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXR1cCB0b2dnbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBidWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChlbGVtZW50LCAnbW91c2V1cCcsIFBsdWdpbi50b2dnbGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgb2ZmY2FudmFzIGNsaWNrIHRvZ2dsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdiZWZvcmVUb2dnbGUnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUuc3RhdGUgPT0gJ29mZicpIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi50b2dnbGVPbigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgUGx1Z2luLnRvZ2dsZU9mZigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlclRvZ2dsZScpO1xyXG5cclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHRvZ2dsZSBjbGljayB0b2dnbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0b2dnbGVPbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2JlZm9yZU9uJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMudGFyZ2V0VG9nZ2xlTW9kZSA9PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3ModGhlLnRhcmdldCwgdGhlLnRhcmdldFN0YXRlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hdHRyKHRoZS50YXJnZXQsICdkYXRhLScgKyB0aGUudGFyZ2V0U3RhdGUsICdvbicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhlLnRvZ2dsZVN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgdGhlLnRvZ2dsZVN0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhlLnN0YXRlID0gJ29uJztcclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2FmdGVyT24nKTtcclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ3RvZ2dsZScpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHRvZ2dsZSBjbGljayB0b2dnbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0b2dnbGVPZmY6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdiZWZvcmVPZmYnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy50YXJnZXRUb2dnbGVNb2RlID09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0aGUudGFyZ2V0LCB0aGUudGFyZ2V0U3RhdGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUF0dHIodGhlLnRhcmdldCwgJ2RhdGEtJyArIHRoZS50YXJnZXRTdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUudG9nZ2xlU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LCB0aGUudG9nZ2xlU3RhdGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGUuc3RhdGUgPSAnb2ZmJztcclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2FmdGVyT2ZmJyk7XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCd0b2dnbGUnKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVHJpZ2dlciBldmVudHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBldmVudFRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGUuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGUuZXZlbnRzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5uYW1lID09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQub25lID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmZpcmVkID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUuZXZlbnRzW2ldLmZpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24obmFtZSwgaGFuZGxlciwgb25lKSB7XHJcbiAgICAgICAgICAgIHRoZS5ldmVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcclxuICAgICAgICAgICAgICAgIG9uZTogb25lLFxyXG4gICAgICAgICAgICAgICAgZmlyZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAqL1xyXG5cclxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRvZ2dsZSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICB0aGUuZ2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhlLnN0YXRlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZVxyXG4gICAgICovXHJcbiAgICB0aGUudG9nZ2xlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi50b2dnbGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUb2dnbGUgb25cclxuICAgICAqL1xyXG4gICAgdGhlLnRvZ2dsZU9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi50b2dnbGVPbigpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZSBvZmZcclxuICAgICAqL1xyXG4gICAgdGhlLnRvZ2dsZU9mZiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4udG9nZ2xlT2ZmKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoIGV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyB7S1RUb2dnbGV9XHJcbiAgICAgKi9cclxuICAgIHRoZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCBldmVudCB0aGF0IHdpbGwgYmUgZmlyZWQgb25jZVxyXG4gICAgICogQHJldHVybnMge0tUVG9nZ2xlfVxyXG4gICAgICovXHJcbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENvbnN0cnVjdCBwbHVnaW5cclxuICAgIFBsdWdpbi5jb25zdHJ1Y3QuYXBwbHkodGhlLCBbb3B0aW9uc10pO1xyXG5cclxuICAgIHJldHVybiB0aGU7XHJcbn07XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RUb2dnbGU7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQGNsYXNzIEtUVXRpbCAgYmFzZSB1dGlsaXplIGNsYXNzIHRoYXQgcHJpdmlkZXMgaGVscGVyIGZ1bmN0aW9uc1xyXG4gKi9cclxuXHJcbi8vIFBvbHlmaWxsc1xyXG4vKipcclxuICogRWxlbWVudC5tYXRjaGVzKCkgcG9seWZpbGwgKHNpbXBsZSB2ZXJzaW9uKVxyXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9tYXRjaGVzI1BvbHlmaWxsXHJcbiAqL1xyXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcclxuICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbGVtZW50LmNsb3Nlc3QoKSBwb2x5ZmlsbFxyXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9jbG9zZXN0I1BvbHlmaWxsXHJcbiAqL1xyXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QpIHtcclxuICAgIGlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xyXG4gICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XHJcbiAgICB9XHJcbiAgICBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24ocykge1xyXG4gICAgICAgIHZhciBlbCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGFuY2VzdG9yID0gdGhpcztcclxuICAgICAgICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhlbCkpIHJldHVybiBudWxsO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgaWYgKGFuY2VzdG9yLm1hdGNoZXMocykpIHJldHVybiBhbmNlc3RvcjtcclxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIH0gd2hpbGUgKGFuY2VzdG9yICE9PSBudWxsKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGlsZE5vZGUucmVtb3ZlKCkgcG9seWZpbGxcclxuICogaHR0cHM6Ly9nb21ha2V0aGluZ3MuY29tL3JlbW92aW5nLWFuLWVsZW1lbnQtZnJvbS10aGUtZG9tLXRoZS1lczYtd2F5L1xyXG4gKiBAYXV0aG9yIENocmlzIEZlcmRpbmFuZGlcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG4oZnVuY3Rpb24oZWxlbSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3dbZWxlbVtpXV0gfHwgJ3JlbW92ZScgaW4gd2luZG93W2VsZW1baV1dLnByb3RvdHlwZSkgY29udGludWU7XHJcbiAgICAgICAgd2luZG93W2VsZW1baV1dLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0pKFsnRWxlbWVudCcsICdDaGFyYWN0ZXJEYXRhJywgJ0RvY3VtZW50VHlwZSddKTtcclxuXHJcblxyXG4vL1xyXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwgYnkgRXJpayBNw7ZsbGVyLlxyXG4vLyAgV2l0aCBmaXhlcyBmcm9tIFBhdWwgSXJpc2ggYW5kIFRpbm8gWmlqZGVsXHJcbi8vXHJcbi8vICBodHRwOi8vcGF1bGlyaXNoLmNvbS8yMDExL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtYW5pbWF0aW5nL1xyXG4vLyAgaHR0cDovL215Lm9wZXJhLmNvbS9lbW9sbGVyL2Jsb2cvMjAxMS8xMi8yMC9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWVyLWFuaW1hdGluZ1xyXG4vL1xyXG4vLyAgTUlUIGxpY2Vuc2VcclxuLy9cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGxhc3RUaW1lID0gMDtcclxuICAgIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J107XHJcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK3gpIHtcclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvcnNbeF0gKyAnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XHJcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID1cclxuICAgICAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0gKyAnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCB3aW5kb3dbdmVuZG9yc1t4XSArICdDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpXHJcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICB2YXIgdGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKTtcclxuICAgICAgICAgICAgdmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpO1xyXG4gICAgICAgICAgICB9LCB0aW1lVG9DYWxsKTtcclxuICAgICAgICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XHJcbiAgICAgICAgICAgIHJldHVybiBpZDtcclxuICAgICAgICB9O1xyXG5cclxuICAgIGlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKVxyXG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChpZCk7XHJcbiAgICAgICAgfTtcclxufSgpKTtcclxuXHJcbi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2pzZXJ6L2pzX3BpZWNlL2Jsb2IvbWFzdGVyL0RPTS9QYXJlbnROb2RlL3ByZXBlbmQoKS9wcmVwZW5kKCkubWRcclxuKGZ1bmN0aW9uKGFycikge1xyXG4gICAgYXJyLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdwcmVwZW5kJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaXRlbSwgJ3ByZXBlbmQnLCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVwZW5kKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksXHJcbiAgICAgICAgICAgICAgICAgICAgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBhcmdBcnIuZm9yRWFjaChmdW5jdGlvbihhcmdJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzTm9kZSA9IGFyZ0l0ZW0gaW5zdGFuY2VvZiBOb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY0ZyYWcuYXBwZW5kQ2hpbGQoaXNOb2RlID8gYXJnSXRlbSA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhhcmdJdGVtKSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRCZWZvcmUoZG9jRnJhZywgdGhpcy5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pKFtFbGVtZW50LnByb3RvdHlwZSwgRG9jdW1lbnQucHJvdG90eXBlLCBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZV0pO1xyXG5cclxuLy8gZ2V0QXR0cmlidXRlTmFtZXNcclxuaWYgKEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5hbWVzID09IHVuZGVmaW5lZCkge1xyXG4gICAgRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTmFtZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcclxuICAgICAgICB2YXIgbGVuZ3RoID0gYXR0cmlidXRlcy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0W2ldID0gYXR0cmlidXRlc1tpXS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxufVxyXG5cclxuLy8gR2xvYmFsIHZhcmlhYmxlc1xyXG53aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZSA9IHt9O1xyXG53aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZUlEID0gMDtcclxud2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnMgPSB7fTtcclxuXHJcbnZhciBLVFV0aWwgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciByZXNpemVIYW5kbGVycyA9IFtdO1xyXG5cclxuICAgIC8qKiBAdHlwZSB7b2JqZWN0fSBicmVha3BvaW50cyBUaGUgZGV2aWNlIHdpZHRoIGJyZWFrcG9pbnRzICoqL1xyXG4gICAgdmFyIGJyZWFrcG9pbnRzID0ge1xyXG4gICAgICAgIHNtOiA1NDQsIC8vIFNtYWxsIHNjcmVlbiAvIHBob25lXHJcbiAgICAgICAgbWQ6IDc2OCwgLy8gTWVkaXVtIHNjcmVlbiAvIHRhYmxldFxyXG4gICAgICAgIGxnOiA5OTIsIC8vIExhcmdlIHNjcmVlbiAvIGRlc2t0b3BcclxuICAgICAgICB4bDogMTIwMCAvLyBFeHRyYSBsYXJnZSBzY3JlZW4gLyB3aWRlIGRlc2t0b3BcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgd2luZG93IHJlc2l6ZSBldmVudCB3aXRoIHNvbWVcclxuICAgICAqIGRlbGF5IHRvIGF0dGFjaCBldmVudCBoYW5kbGVycyB1cG9uIHJlc2l6ZSBjb21wbGV0ZVxyXG4gICAgICovXHJcbiAgICB2YXIgX3dpbmRvd1Jlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgX3J1blJlc2l6ZUhhbmRsZXJzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIHJlaW5pdGlhbGl6ZSBvdGhlciBzdWJzY3JpYmVkIGVsZW1lbnRzXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzaXplSGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBlYWNoID0gcmVzaXplSGFuZGxlcnNbaV07XHJcbiAgICAgICAgICAgICAgICBlYWNoLmNhbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciB0aW1lcjtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBLVFV0aWwudGhyb3R0bGUodGltZXIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX3J1blJlc2l6ZUhhbmRsZXJzKCk7XHJcbiAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2xhc3MgbWFpbiBpbml0aWFsaXplci5cclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MuXHJcbiAgICAgICAgICogQHJldHVybnMgbnVsbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8vbWFpbiBmdW5jdGlvbiB0byBpbml0aWF0ZSB0aGUgdGhlbWVcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MgJiYgc2V0dGluZ3MuYnJlYWtwb2ludHMpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzID0gc2V0dGluZ3MuYnJlYWtwb2ludHM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF93aW5kb3dSZXNpemVIYW5kbGVyKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyB3aW5kb3cgcmVzaXplIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkUmVzaXplSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgcmVzaXplSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyB3aW5kb3cgcmVzaXplIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlUmVzaXplSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNpemVIYW5kbGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrID09PSByZXNpemVIYW5kbGVyc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNpemVIYW5kbGVyc1tpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRyaWdnZXIgd2luZG93IHJlc2l6ZSBoYW5kbGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBydW5SZXNpemVIYW5kbGVyczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIF9ydW5SZXNpemVIYW5kbGVycygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YoRXZlbnQpID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBtb2Rlcm4gYnJvd3NlcnNcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gZm9yIElFIGFuZCBvdGhlciBvbGQgYnJvd3NlcnNcclxuICAgICAgICAgICAgICAgIC8vIGNhdXNlcyBkZXByZWNhdGlvbiB3YXJuaW5nIG9uIG1vZGVybiBicm93c2Vyc1xyXG4gICAgICAgICAgICAgICAgdmFyIGV2dCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudCgnVUlFdmVudHMnKTtcclxuICAgICAgICAgICAgICAgIGV2dC5pbml0VUlFdmVudCgncmVzaXplJywgdHJ1ZSwgZmFsc2UsIHdpbmRvdywgMCk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0IEdFVCBwYXJhbWV0ZXIgdmFsdWUgZnJvbSBVUkwuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtTmFtZSBQYXJhbWV0ZXIgbmFtZS5cclxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFVSTFBhcmFtOiBmdW5jdGlvbihwYXJhbU5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIHNlYXJjaFN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLFxyXG4gICAgICAgICAgICAgICAgaSwgdmFsLCBwYXJhbXMgPSBzZWFyY2hTdHJpbmcuc3BsaXQoXCImXCIpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFsID0gcGFyYW1zW2ldLnNwbGl0KFwiPVwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxbMF0gPT0gcGFyYW1OYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZXNjYXBlKHZhbFsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIGN1cnJlbnQgZGV2aWNlIGlzIG1vYmlsZSB0b3VjaC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc01vYmlsZURldmljZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXN0ID0gKHRoaXMuZ2V0Vmlld1BvcnQoKS53aWR0aCA8IHRoaXMuZ2V0QnJlYWtwb2ludCgnbGcnKSA/IHRydWUgOiBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGVzdCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIEZvciB1c2Ugd2l0aGluIG5vcm1hbCB3ZWIgY2xpZW50c1xyXG4gICAgICAgICAgICAgICAgdGVzdCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQYWQvaSkgIT0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRlc3Q7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgY3VycmVudCBkZXZpY2UgaXMgZGVza3RvcC5cclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc0Rlc2t0b3BEZXZpY2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0cyBicm93c2VyIHdpbmRvdyB2aWV3cG9ydCBzaXplLiBSZWY6XHJcbiAgICAgICAgICogaHR0cDovL2FuZHlsYW5ndG9uLmNvLnVrL2FydGljbGVzL2phdmFzY3JpcHQvZ2V0LXZpZXdwb3J0LXNpemUtamF2YXNjcmlwdC9cclxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFZpZXdQb3J0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSB3aW5kb3csXHJcbiAgICAgICAgICAgICAgICBhID0gJ2lubmVyJztcclxuICAgICAgICAgICAgaWYgKCEoJ2lubmVyV2lkdGgnIGluIHdpbmRvdykpIHtcclxuICAgICAgICAgICAgICAgIGEgPSAnY2xpZW50JztcclxuICAgICAgICAgICAgICAgIGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBlW2EgKyAnV2lkdGgnXSxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogZVthICsgJ0hlaWdodCddXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gZGV2aWNlIG1vZGUgaXMgY3VycmVudGx5IGFjdGl2YXRlZC5cclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSBSZXNwb25zaXZlIG1vZGUgbmFtZShlLmc6IGRlc2t0b3AsXHJcbiAgICAgICAgICogICAgIGRlc2t0b3AtYW5kLXRhYmxldCwgdGFibGV0LCB0YWJsZXQtYW5kLW1vYmlsZSwgbW9iaWxlKVxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzSW5SZXNwb25zaXZlUmFuZ2U6IGZ1bmN0aW9uKG1vZGUpIHtcclxuICAgICAgICAgICAgdmFyIGJyZWFrcG9pbnQgPSB0aGlzLmdldFZpZXdQb3J0KCkud2lkdGg7XHJcblxyXG4gICAgICAgICAgICBpZiAobW9kZSA9PSAnZ2VuZXJhbCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT0gJ2Rlc2t0b3AnICYmIGJyZWFrcG9pbnQgPj0gKHRoaXMuZ2V0QnJlYWtwb2ludCgnbGcnKSArIDEpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09ICd0YWJsZXQnICYmIChicmVha3BvaW50ID49ICh0aGlzLmdldEJyZWFrcG9pbnQoJ21kJykgKyAxKSAmJiBicmVha3BvaW50IDwgdGhpcy5nZXRCcmVha3BvaW50KCdsZycpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PSAnbW9iaWxlJyAmJiBicmVha3BvaW50IDw9IHRoaXMuZ2V0QnJlYWtwb2ludCgnbWQnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PSAnZGVza3RvcC1hbmQtdGFibGV0JyAmJiBicmVha3BvaW50ID49ICh0aGlzLmdldEJyZWFrcG9pbnQoJ21kJykgKyAxKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PSAndGFibGV0LWFuZC1tb2JpbGUnICYmIGJyZWFrcG9pbnQgPD0gdGhpcy5nZXRCcmVha3BvaW50KCdsZycpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09ICdtaW5pbWFsLWRlc2t0b3AtYW5kLWJlbG93JyAmJiBicmVha3BvaW50IDw9IHRoaXMuZ2V0QnJlYWtwb2ludCgneGwnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBnaXZlbiBkZXZpY2UgbW9kZSBpcyBjdXJyZW50bHkgYWN0aXZhdGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIFJlc3BvbnNpdmUgbW9kZSBuYW1lKGUuZzogZGVza3RvcCxcclxuICAgICAgICAgKiAgICAgZGVza3RvcC1hbmQtdGFibGV0LCB0YWJsZXQsIHRhYmxldC1hbmQtbW9iaWxlLCBtb2JpbGUpXHJcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNCcmVha3BvaW50VXA6IGZ1bmN0aW9uKG1vZGUpIHtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5nZXRWaWV3UG9ydCgpLndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgYnJlYWtwb2ludCA9IHRoaXMuZ2V0QnJlYWtwb2ludChtb2RlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAod2lkdGggPj0gYnJlYWtwb2ludCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNCcmVha3BvaW50RG93bjogZnVuY3Rpb24obW9kZSkge1xyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFZpZXdQb3J0KCkud2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBicmVha3BvaW50ID0gdGhpcy5nZXRCcmVha3BvaW50KG1vZGUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICh3aWR0aCA8IGJyZWFrcG9pbnQpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdlbmVyYXRlcyB1bmlxdWUgSUQgZm9yIGdpdmUgcHJlZml4LlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggUHJlZml4IGZvciBnZW5lcmF0ZWQgSURcclxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRVbmlxdWVJRDogZnVuY3Rpb24ocHJlZml4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobmV3IERhdGUoKSkuZ2V0VGltZSgpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXRzIHdpbmRvdyB3aWR0aCBmb3IgZ2l2ZSBicmVha3BvaW50IG1vZGUuXHJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgUmVzcG9uc2l2ZSBtb2RlIG5hbWUoZS5nOiB4bCwgbGcsIG1kLCBzbSlcclxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldEJyZWFrcG9pbnQ6IGZ1bmN0aW9uKG1vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJyZWFrcG9pbnRzW21vZGVdO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIG9iamVjdCBoYXMgcHJvcGVydHkgbWF0Y2hzIGdpdmVuIGtleSBwYXRoLlxyXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmogT2JqZWN0IGNvbnRhaW5zIHZhbHVlcyBwYWlyZWQgd2l0aCBnaXZlbiBrZXkgcGF0aFxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlzIEtleXMgcGF0aCBzZXBlcmF0ZWQgd2l0aCBkb3RzXHJcbiAgICAgICAgICogQHJldHVybnMge29iamVjdH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc3NldDogZnVuY3Rpb24ob2JqLCBrZXlzKSB7XHJcbiAgICAgICAgICAgIHZhciBzdG9uZTtcclxuXHJcbiAgICAgICAgICAgIGtleXMgPSBrZXlzIHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgaWYgKGtleXMuaW5kZXhPZignWycpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBvYmplY3QgcGF0aCBub3RhdGlvbi4nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAga2V5cyA9IGtleXMuc3BsaXQoJy4nKTtcclxuXHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdG9uZSA9IGtleXMuc2hpZnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShzdG9uZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb2JqID0gb2JqW3N0b25lXTtcclxuXHJcbiAgICAgICAgICAgIH0gd2hpbGUgKGtleXMubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgaGlnaGVzdCB6LWluZGV4IG9mIHRoZSBnaXZlbiBlbGVtZW50IHBhcmVudHNcclxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZWwgalF1ZXJ5IGVsZW1lbnQgb2JqZWN0XHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRIaWdoZXN0WmluZGV4OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24sIHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKGVsICYmIGVsICE9PSBkb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHotaW5kZXggaWYgcG9zaXRpb24gaXMgc2V0IHRvIGEgdmFsdWUgd2hlcmUgei1pbmRleCBpcyBpZ25vcmVkIGJ5IHRoZSBicm93c2VyXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG1ha2VzIGJlaGF2aW9yIG9mIHRoaXMgZnVuY3Rpb24gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnNcclxuICAgICAgICAgICAgICAgIC8vIFdlYktpdCBhbHdheXMgcmV0dXJucyBhdXRvIGlmIHRoZSBlbGVtZW50IGlzIHBvc2l0aW9uZWRcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gS1RVdGlsLmNzcyhlbCwgJ3Bvc2l0aW9uJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwicmVsYXRpdmVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgcmV0dXJucyAwIHdoZW4gekluZGV4IGlzIG5vdCBzcGVjaWZpZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBvdGhlciBicm93c2VycyByZXR1cm4gYSBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBpZ25vcmUgdGhlIGNhc2Ugb2YgbmVzdGVkIGVsZW1lbnRzIHdpdGggYW4gZXhwbGljaXQgdmFsdWUgb2YgMFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDxkaXYgc3R5bGU9XCJ6LWluZGV4OiAtMTA7XCI+PGRpdiBzdHlsZT1cInotaW5kZXg6IDA7XCI+PC9kaXY+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsLCAnei1pbmRleCcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBlbGVtZW50IGhhcyBhbnkgcGFyZW50IHdpdGggZml4ZWQgcG9zaXRpb25mcmVnXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVsIGpRdWVyeSBlbGVtZW50IG9iamVjdFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGhhc0ZpeGVkUG9zaXRpb25lZFBhcmVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uO1xyXG5cclxuICAgICAgICAgICAgd2hpbGUgKGVsICYmIGVsICE9PSBkb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBLVFV0aWwuY3NzKGVsLCAncG9zaXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNpbXVsYXRlcyBkZWxheVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNsZWVwOiBmdW5jdGlvbihtaWxsaXNlY29uZHMpIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMWU3OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICgobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydCkgPiBtaWxsaXNlY29uZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEdldHMgcmFuZG9tbHkgZ2VuZXJhdGVkIGludGVnZXIgdmFsdWUgd2l0aGluIGdpdmVuIG1pbiBhbmQgbWF4IHJhbmdlXHJcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbiBSYW5nZSBzdGFydCB2YWx1ZVxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXggUmFuZ2UgZW5kIHZhbHVlXHJcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRSYW5kb21JbnQ6IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIEFuZ3VsYXIgbGlicmFyeSBpcyBpbmNsdWRlZFxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzQW5ndWxhclZlcnNpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gd2luZG93LlpvbmUgIT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBqUXVlcnkgV29ya2Fyb3VuZHNcclxuXHJcbiAgICAgICAgLy8gRGVlcCBleHRlbmQ6ICAkLmV4dGVuZCh0cnVlLCB7fSwgb2JqQSwgb2JqQik7XHJcbiAgICAgICAgZGVlcEV4dGVuZDogZnVuY3Rpb24ob3V0KSB7XHJcbiAgICAgICAgICAgIG91dCA9IG91dCB8fCB7fTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gYXJndW1lbnRzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghb2JqKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRba2V5XSA9IEtUVXRpbC5kZWVwRXh0ZW5kKG91dFtrZXldLCBvYmpba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFtrZXldID0gb2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIGV4dGVuZDogICQuZXh0ZW5kKHt9LCBvYmpBLCBvYmpCKTtcclxuICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uKG91dCkge1xyXG4gICAgICAgICAgICBvdXQgPSBvdXQgfHwge307XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhcmd1bWVudHNbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0uaGFzT3duUHJvcGVydHkoa2V5KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG91dDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRCeUlkOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEJ5VGFnOiBmdW5jdGlvbihxdWVyeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocXVlcnkpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEJ5VGFnTmFtZTogZnVuY3Rpb24ocXVlcnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHF1ZXJ5KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRCeUNsYXNzOiBmdW5jdGlvbihxdWVyeSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShxdWVyeSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0Qm9keTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBlbGVtZW50IGhhcyBnaXZlbiBjbGFzc2VzXHJcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVsIGpRdWVyeSBlbGVtZW50IG9iamVjdFxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBDbGFzc2VzIHN0cmluZ1xyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGhhc0NsYXNzZXM6IGZ1bmN0aW9uKGVsLCBjbGFzc2VzKSB7XHJcbiAgICAgICAgICAgIGlmICghZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGNsYXNzZXNBcnIgPSBjbGFzc2VzLnNwbGl0KFwiIFwiKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3Nlc0Fyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKEtUVXRpbC5oYXNDbGFzcyhlbCwgS1RVdGlsLnRyaW0oY2xhc3Nlc0FycltpXSkpID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24oZWwsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSA6IG5ldyBSZWdFeHAoJ1xcXFxiJyArIGNsYXNzTmFtZSArICdcXFxcYicpLnRlc3QoZWwuY2xhc3NOYW1lKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWwsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoIWVsIHx8IHR5cGVvZiBjbGFzc05hbWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lc1tpXSAmJiBjbGFzc05hbWVzW2ldLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChLVFV0aWwudHJpbShjbGFzc05hbWVzW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFLVFV0aWwuaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgY2xhc3NOYW1lcy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTmFtZSArPSAnICcgKyBLVFV0aWwudHJpbShjbGFzc05hbWVzW3hdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICghZWwgfHwgdHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoS1RVdGlsLnRyaW0oY2xhc3NOYW1lc1tpXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKEtUVXRpbC5oYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBjbGFzc05hbWVzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXGInICsgS1RVdGlsLnRyaW0oY2xhc3NOYW1lc1t4XSkgKyAnXFxcXGInLCAnZycpLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0cmlnZ2VyQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uKGVsLCBldmVudE5hbWUsIGRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIGV2ZW50O1xyXG4gICAgICAgICAgICBpZiAod2luZG93LkN1c3RvbUV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudCA9IG5ldyBDdXN0b21FdmVudChldmVudE5hbWUsIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGRhdGFcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChldmVudE5hbWUsIHRydWUsIHRydWUsIGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0cmlnZ2VyRXZlbnQ6IGZ1bmN0aW9uKG5vZGUsIGV2ZW50TmFtZSkge1xyXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgdXNlIHRoZSBvd25lckRvY3VtZW50IGZyb20gdGhlIHByb3ZpZGVkIG5vZGUgdG8gYXZvaWQgY3Jvc3Mtd2luZG93IHByb2JsZW1zXHJcbiAgICAgICAgICAgIHZhciBkb2M7XHJcbiAgICAgICAgICAgIGlmIChub2RlLm93bmVyRG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09IDkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBub2RlIG1heSBiZSB0aGUgZG9jdW1lbnQgaXRzZWxmLCBub2RlVHlwZSA5ID0gRE9DVU1FTlRfTk9ERVxyXG4gICAgICAgICAgICAgICAgZG9jID0gbm9kZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbm9kZSBwYXNzZWQgdG8gZmlyZUV2ZW50OiBcIiArIG5vZGUuaWQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobm9kZS5kaXNwYXRjaEV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBHZWNrby1zdHlsZSBhcHByb2FjaCAobm93IHRoZSBzdGFuZGFyZCkgdGFrZXMgbW9yZSB3b3JrXHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRDbGFzcyA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IGV2ZW50cyBoYXZlIGRpZmZlcmVudCBldmVudCBjbGFzc2VzLlxyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBzd2l0Y2ggc3RhdGVtZW50IGNhbid0IG1hcCBhbiBldmVudE5hbWUgdG8gYW4gZXZlbnRDbGFzcyxcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBldmVudCBmaXJpbmcgaXMgZ29pbmcgdG8gZmFpbC5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNsaWNrXCI6IC8vIERpc3BhdGNoaW5nIG9mICdjbGljaycgYXBwZWFycyB0byBub3Qgd29yayBjb3JyZWN0bHkgaW4gU2FmYXJpLiBVc2UgJ21vdXNlZG93bicgb3IgJ21vdXNldXAnIGluc3RlYWQuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1vdXNlZW50ZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW91c2VsZWF2ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudENsYXNzID0gXCJNb3VzZUV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZvY3VzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNoYW5nZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJibHVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudENsYXNzID0gXCJIVE1MRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBcImZpcmVFdmVudDogQ291bGRuJ3QgZmluZCBhbiBldmVudCBjbGFzcyBmb3IgZXZlbnQgJ1wiICsgZXZlbnROYW1lICsgXCInLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGRvYy5jcmVhdGVFdmVudChldmVudENsYXNzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYnViYmxlcyA9IGV2ZW50TmFtZSA9PSBcImNoYW5nZVwiID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgYnViYmxlcywgdHJ1ZSk7IC8vIEFsbCBldmVudHMgY3JlYXRlZCBhcyBidWJibGluZyBhbmQgY2FuY2VsYWJsZS5cclxuXHJcbiAgICAgICAgICAgICAgICBldmVudC5zeW50aGV0aWMgPSB0cnVlOyAvLyBhbGxvdyBkZXRlY3Rpb24gb2Ygc3ludGhldGljIGV2ZW50c1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlIHNlY29uZCBwYXJhbWV0ZXIgc2F5cyBnbyBhaGVhZCB3aXRoIHRoZSBkZWZhdWx0IGFjdGlvblxyXG4gICAgICAgICAgICAgICAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLmZpcmVFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSUUtb2xkIHNjaG9vbCBzdHlsZVxyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gZG9jLmNyZWF0ZUV2ZW50T2JqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zeW50aGV0aWMgPSB0cnVlOyAvLyBhbGxvdyBkZXRlY3Rpb24gb2Ygc3ludGhldGljIGV2ZW50c1xyXG4gICAgICAgICAgICAgICAgbm9kZS5maXJlRXZlbnQoXCJvblwiICsgZXZlbnROYW1lLCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbmRleDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgdmFyIGMgPSBlbC5wYXJlbnROb2RlLmNoaWxkcmVuLFxyXG4gICAgICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoOyBpIDwgYy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgICAgIGlmIChjW2ldID09IGVsKSByZXR1cm4gaTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0cmltOiBmdW5jdGlvbihzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy50cmltKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQ6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUuY3VycmVudFRhcmdldC5kYXRhc2V0LnRyaWdnZXJlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC50cmlnZ2VyZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgaWYgKGVsICYmIGVsLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocGFyZW50LCBxdWVyeSkge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBLVFV0aWwuZ2V0QnlJZChwYXJlbnQpO1xyXG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IocXVlcnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZmluZEFsbDogZnVuY3Rpb24ocGFyZW50LCBxdWVyeSkge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSBLVFV0aWwuZ2V0QnlJZChwYXJlbnQpO1xyXG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5zZXJ0QWZ0ZXI6IGZ1bmN0aW9uKGVsLCByZWZlcmVuY2VOb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWZlcmVuY2VOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCByZWZlcmVuY2VOb2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwYXJlbnRzOiBmdW5jdGlvbihlbGVtLCBzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAvLyBFbGVtZW50Lm1hdGNoZXMoKSBwb2x5ZmlsbFxyXG4gICAgICAgICAgICBpZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPVxyXG4gICAgICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSAodGhpcy5kb2N1bWVudCB8fCB0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwocyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gbWF0Y2hlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCAmJiBtYXRjaGVzLml0ZW0oaSkgIT09IHRoaXMpIHt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2V0IHVwIGEgcGFyZW50IGFycmF5XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBQdXNoIGVhY2ggcGFyZW50IGVsZW1lbnQgdG8gdGhlIGFycmF5XHJcbiAgICAgICAgICAgIGZvciAoOyBlbGVtICYmIGVsZW0gIT09IGRvY3VtZW50OyBlbGVtID0gZWxlbS5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5tYXRjaGVzKHNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2goZWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZXR1cm4gb3VyIHBhcmVudCBhcnJheVxyXG4gICAgICAgICAgICByZXR1cm4gcGFyZW50cztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjaGlsZHJlbjogZnVuY3Rpb24oZWwsIHNlbGVjdG9yLCBsb2cpIHtcclxuICAgICAgICAgICAgaWYgKCFlbCB8fCAhZWwuY2hpbGROb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sXHJcbiAgICAgICAgICAgICAgICBpID0gMCxcclxuICAgICAgICAgICAgICAgIGwgPSBlbC5jaGlsZE5vZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGk7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbC5jaGlsZE5vZGVzW2ldLm5vZGVUeXBlID09IDEgJiYgS1RVdGlsLm1hdGNoZXMoZWwuY2hpbGROb2Rlc1tpXSwgc2VsZWN0b3IsIGxvZykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChlbC5jaGlsZE5vZGVzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjaGlsZDogZnVuY3Rpb24oZWwsIHNlbGVjdG9yLCBsb2cpIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gS1RVdGlsLmNoaWxkcmVuKGVsLCBzZWxlY3RvciwgbG9nKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogbnVsbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtYXRjaGVzOiBmdW5jdGlvbihlbCwgc2VsZWN0b3IsIGxvZykge1xyXG4gICAgICAgICAgICB2YXIgcCA9IEVsZW1lbnQucHJvdG90eXBlO1xyXG4gICAgICAgICAgICB2YXIgZiA9IHAubWF0Y2hlcyB8fCBwLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBwLm1vek1hdGNoZXNTZWxlY3RvciB8fCBwLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGZ1bmN0aW9uKHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXS5pbmRleE9mLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzKSwgdGhpcykgIT09IC0xO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKGVsICYmIGVsLnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmLmNhbGwoZWwsIHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5jdXN0b21EYXRhVGFnID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5jdXN0b21EYXRhVGFnID0gd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbC5jdXN0b21EYXRhVGFnXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsLmN1c3RvbURhdGFUYWddID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbC5jdXN0b21EYXRhVGFnXVtuYW1lXSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmN1c3RvbURhdGFUYWcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsLmN1c3RvbURhdGFUYWddW25hbWVdIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwuY3VzdG9tRGF0YVRhZyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAod2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVbZWwuY3VzdG9tRGF0YVRhZ10gJiYgd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVbZWwuY3VzdG9tRGF0YVRhZ11bbmFtZV0pID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgJiYgdGhpcy5oYXMobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsLmN1c3RvbURhdGFUYWddW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvdXRlcldpZHRoOiBmdW5jdGlvbihlbCwgbWFyZ2luKSB7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aDtcclxuXHJcbiAgICAgICAgICAgIGlmIChtYXJnaW4gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoID0gcGFyc2VGbG9hdChlbC5vZmZzZXRXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCArPSBwYXJzZUZsb2F0KEtUVXRpbC5jc3MoZWwsICdtYXJnaW4tbGVmdCcpKSArIHBhcnNlRmxvYXQoS1RVdGlsLmNzcyhlbCwgJ21hcmdpbi1yaWdodCcpKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh3aWR0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHBhcnNlRmxvYXQoZWwub2Zmc2V0V2lkdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9mZnNldDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgdmFyIHJlY3QsIHdpbjtcclxuXHJcbiAgICAgICAgICAgIGlmICghZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXHJcbiAgICAgICAgICAgIC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxyXG4gICAgICAgICAgICAvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXHJcbiAgICAgICAgICAgIC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxyXG5cclxuICAgICAgICAgICAgaWYgKCFlbC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1JcclxuICAgICAgICAgICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICB3aW4gPSBlbC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuY3NzKGVsLCAnaGVpZ2h0Jyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb3V0ZXJIZWlnaHQ6IGZ1bmN0aW9uKGVsLCB3aXRoTWFyZ2ljID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdmFyIGhlaWdodCA9IGVsLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgdmFyIHN0eWxlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHdpdGhNYXJnaWMpIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgKz0gcGFyc2VJbnQoc3R5bGUubWFyZ2luVG9wKSArIHBhcnNlSW50KHN0eWxlLm1hcmdpbkJvdHRvbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIShlbC5vZmZzZXRXaWR0aCA9PT0gMCAmJiBlbC5vZmZzZXRIZWlnaHQgPT09IDApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGF0dHI6IGZ1bmN0aW9uKGVsLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoZWwgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGhhc0F0dHI6IGZ1bmN0aW9uKGVsLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChlbCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShuYW1lKSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbCwgbmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoZWwgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhbmltYXRlOiBmdW5jdGlvbihmcm9tLCB0bywgZHVyYXRpb24sIHVwZGF0ZSwgZWFzaW5nLCBkb25lKSB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBUaW55QW5pbWF0ZS5lYXNpbmdzXHJcbiAgICAgICAgICAgICAqICBBZGFwdGVkIGZyb20galF1ZXJ5IEVhc2luZ1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdmFyIGVhc2luZ3MgPSB7fTtcclxuICAgICAgICAgICAgdmFyIGVhc2luZztcclxuXHJcbiAgICAgICAgICAgIGVhc2luZ3MubGluZWFyID0gZnVuY3Rpb24odCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgKiB0IC8gZCArIGI7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBlYXNpbmcgPSBlYXNpbmdzLmxpbmVhcjtcclxuXHJcbiAgICAgICAgICAgIC8vIEVhcmx5IGJhaWwgb3V0IGlmIGNhbGxlZCBpbmNvcnJlY3RseVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZyb20gIT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdG8gIT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgZHVyYXRpb24gIT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdXBkYXRlICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBtb2NrIGRvbmUoKSBmdW5jdGlvbiBpZiBuZWNlc3NhcnlcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb25lICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBkb25lID0gZnVuY3Rpb24oKSB7fTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGljayBpbXBsZW1lbnRhdGlvbiAocmVxdWVzdEFuaW1hdGlvbkZyYW1lIHwgc2V0VGltZW91dClcclxuICAgICAgICAgICAgdmFyIHJBRiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNTApO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGxvb3BcclxuICAgICAgICAgICAgdmFyIGNhbmNlbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSB0byAtIGZyb207XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBsb29wKHRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSAodGltZXN0YW1wIHx8ICtuZXcgRGF0ZSgpKSAtIHN0YXJ0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aW1lID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUoZWFzaW5nKHRpbWUsIGZyb20sIGNoYW5nZSwgZHVyYXRpb24pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aW1lID49IDAgJiYgdGltZSA+PSBkdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh0byk7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByQUYobG9vcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZShmcm9tKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN0YXJ0IGFuaW1hdGlvbiBsb29wXHJcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogK25ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICByQUYobG9vcCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWN0dWFsQ3NzOiBmdW5jdGlvbihlbCwgcHJvcCwgY2FjaGUpIHtcclxuICAgICAgICAgICAgdmFyIGNzcyA9ICcnO1xyXG5cclxuICAgICAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghZWwuZ2V0QXR0cmlidXRlKCdrdC1oaWRkZW4tJyArIHByb3ApIHx8IGNhY2hlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IGlzIGhpZGRlbiBzbzpcclxuICAgICAgICAgICAgICAgIC8vIG1ha2luZyB0aGUgZWwgYmxvY2sgc28gd2UgY2FuIG1lYXNzdXJlIGl0cyBoZWlnaHQgYnV0IHN0aWxsIGJlIGhpZGRlblxyXG4gICAgICAgICAgICAgICAgY3NzID0gZWwuc3R5bGUuY3NzVGV4dDtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSAncG9zaXRpb246IGFic29sdXRlOyB2aXNpYmlsaXR5OiBoaWRkZW47IGRpc3BsYXk6IGJsb2NrOyc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHByb3AgPT0gJ3dpZHRoJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZWwub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb3AgPT0gJ2hlaWdodCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gY3NzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHN0b3JlIGl0IGluIGNhY2hlXHJcbiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2t0LWhpZGRlbi0nICsgcHJvcCwgdmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHN0b3JlIGl0IGluIGNhY2hlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChlbC5nZXRBdHRyaWJ1dGUoJ2t0LWhpZGRlbi0nICsgcHJvcCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWN0dWFsSGVpZ2h0OiBmdW5jdGlvbihlbCwgY2FjaGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5hY3R1YWxDc3MoZWwsICdoZWlnaHQnLCBjYWNoZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWN0dWFsV2lkdGg6IGZ1bmN0aW9uKGVsLCBjYWNoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gS1RVdGlsLmFjdHVhbENzcyhlbCwgJ3dpZHRoJywgY2FjaGUpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNjcm9sbDogZnVuY3Rpb24oZWxlbWVudCwgbWV0aG9kKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSBwYXNzZWQgaW4gYG1ldGhvZGAgdmFsdWUgc2hvdWxkIGJlICdUb3AnIG9yICdMZWZ0J1xyXG4gICAgICAgICAgICBtZXRob2QgPSAnc2Nyb2xsJyArIG1ldGhvZDtcclxuICAgICAgICAgICAgcmV0dXJuIChlbGVtZW50ID09IHdpbmRvdyB8fCBlbGVtZW50ID09IGRvY3VtZW50KSA/IChcclxuICAgICAgICAgICAgICAgIHNlbGZbKG1ldGhvZCA9PSAnc2Nyb2xsVG9wJykgPyAncGFnZVlPZmZzZXQnIDogJ3BhZ2VYT2Zmc2V0J10gfHxcclxuICAgICAgICAgICAgICAgIChicm93c2VyU3VwcG9ydHNCb3hNb2RlbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbbWV0aG9kXSkgfHxcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHlbbWV0aG9kXVxyXG4gICAgICAgICAgICApIDogZWxlbWVudFttZXRob2RdO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNzczogZnVuY3Rpb24oZWwsIHN0eWxlUHJvcCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCFlbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZWwuc3R5bGVbc3R5bGVQcm9wXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRWaWV3ID0gKGVsLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpLmRlZmF1bHRWaWV3O1xyXG4gICAgICAgICAgICAgICAgLy8gVzNDIHN0YW5kYXJkIHdheTpcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0VmlldyAmJiBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2FuaXRpemUgcHJvcGVydHkgbmFtZSB0byBjc3Mgbm90YXRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyAoaHlwaGVuIHNlcGFyYXRlZCB3b3JkcyBlZy4gZm9udC1TaXplKVxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlUHJvcCA9IHN0eWxlUHJvcC5yZXBsYWNlKC8oW0EtWl0pL2csIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc3R5bGVQcm9wKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuY3VycmVudFN0eWxlKSB7IC8vIElFXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2FuaXRpemUgcHJvcGVydHkgbmFtZSB0byBjYW1lbENhc2VcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZVByb3AgPSBzdHlsZVByb3AucmVwbGFjZSgvXFwtKFxcdykvZywgZnVuY3Rpb24oc3RyLCBsZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZWwuY3VycmVudFN0eWxlW3N0eWxlUHJvcF07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udmVydCBvdGhlciB1bml0cyB0byBwaXhlbHMgb24gSUVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXGQrKGVtfHB0fCV8ZXgpPyQvaS50ZXN0KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkTGVmdCA9IGVsLnN0eWxlLmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkUnNMZWZ0ID0gZWwucnVudGltZVN0eWxlLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5ydW50aW1lU3R5bGUubGVmdCA9IGVsLmN1cnJlbnRTdHlsZS5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IHZhbHVlIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLnN0eWxlLnBpeGVsTGVmdCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmxlZnQgPSBvbGRMZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwucnVudGltZVN0eWxlLmxlZnQgPSBvbGRSc0xlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2xpZGU6IGZ1bmN0aW9uKGVsLCBkaXIsIHNwZWVkLCBjYWxsYmFjaywgcmVjYWxjTWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGlmICghZWwgfHwgKGRpciA9PSAndXAnICYmIEtUVXRpbC52aXNpYmxlKGVsKSA9PT0gZmFsc2UpIHx8IChkaXIgPT0gJ2Rvd24nICYmIEtUVXRpbC52aXNpYmxlKGVsKSA9PT0gdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3BlZWQgPSAoc3BlZWQgPyBzcGVlZCA6IDYwMCk7XHJcbiAgICAgICAgICAgIHZhciBjYWxjSGVpZ2h0ID0gS1RVdGlsLmFjdHVhbEhlaWdodChlbCk7XHJcbiAgICAgICAgICAgIHZhciBjYWxjUGFkZGluZ1RvcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgY2FsY1BhZGRpbmdCb3R0b20gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuY3NzKGVsLCAncGFkZGluZy10b3AnKSAmJiBLVFV0aWwuZGF0YShlbCkuaGFzKCdzbGlkZS1wYWRkaW5nLXRvcCcpICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbCkuc2V0KCdzbGlkZS1wYWRkaW5nLXRvcCcsIEtUVXRpbC5jc3MoZWwsICdwYWRkaW5nLXRvcCcpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKEtUVXRpbC5jc3MoZWwsICdwYWRkaW5nLWJvdHRvbScpICYmIEtUVXRpbC5kYXRhKGVsKS5oYXMoJ3NsaWRlLXBhZGRpbmctYm90dG9tJykgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKGVsKS5zZXQoJ3NsaWRlLXBhZGRpbmctYm90dG9tJywgS1RVdGlsLmNzcyhlbCwgJ3BhZGRpbmctYm90dG9tJykpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmRhdGEoZWwpLmhhcygnc2xpZGUtcGFkZGluZy10b3AnKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsY1BhZGRpbmdUb3AgPSBwYXJzZUludChLVFV0aWwuZGF0YShlbCkuZ2V0KCdzbGlkZS1wYWRkaW5nLXRvcCcpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKEtUVXRpbC5kYXRhKGVsKS5oYXMoJ3NsaWRlLXBhZGRpbmctYm90dG9tJykpIHtcclxuICAgICAgICAgICAgICAgIGNhbGNQYWRkaW5nQm90dG9tID0gcGFyc2VJbnQoS1RVdGlsLmRhdGEoZWwpLmdldCgnc2xpZGUtcGFkZGluZy1ib3R0b20nKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkaXIgPT0gJ3VwJykgeyAvLyB1cFxyXG4gICAgICAgICAgICAgICAgZWwuc3R5bGUuY3NzVGV4dCA9ICdkaXNwbGF5OiBibG9jazsgb3ZlcmZsb3c6IGhpZGRlbjsnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjYWxjUGFkZGluZ1RvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hbmltYXRlKDAsIGNhbGNQYWRkaW5nVG9wLCBzcGVlZCwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ1RvcCA9IChjYWxjUGFkZGluZ1RvcCAtIHZhbHVlKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjYWxjUGFkZGluZ0JvdHRvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hbmltYXRlKDAsIGNhbGNQYWRkaW5nQm90dG9tLCBzcGVlZCwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ0JvdHRvbSA9IChjYWxjUGFkZGluZ0JvdHRvbSAtIHZhbHVlKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hbmltYXRlKDAsIGNhbGNIZWlnaHQsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9IChjYWxjSGVpZ2h0IC0gdmFsdWUpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH0sICdsaW5lYXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXIgPT0gJ2Rvd24nKSB7IC8vIGRvd25cclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSAnZGlzcGxheTogYmxvY2s7IG92ZXJmbG93OiBoaWRkZW47JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsY1BhZGRpbmdUb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYW5pbWF0ZSgwLCBjYWxjUGFkZGluZ1RvcCwgc3BlZWQsIGZ1bmN0aW9uKHZhbHVlKSB7IC8vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLnBhZGRpbmdUb3AgPSB2YWx1ZSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5wYWRkaW5nVG9wID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGNQYWRkaW5nQm90dG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdCb3R0b20sIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5wYWRkaW5nQm90dG9tID0gdmFsdWUgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sICdsaW5lYXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hbmltYXRlKDAsIGNhbGNIZWlnaHQsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9IHZhbHVlICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIH0sICdsaW5lYXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2xpZGVVcDogZnVuY3Rpb24oZWwsIHNwZWVkLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBLVFV0aWwuc2xpZGUoZWwsICd1cCcsIHNwZWVkLCBjYWxsYmFjayk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2xpZGVEb3duOiBmdW5jdGlvbihlbCwgc3BlZWQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIEtUVXRpbC5zbGlkZShlbCwgJ2Rvd24nLCBzcGVlZCwgY2FsbGJhY2spO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKGVsLCBkaXNwbGF5KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWwgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gKGRpc3BsYXkgPyBkaXNwbGF5IDogJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihlbCwgdHlwZSwgaGFuZGxlciwgb25lKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWwgIT09ICd1bmRlZmluZWQnICYmIGVsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uKGVsLCB0eXBlLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChlbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3RvciwgZXZlbnQsIGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZXZlbnRJZCA9IEtUVXRpbC5nZXRVbmlxdWVJRCgnZXZlbnQnKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5LVFV0aWxEZWxlZ2F0ZWRFdmVudEhhbmRsZXJzW2V2ZW50SWRdID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB0YXJnZXRzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwodGFyZ2V0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChlbGVtZW50LCBldmVudCwgd2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnNbZXZlbnRJZF0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50SWQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb2ZmOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZXZlbnRJZCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIXdpbmRvdy5LVFV0aWxEZWxlZ2F0ZWRFdmVudEhhbmRsZXJzW2V2ZW50SWRdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVFdmVudChlbGVtZW50LCBldmVudCwgd2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnNbZXZlbnRJZF0pO1xyXG5cclxuICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5LVFV0aWxEZWxlZ2F0ZWRFdmVudEhhbmRsZXJzW2V2ZW50SWRdO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uZTogZnVuY3Rpb24gb25ldGltZShlbCwgdHlwZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbiBjYWxsZWUoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGV2ZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgJiYgZS50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZS50eXBlLCBjYWxsZWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gdmVyaWZ5IGZyb20gaHR0cHM6Ly90aGVtZWZvcmVzdC5uZXQvYXV0aG9yX2Rhc2hib2FyZCNjb21tZW50XzIzNjE1NTg4XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuY3VycmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSwgY2FsbGVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjYWxsIGhhbmRsZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaGFzaDogZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgICAgIHZhciBoYXNoID0gMCxcclxuICAgICAgICAgICAgICAgIGksIGNocjtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XHJcbiAgICAgICAgICAgICAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaGFzaDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhbmltYXRlQ2xhc3M6IGZ1bmN0aW9uKGVsLCBhbmltYXRpb25OYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogJ2FuaW1hdGlvbmVuZCcsXHJcbiAgICAgICAgICAgICAgICBPQW5pbWF0aW9uOiAnb0FuaW1hdGlvbkVuZCcsXHJcbiAgICAgICAgICAgICAgICBNb3pBbmltYXRpb246ICdtb3pBbmltYXRpb25FbmQnLFxyXG4gICAgICAgICAgICAgICAgV2Via2l0QW5pbWF0aW9uOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcclxuICAgICAgICAgICAgICAgIG1zQW5pbWF0aW9uOiAnbXNBbmltYXRpb25FbmQnLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgdCBpbiBhbmltYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IGFuaW1hdGlvbnNbdF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbCwgJ2FuaW1hdGVkICcgKyBhbmltYXRpb25OYW1lKTtcclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5vbmUoZWwsIGFuaW1hdGlvbiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoZWwsICdhbmltYXRlZCAnICsgYW5pbWF0aW9uTmFtZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwub25lKGVsLCBhbmltYXRpb24sIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uKGVsLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxyXG4gICAgICAgICAgICAgICAgT1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCcsXHJcbiAgICAgICAgICAgICAgICBNb3pUcmFuc2l0aW9uOiAnbW96VHJhbnNpdGlvbkVuZCcsXHJcbiAgICAgICAgICAgICAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXHJcbiAgICAgICAgICAgICAgICBtc1RyYW5zaXRpb246ICdtc1RyYW5zaXRpb25FbmQnXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uc1t0XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgS1RVdGlsLm9uZShlbCwgdHJhbnNpdGlvbiwgY2FsbGJhY2spO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFuaW1hdGlvbkVuZDogZnVuY3Rpb24oZWwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb247XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJyxcclxuICAgICAgICAgICAgICAgIE9BbmltYXRpb246ICdvQW5pbWF0aW9uRW5kJyxcclxuICAgICAgICAgICAgICAgIE1vekFuaW1hdGlvbjogJ21vekFuaW1hdGlvbkVuZCcsXHJcbiAgICAgICAgICAgICAgICBXZWJraXRBbmltYXRpb246ICd3ZWJraXRBbmltYXRpb25FbmQnLFxyXG4gICAgICAgICAgICAgICAgbXNBbmltYXRpb246ICdtc0FuaW1hdGlvbkVuZCdcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIHQgaW4gYW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsLnN0eWxlW3RdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBhbmltYXRpb25zW3RdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBLVFV0aWwub25lKGVsLCBhbmltYXRpb24sIGNhbGxiYWNrKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhbmltYXRlRGVsYXk6IGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0LScsICdtb3otJywgJ21zLScsICdvLScsICcnXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsLCB2ZW5kb3JzW2ldICsgJ2FuaW1hdGlvbi1kZWxheScsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFuaW1hdGVEdXJhdGlvbjogZnVuY3Rpb24oZWwsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQtJywgJ21vei0nLCAnbXMtJywgJ28tJywgJyddO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3MoZWwsIHZlbmRvcnNbaV0gKyAnYW5pbWF0aW9uLWR1cmF0aW9uJywgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2Nyb2xsVG86IGZ1bmN0aW9uKHRhcmdldCwgb2Zmc2V0LCBkdXJhdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBkdXJhdGlvbiA/IGR1cmF0aW9uIDogNTAwO1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0UG9zID0gdGFyZ2V0ID8gS1RVdGlsLm9mZnNldCh0YXJnZXQpLnRvcCA6IDA7XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxQb3MgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwO1xyXG4gICAgICAgICAgICB2YXIgZnJvbSwgdG87XHJcblxyXG4gICAgICAgICAgICBpZiAob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxQb3MgKz0gb2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmcm9tID0gc2Nyb2xsUG9zO1xyXG4gICAgICAgICAgICB0byA9IHRhcmdldFBvcztcclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5hbmltYXRlKGZyb20sIHRvLCBkdXJhdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxUb3AgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0pOyAvLywgZWFzaW5nLCBkb25lXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2Nyb2xsVG9wOiBmdW5jdGlvbihvZmZzZXQsIGR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUbyhudWxsLCBvZmZzZXQsIGR1cmF0aW9uKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc0FycmF5OiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBBcnJheS5pc0FycmF5KG9iaik7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVhZHk6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCA/IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiA6IGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzRW1wdHk6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbnVtYmVyU3RyaW5nOiBmdW5jdGlvbihuU3RyKSB7XHJcbiAgICAgICAgICAgIG5TdHIgKz0gJyc7XHJcbiAgICAgICAgICAgIHZhciB4ID0gblN0ci5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICB2YXIgeDEgPSB4WzBdO1xyXG4gICAgICAgICAgICB2YXIgeDIgPSB4Lmxlbmd0aCA+IDEgPyAnLicgKyB4WzFdIDogJyc7XHJcbiAgICAgICAgICAgIHZhciByZ3ggPSAvKFxcZCspKFxcZHszfSkvO1xyXG4gICAgICAgICAgICB3aGlsZSAocmd4LnRlc3QoeDEpKSB7XHJcbiAgICAgICAgICAgICAgICB4MSA9IHgxLnJlcGxhY2Uocmd4LCAnJDEnICsgJywnICsgJyQyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHgxICsgeDI7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGV0ZWN0SUU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuXHJcbiAgICAgICAgICAgIC8vIFRlc3QgdmFsdWVzOyBVbmNvbW1lbnQgdG8gY2hlY2sgcmVzdWx0IOKAplxyXG5cclxuICAgICAgICAgICAgLy8gSUUgMTBcclxuICAgICAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgMTAuMDsgV2luZG93cyBOVCA2LjI7IFRyaWRlbnQvNi4wKSc7XHJcblxyXG4gICAgICAgICAgICAvLyBJRSAxMVxyXG4gICAgICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjM7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztcclxuXHJcbiAgICAgICAgICAgIC8vIEVkZ2UgMTIgKFNwYXJ0YW4pXHJcbiAgICAgICAgICAgIC8vIHVhID0gJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMzkuMC4yMTcxLjcxIFNhZmFyaS81MzcuMzYgRWRnZS8xMi4wJztcclxuXHJcbiAgICAgICAgICAgIC8vIEVkZ2UgMTNcclxuICAgICAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzQ2LjAuMjQ4Ni4wIFNhZmFyaS81MzcuMzYgRWRnZS8xMy4xMDU4Nic7XHJcblxyXG4gICAgICAgICAgICB2YXIgbXNpZSA9IHVhLmluZGV4T2YoJ01TSUUgJyk7XHJcbiAgICAgICAgICAgIGlmIChtc2llID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSUUgMTAgb3Igb2xkZXIgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodWEuc3Vic3RyaW5nKG1zaWUgKyA1LCB1YS5pbmRleE9mKCcuJywgbXNpZSkpLCAxMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB0cmlkZW50ID0gdWEuaW5kZXhPZignVHJpZGVudC8nKTtcclxuICAgICAgICAgICAgaWYgKHRyaWRlbnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJRSAxMSA9PiByZXR1cm4gdmVyc2lvbiBudW1iZXJcclxuICAgICAgICAgICAgICAgIHZhciBydiA9IHVhLmluZGV4T2YoJ3J2OicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhydiArIDMsIHVhLmluZGV4T2YoJy4nLCBydikpLCAxMCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBlZGdlID0gdWEuaW5kZXhPZignRWRnZS8nKTtcclxuICAgICAgICAgICAgaWYgKGVkZ2UgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBFZGdlIChJRSAxMispID0+IHJldHVybiB2ZXJzaW9uIG51bWJlclxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhlZGdlICsgNSwgdWEuaW5kZXhPZignLicsIGVkZ2UpKSwgMTApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBvdGhlciBicm93c2VyXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc1JUTDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBodG1sID0gS1RVdGlsLmdldEJ5VGFnTmFtZSgnaHRtbCcpWzBdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGh0bWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoS1RVdGlsLmF0dHIoaHRtbCwgJ2RpcmVjdGlvbicpID09ICdydGwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFNjcm9sbGVyXHJcbiAgICAgICAgc2Nyb2xsSW5pdDogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gTGVhcm4gbW9yZTogaHR0cHM6Ly9naXRodWIuY29tL21kYm9vdHN0cmFwL3BlcmZlY3Qtc2Nyb2xsYmFyI29wdGlvbnNcclxuICAgICAgICAgICAgdmFyIHBsdWdpbkRlZk9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICB3aGVlbFNwZWVkOiAwLjUsXHJcbiAgICAgICAgICAgICAgICBzd2lwZUVhc2luZzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdoZWVsUHJvcGFnYXRpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbWluU2Nyb2xsYmFyTGVuZ3RoOiA0MCxcclxuICAgICAgICAgICAgICAgIG1heFNjcm9sbGJhckxlbmd0aDogMzAwLFxyXG4gICAgICAgICAgICAgICAgc3VwcHJlc3NTY3JvbGxYOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBvcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIHBsdWdpbkRlZk9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgLy8gRGVmaW5lIGluaXQgZnVuY3Rpb25cclxuICAgICAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcztcclxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gR2V0IGV4dHJhIG9wdGlvbnMgdmlhIGRhdGEgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dHJzID0gZWxlbWVudC5nZXRBdHRyaWJ1dGVOYW1lcygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uKGF0dHJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vcmUgb3B0aW9uczsgaHR0cHM6Ly9naXRodWIuY29tL2dhbmxhbnl1YW4vdGlueS1zbGlkZXIjb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKC9eZGF0YS0uKi9nKS50ZXN0KGF0dHJOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFsnc2Nyb2xsJywgJ2hlaWdodCcsICdtb2JpbGUtaGVpZ2h0J10uaW5jbHVkZXMob3B0aW9uTmFtZSkgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uTmFtZSA9IGF0dHJOYW1lLnJlcGxhY2UoJ2RhdGEtJywgJycpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKD86W1xccy1dKVxcdy9nLCBmdW5jdGlvbihtYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2gucmVwbGFjZSgnLScsICcnKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW29wdGlvbk5hbWVdID0gS1RVdGlsLmZpbHRlckJvb2xlYW4oZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhlaWdodCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQuY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkgPT09IHRydWUgJiYgb3B0aW9ucy5tb2JpbGVIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gcGFyc2VJbnQob3B0aW9ucy5tb2JpbGVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlSW50KG9wdGlvbnMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlaWdodCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsRGVzdHJveShlbGVtZW50LCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlSW50KGhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRGVzdHJveSBzY3JvbGwgb24gdGFibGUgYW5kIG1vYmlsZSBtb2Rlc1xyXG4gICAgICAgICAgICAgICAgaWYgKChvcHRpb25zLm1vYmlsZU5hdGl2ZVNjcm9sbCB8fCBvcHRpb25zLmRpc2FibGVGb3JNb2JpbGUpICYmIEtUVXRpbC5pc01vYmlsZURldmljZSgpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3BzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJlc2V0SGVpZ2h0T25EZXN0cm95KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnLCAnYXV0bycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbGVtZW50LCAnb3ZlcmZsb3cnLCAnYXV0bycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlaWdodCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnLCBoZWlnaHQgKyAncHgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHMuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcyA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLnJlbW92ZSgncHMnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhlaWdodCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbGVtZW50LCAnb3ZlcmZsb3cnLCAnYXV0bycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnLCBoZWlnaHQgKyAncHgnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcsIGhlaWdodCArICdweCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRlc2t0b3BOYXRpdmVTY3JvbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdvdmVyZmxvdycsICdhdXRvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFBhc3Mgb3B0aW9ucyB2aWEgSFRNTCBBdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICAgICBpZiAoS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2RhdGEtd2luZG93LXNjcm9sbCcpID09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMud2luZG93U2Nyb2xsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJbml0IHNjcm9sbFxyXG4gICAgICAgICAgICAgICAgcHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3BzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3MoZWxlbWVudCwgJ292ZXJmbG93JywgJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCAnc2Nyb2xsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBzID0gbmV3IFBlcmZlY3RTY3JvbGxiYXIoZWxlbWVudCwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKGVsZW1lbnQpLnNldCgncHMnLCBwcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgc2Nyb2xsIHBvc2l0aW9uIGluIGNvb2tpZVxyXG4gICAgICAgICAgICAgICAgdmFyIHVpZCA9IEtUVXRpbC5hdHRyKGVsZW1lbnQsICdpZCcpO1xyXG4gICAgICAgICAgICAgICAgLy8gQ29uc2lkZXIgdXNpbmcgTG9jYWxzdG9yYWdlXHJcbiAgICAgICAgICAgICAgICAvL2lmIChvcHRpb25zLnJlbWVtYmVyUG9zaXRpb24gPT09IHRydWUgJiYgQ29va2llcyAmJiB1aWQpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgIGlmIChLVENvb2tpZS5nZXRDb29raWUodWlkKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHZhciBwb3MgPSBwYXJzZUludChLVENvb2tpZS5nZXRDb29raWUodWlkKSk7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIGlmIChwb3MgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gcG9zO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vICAgIH1cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BzLXNjcm9sbC15JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgS1RDb29raWUuc2V0Q29va2llKHVpZCwgZWxlbWVudC5zY3JvbGxUb3ApO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdFxyXG4gICAgICAgICAgICBpbml0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBIYW5kbGUgd2luZG93IHJlc2l6ZVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYW5kbGVXaW5kb3dSZXNpemUpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRSZXNpemVIYW5kbGVyKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2Nyb2xsVXBkYXRlOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBwcyA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgncHMnKTtcclxuICAgICAgICAgICAgaWYgKHBzKSB7XHJcbiAgICAgICAgICAgICAgICBwcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNjcm9sbFVwZGF0ZUFsbDogZnVuY3Rpb24ocGFyZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxlcnMgPSBLVFV0aWwuZmluZEFsbChwYXJlbnQsICcucHMnKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNjcm9sbGVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFVwZGF0ZShzY3JvbGxlcnNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2Nyb2xsRGVzdHJveTogZnVuY3Rpb24oZWxlbWVudCwgcmVzZXRBbGwpIHtcclxuICAgICAgICAgICAgdmFyIHBzID0gS1RVdGlsLmRhdGEoZWxlbWVudCkuZ2V0KCdwcycpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBzKSB7XHJcbiAgICAgICAgICAgICAgICBwcy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICBwcyA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLnJlbW92ZSgncHMnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgcmVzZXRBbGwpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJ292ZXJmbG93JywgJycpO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnaGVpZ2h0JywgJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZmlsdGVyQm9vbGVhbjogZnVuY3Rpb24odmFsKSB7XHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIGJvb2xlYW5cclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2YWwgPT09IGZhbHNlIHx8IHZhbCA9PT0gJ2ZhbHNlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldEhUTUw6IGZ1bmN0aW9uKGVsLCBodG1sKSB7XHJcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0SFRNTDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgICAgaWYgKGVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RG9jdW1lbnRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcbiAgICAgICAgICAgIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0U2Nyb2xsVG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuc2Nyb2xsVG9wO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGNvbG9yRGFya2VuOiBmdW5jdGlvbihjb2xvciwgYW1vdW50KSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJ0cmFjdExpZ2h0ID0gZnVuY3Rpb24oY29sb3IsIGFtb3VudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNjID0gcGFyc2VJbnQoY29sb3IsIDE2KSAtIGFtb3VudDtcclxuICAgICAgICAgICAgICAgIHZhciBjID0gKGNjIDwgMCkgPyAwIDogKGNjKTtcclxuICAgICAgICAgICAgICAgIGMgPSAoYy50b1N0cmluZygxNikubGVuZ3RoID4gMSkgPyBjLnRvU3RyaW5nKDE2KSA6IGAwJHtjLnRvU3RyaW5nKDE2KX1gO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb2xvciA9IChjb2xvci5pbmRleE9mKFwiI1wiKSA+PSAwKSA/IGNvbG9yLnN1YnN0cmluZygxLCBjb2xvci5sZW5ndGgpIDogY29sb3I7XHJcbiAgICAgICAgICAgIGFtb3VudCA9IHBhcnNlSW50KCgyNTUgKiBhbW91bnQpIC8gMTAwKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvciA9IGAjJHtzdWJ0cmFjdExpZ2h0KGNvbG9yLnN1YnN0cmluZygwLDIpLCBhbW91bnQpfSR7c3VidHJhY3RMaWdodChjb2xvci5zdWJzdHJpbmcoMiw0KSwgYW1vdW50KX0ke3N1YnRyYWN0TGlnaHQoY29sb3Iuc3Vic3RyaW5nKDQsNiksIGFtb3VudCl9YDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBjb2xvckxpZ2h0ZW46IGZ1bmN0aW9uKGNvbG9yLCBhbW91bnQpIHtcclxuICAgICAgICAgICAgdmFyIGFkZExpZ2h0ID0gZnVuY3Rpb24oY29sb3IsIGFtb3VudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNjID0gcGFyc2VJbnQoY29sb3IsIDE2KSArIGFtb3VudDtcclxuICAgICAgICAgICAgICAgIHZhciBjID0gKGNjID4gMjU1KSA/IDI1NSA6IChjYyk7XHJcbiAgICAgICAgICAgICAgICBjID0gKGMudG9TdHJpbmcoMTYpLmxlbmd0aCA+IDEpID8gYy50b1N0cmluZygxNikgOiBgMCR7Yy50b1N0cmluZygxNil9YDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29sb3IgPSAoY29sb3IuaW5kZXhPZihcIiNcIikgPj0gMCkgPyBjb2xvci5zdWJzdHJpbmcoMSwgY29sb3IubGVuZ3RoKSA6IGNvbG9yO1xyXG4gICAgICAgICAgICBhbW91bnQgPSBwYXJzZUludCgoMjU1ICogYW1vdW50KSAvIDEwMCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29sb3IgPSBgIyR7YWRkTGlnaHQoY29sb3Iuc3Vic3RyaW5nKDAsMiksIGFtb3VudCl9JHthZGRMaWdodChjb2xvci5zdWJzdHJpbmcoMiw0KSwgYW1vdW50KX0ke2FkZExpZ2h0KGNvbG9yLnN1YnN0cmluZyg0LDYpLCBhbW91bnQpfWA7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gVGhyb3R0bGUgZnVuY3Rpb246IElucHV0IGFzIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGJlIHRocm90dGxlZCBhbmQgZGVsYXkgaXMgdGhlIHRpbWUgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgdGhyb3R0bGU6IGZ1bmN0aW9uKHRpbWVyLCBmdW5jLCBkZWxheSkge1xyXG4gICAgICAgICAgICAvLyBJZiBzZXRUaW1lb3V0IGlzIGFscmVhZHkgc2NoZWR1bGVkLCBubyBuZWVkIHRvIGRvIGFueXRoaW5nXHJcbiAgICAgICAgICAgIGlmICh0aW1lcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBTY2hlZHVsZSBhIHNldFRpbWVvdXQgYWZ0ZXIgZGVsYXkgc2Vjb25kc1xyXG4gICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gT25jZSBzZXRUaW1lb3V0IGZ1bmN0aW9uIGV4ZWN1dGlvbiBpcyBmaW5pc2hlZCwgdGltZXJJZCA9IHVuZGVmaW5lZCBzbyB0aGF0IGluIDxicj5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBuZXh0IHNjcm9sbCBldmVudCBmdW5jdGlvbiBleGVjdXRpb24gY2FuIGJlIHNjaGVkdWxlZCBieSB0aGUgc2V0VGltZW91dFxyXG4gICAgICAgICAgICAgICAgdGltZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEZWJvdW5jZSBmdW5jdGlvbjogSW5wdXQgYXMgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gYmUgZGVib3VuY2VkIGFuZCBkZWxheSBpcyB0aGUgZGVib3VuY2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgZGVib3VuY2U6IGZ1bmN0aW9uKHRpbWVyLCBmdW5jLCBkZWxheSkge1xyXG4gICAgICAgICAgICAvLyBDYW5jZWxzIHRoZSBzZXRUaW1lb3V0IG1ldGhvZCBleGVjdXRpb25cclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxyXG5cclxuICAgICAgICAgICAgLy8gRXhlY3V0ZXMgdGhlIGZ1bmMgYWZ0ZXIgZGVsYXkgdGltZS5cclxuICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmMsIGRlbGF5KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBidG5XYWl0OiBmdW5jdGlvbihlbCwgY2xzLCBtZXNzYWdlLCBkaXNhYmxlID0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkaXNhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYXR0cihlbCwgXCJkaXNhYmxlZFwiLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNscykge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsLCBjbHMpO1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmF0dHIoZWwsIFwid2FpdC1jbGFzc1wiLCBjbHMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhcHRpb24gPSBLVFV0aWwuZmluZChlbCwgJy5idG4tY2FwdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjYXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoY2FwdGlvbikuc2V0KCdjYXB0aW9uJywgS1RVdGlsLmdldEhUTUwoY2FwdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zZXRIVE1MKGNhcHRpb24sIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbCkuc2V0KCdjYXB0aW9uJywgS1RVdGlsLmdldEhUTUwoZWwpKTtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuc2V0SFRNTChlbCwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBidG5SZWxlYXNlOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vLyBTaG93IGxvYWRpbmcgc3RhdGUgb24gYnV0dG9uXHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVBdHRyKGVsLCBcImRpc2FibGVkXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKEtUVXRpbC5oYXNBdHRyKGVsLCBcIndhaXQtY2xhc3NcIikpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbCwgS1RVdGlsLmF0dHIoZWwsIFwid2FpdC1jbGFzc1wiKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjYXB0aW9uID0gS1RVdGlsLmZpbmQoZWwsICcuYnRuLWNhcHRpb24nKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYXB0aW9uICYmIEtUVXRpbC5kYXRhKGNhcHRpb24pLmhhcygnY2FwdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuc2V0SFRNTChjYXB0aW9uLCBLVFV0aWwuZGF0YShjYXB0aW9uKS5nZXQoJ2NhcHRpb24nKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoS1RVdGlsLmRhdGEoZWwpLmhhcygnY2FwdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuc2V0SFRNTChlbCwgS1RVdGlsLmRhdGEoZWwpLmdldCgnY2FwdGlvbicpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzT2Zmc2NyZWVuOiBmdW5jdGlvbihlbCwgZGlyZWN0aW9uLCBvZmZzZXQgPSAwKSB7XHJcbiAgICAgICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IEtUVXRpbC5nZXRWaWV3UG9ydCgpLndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgd2luZG93SGVpZ2h0ID0gS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdmFyIHRvcCA9IEtUVXRpbC5vZmZzZXQoZWwpLnRvcDtcclxuICAgICAgICAgICAgdmFyIGhlaWdodCA9IEtUVXRpbC5vdXRlckhlaWdodChlbCkgKyBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHZhciBsZWZ0ID0gS1RVdGlsLm9mZnNldChlbCkubGVmdDtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gS1RVdGlsLm91dGVyV2lkdGgoZWwpICsgb2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAnYm90dG9tJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd0hlaWdodCA8IHRvcCArIGhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3dIZWlnaHQgPiB0b3AgKyBoZWlnaHQgKiAxLjUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAndG9wJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRvcCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG9wID4gaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVmdCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGVmdCAqIDIgPiB3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2xlZnQgMicpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd1dpZHRoIDwgbGVmdCArIHdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3JpZ2h0IDInKTtcclxuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KCk7XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RVdGlsO1xyXG59XHJcblxyXG4vLyBJbml0aWFsaXplIEtUVXRpbCBjbGFzcyBvbiBkb2N1bWVudCByZWFkeVxyXG5LVFV0aWwucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAodHlwZW9mIEtUQXBwU2V0dGluZ3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgS1RVdGlsLmluaXQoS1RBcHBTZXR0aW5ncyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIEtUVXRpbC5pbml0KCk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8gQ1NTMyBUcmFuc2l0aW9ucyBvbmx5IGFmdGVyIHBhZ2UgbG9hZCgucGFnZS1sb2FkaW5nIGNsYXNzIGFkZGVkIHRvIGJvZHkgdGFnIGFuZCByZW1vdmUgd2l0aCBKUyBvbiBwYWdlIGxvYWQpXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciByZXN1bHQgPSBLVFV0aWwuZ2V0QnlUYWdOYW1lKCdib2R5Jyk7XHJcbiAgICBpZiAocmVzdWx0ICYmIHJlc3VsdFswXSkge1xyXG4gICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhyZXN1bHRbMF0sICdwYWdlLWxvYWRpbmcnKTtcclxuICAgIH1cclxufSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gQ29tcG9uZW50IERlZmluaXRpb25cclxudmFyIEtUV2l6YXJkID0gZnVuY3Rpb24oZWxlbWVudElkLCBvcHRpb25zKSB7XHJcbiAgICAvLyBNYWluIG9iamVjdFxyXG4gICAgdmFyIHRoZSA9IHRoaXM7XHJcbiAgICB2YXIgaW5pdCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIEdldCBlbGVtZW50IG9iamVjdFxyXG4gICAgdmFyIGVsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChlbGVtZW50SWQpO1xyXG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0Qm9keSgpO1xyXG5cclxuICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZWZhdWx0IG9wdGlvbnNcclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBzdGFydFN0ZXA6IDEsXHJcbiAgICAgICAgY2xpY2thYmxlU3RlcHM6IGZhbHNlIC8vIHRvIG1ha2Ugc3RlcHMgY2xpY2thYmxlIHRoaXMgc2V0IHZhbHVlIHRydWUgYW5kIGFkZCBkYXRhLXdpemFyZC1jbGlja2FibGU9XCJ0cnVlXCIgaW4gSFRNTCBmb3IgY2xhc3M9XCJ3aXphcmRcIiBlbGVtZW50XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgUGx1Z2luID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0cnVjdFxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKEtUVXRpbC5kYXRhKGVsZW1lbnQpLmhhcygnd2l6YXJkJykpIHtcclxuICAgICAgICAgICAgICAgIHRoZSA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgnd2l6YXJkJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXNldCBtZW51XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uaW5pdChvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBtZW51XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uYnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbGVtZW50KS5zZXQoJ3dpemFyZCcsIHRoZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5pdCB3aXphcmRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoZS5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcclxuICAgICAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgLy8gRWxlbWVudHNcclxuICAgICAgICAgICAgdGhlLnN0ZXBzID0gS1RVdGlsLmZpbmRBbGwoZWxlbWVudCwgJ1tkYXRhLXdpemFyZC10eXBlPVwic3RlcFwiXScpO1xyXG5cclxuICAgICAgICAgICAgdGhlLmJ0blN1Ym1pdCA9IEtUVXRpbC5maW5kKGVsZW1lbnQsICdbZGF0YS13aXphcmQtdHlwZT1cImFjdGlvbi1zdWJtaXRcIl0nKTtcclxuICAgICAgICAgICAgdGhlLmJ0bk5leHQgPSBLVFV0aWwuZmluZChlbGVtZW50LCAnW2RhdGEtd2l6YXJkLXR5cGU9XCJhY3Rpb24tbmV4dFwiXScpO1xyXG4gICAgICAgICAgICB0aGUuYnRuUHJldiA9IEtUVXRpbC5maW5kKGVsZW1lbnQsICdbZGF0YS13aXphcmQtdHlwZT1cImFjdGlvbi1wcmV2XCJdJyk7XHJcbiAgICAgICAgICAgIHRoZS5idG5MYXN0ID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJ1tkYXRhLXdpemFyZC10eXBlPVwiYWN0aW9uLWxhc3RcIl0nKTtcclxuICAgICAgICAgICAgdGhlLmJ0bkZpcnN0ID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJ1tkYXRhLXdpemFyZC10eXBlPVwiYWN0aW9uLWZpcnN0XCJdJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBWYXJpYWJsZXNcclxuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xyXG4gICAgICAgICAgICB0aGUuY3VycmVudFN0ZXAgPSAxO1xyXG4gICAgICAgICAgICB0aGUuc3RvcHBlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGUudG90YWxTdGVwcyA9IHRoZS5zdGVwcy5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0IGN1cnJlbnQgc3RlcFxyXG4gICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMuc3RhcnRTdGVwID4gMSkge1xyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmdvVG8odGhlLm9wdGlvbnMuc3RhcnRTdGVwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdCBVSVxyXG4gICAgICAgICAgICBQbHVnaW4udXBkYXRlVUkoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCdWlsZCBGb3JtIFdpemFyZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gTmV4dCBidXR0b24gZXZlbnQgaGFuZGxlclxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQodGhlLmJ0bk5leHQsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5nb1RvKFBsdWdpbi5nZXROZXh0U3RlcCgpLCB0cnVlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBQcmV2IGJ1dHRvbiBldmVudCBoYW5kbGVyXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudCh0aGUuYnRuUHJldiwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgUGx1Z2luLmdvVG8oUGx1Z2luLmdldFByZXZTdGVwKCksIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZpcnN0IGJ1dHRvbiBldmVudCBoYW5kbGVyXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudCh0aGUuYnRuRmlyc3QsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5nb1RvKFBsdWdpbi5nZXRGaXJzdFN0ZXAoKSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gTGFzdCBidXR0b24gZXZlbnQgaGFuZGxlclxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQodGhlLmJ0bkxhc3QsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5nb1RvKFBsdWdpbi5nZXRMYXN0U3RlcCgpLCB0cnVlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMuY2xpY2thYmxlU3RlcHMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5vbihlbGVtZW50LCAnW2RhdGEtd2l6YXJkLXR5cGU9XCJzdGVwXCJdJywgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gS1RVdGlsLmluZGV4KHRoaXMpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IHRoZS5jdXJyZW50U3RlcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4uZ29UbyhpbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHdpemFyZCBjbGljayB3aXphcmRcclxuICAgICAgICAgKi9cclxuICAgICAgICBnb1RvOiBmdW5jdGlvbihudW1iZXIsIGV2ZW50SGFuZGxlKSB7XHJcbiAgICAgICAgICAgIC8vIFNraXAgaWYgdGhpcyBzdGVwIGlzIGFscmVhZHkgc2hvd25cclxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gdGhlLmN1cnJlbnRTdGVwIHx8IG51bWJlciA+IHRoZS50b3RhbFN0ZXBzIHx8IG51bWJlciA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGUgc3RlcCBudW1iZXJcclxuICAgICAgICAgICAgaWYgKG51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG51bWJlciA9IFBsdWdpbi5nZXROZXh0U3RlcCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBCZWZvcmUgbmV4dCBhbmQgcHJldiBldmVudHNcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrO1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50SGFuZGxlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID4gdGhlLmN1cnJlbnRTdGVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdiZWZvcmVOZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlUHJldicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBTa2lwIGlmIHN0b3BwZWRcclxuICAgICAgICAgICAgaWYgKHRoZS5zdG9wcGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGUuc3RvcHBlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDb250aW51ZSBpZiBubyBleGl0XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIEJlZm9yZSBjaGFuZ2VcclxuICAgICAgICAgICAgICAgIGlmIChldmVudEhhbmRsZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2JlZm9yZUNoYW5nZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNldCBjdXJyZW50IHN0ZXBcclxuICAgICAgICAgICAgICAgIHRoZS5jdXJyZW50U3RlcCA9IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgICAgICBQbHVnaW4udXBkYXRlVUkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIGNoYW5nZSBldmVudFxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50SGFuZGxlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFmdGVyIG5leHQgYW5kIHByZXYgZXZlbnRzXHJcbiAgICAgICAgICAgIGlmIChldmVudEhhbmRsZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA+IHRoZS5zdGFydFN0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlck5leHQnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignYWZ0ZXJQcmV2Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FuY2VsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoZS5zdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXN1bWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoZS5zdG9wcGVkID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2sgbGFzdCBzdGVwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNMYXN0U3RlcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGUuY3VycmVudFN0ZXAgPT09IHRoZS50b3RhbFN0ZXBzO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoZWNrIGZpcnN0IHN0ZXBcclxuICAgICAgICAgKi9cclxuICAgICAgICBpc0ZpcnN0U3RlcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGUuY3VycmVudFN0ZXAgPT09IDE7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2sgYmV0d2VlbiBzdGVwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNCZXR3ZWVuU3RlcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQbHVnaW4uaXNMYXN0U3RlcCgpID09PSBmYWxzZSAmJiBQbHVnaW4uaXNGaXJzdFN0ZXAoKSA9PT0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR28gdG8gdGhlIGZpcnN0IHN0ZXBcclxuICAgICAgICAgKi9cclxuICAgICAgICB1cGRhdGVVSTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGVwVHlwZSA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGUuY3VycmVudFN0ZXAgLSAxO1xyXG5cclxuICAgICAgICAgICAgaWYgKFBsdWdpbi5pc0xhc3RTdGVwKCkpIHtcclxuICAgICAgICAgICAgICAgIHN0ZXBUeXBlID0gJ2xhc3QnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFBsdWdpbi5pc0ZpcnN0U3RlcCgpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwVHlwZSA9ICdmaXJzdCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwVHlwZSA9ICdiZXR3ZWVuJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgS1RVdGlsLmF0dHIodGhlLmVsZW1lbnQsICdkYXRhLXdpemFyZC1zdGF0ZScsIHN0ZXBUeXBlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFN0ZXBzXHJcbiAgICAgICAgICAgIHZhciBzdGVwcyA9IEtUVXRpbC5maW5kQWxsKHRoZS5lbGVtZW50LCAnW2RhdGEtd2l6YXJkLXR5cGU9XCJzdGVwXCJdJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RlcHMgJiYgc3RlcHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0ZXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmF0dHIoc3RlcHNbaV0sICdkYXRhLXdpemFyZC1zdGF0ZScsICdjdXJyZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmF0dHIoc3RlcHNbaV0sICdkYXRhLXdpemFyZC1zdGF0ZScsICdkb25lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYXR0cihzdGVwc1tpXSwgJ2RhdGEtd2l6YXJkLXN0YXRlJywgJ3BlbmRpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU3RlcHMgSW5mb1xyXG4gICAgICAgICAgICB2YXIgc3RlcHNJbmZvID0gS1RVdGlsLmZpbmRBbGwodGhlLmVsZW1lbnQsICdbZGF0YS13aXphcmQtdHlwZT1cInN0ZXAtaW5mb1wiXScpO1xyXG4gICAgICAgICAgICBpZiAoc3RlcHNJbmZvICYmc3RlcHNJbmZvLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzdGVwc0luZm8ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYXR0cihzdGVwc0luZm9baV0sICdkYXRhLXdpemFyZC1zdGF0ZScsICdjdXJyZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUF0dHIoc3RlcHNJbmZvW2ldLCAnZGF0YS13aXphcmQtc3RhdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFN0ZXBzIENvbnRlbnRcclxuICAgICAgICAgICAgdmFyIHN0ZXBzQ29udGVudCA9IEtUVXRpbC5maW5kQWxsKHRoZS5lbGVtZW50LCAnW2RhdGEtd2l6YXJkLXR5cGU9XCJzdGVwLWNvbnRlbnRcIl0nKTtcclxuICAgICAgICAgICAgaWYgKHN0ZXBzQ29udGVudCYmIHN0ZXBzQ29udGVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RlcHNDb250ZW50Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmF0dHIoc3RlcHNDb250ZW50W2ldLCAnZGF0YS13aXphcmQtc3RhdGUnLCAnY3VycmVudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVBdHRyKHN0ZXBzQ29udGVudFtpXSwgJ2RhdGEtd2l6YXJkLXN0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogR2V0IG5leHQgc3RlcFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldE5leHRTdGVwOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoZS50b3RhbFN0ZXBzID49ICh0aGUuY3VycmVudFN0ZXAgKyAxKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoZS5jdXJyZW50U3RlcCArIDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhlLnRvdGFsU3RlcHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBHZXQgcHJldiBzdGVwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0UHJldlN0ZXA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoKHRoZS5jdXJyZW50U3RlcCAtIDEpID49IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGUuY3VycmVudFN0ZXAgLSAxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUcmlnZ2VyIGV2ZW50c1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV2ZW50VHJpZ2dlcjogZnVuY3Rpb24obmFtZSwgbmVzdGVkKSB7XHJcbiAgICAgICAgICAgIC8vS1RVdGlsLnRyaWdnZXJDdXN0b21FdmVudChuYW1lKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGUuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGUuZXZlbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5vbmUgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZmlyZWQgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZS5ldmVudHNbaV0uZmlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihuYW1lLCBoYW5kbGVyLCBvbmUpIHtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxyXG4gICAgICAgICAgICAgICAgb25lOiBvbmUsXHJcbiAgICAgICAgICAgICAgICBmaXJlZDogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFB1YmxpYyBNZXRob2RzICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGRlZmF1bHQgb3B0aW9uc1xyXG4gICAgICovXHJcblxyXG4gICAgdGhlLnNldERlZmF1bHRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIGRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHbyB0byB0aGUgbmV4dCBzdGVwXHJcbiAgICAgKi9cclxuICAgIHRoZS5nb05leHQgPSBmdW5jdGlvbihldmVudEhhbmRsZSkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uZ29UbyhQbHVnaW4uZ2V0TmV4dFN0ZXAoKSwgZXZlbnRIYW5kbGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdvIHRvIHRoZSBwcmV2IHN0ZXBcclxuICAgICAqL1xyXG4gICAgdGhlLmdvUHJldiA9IGZ1bmN0aW9uKGV2ZW50SGFuZGxlKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5nb1RvKFBsdWdpbi5nZXRQcmV2U3RlcCgpLGV2ZW50SGFuZGxlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHbyB0byB0aGUgbGFzdCBzdGVwXHJcbiAgICAgKi9cclxuICAgIHRoZS5nb0xhc3QgPSBmdW5jdGlvbihldmVudEhhbmRsZSkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uZ29UbyhQbHVnaW4uZ2V0TGFzdFN0ZXAoKSwgZXZlbnRIYW5kbGUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdvIHRvIHRoZSBmaXJzdCBzdGVwXHJcbiAgICAgKi9cclxuICAgIHRoZS5nb0ZpcnN0ID0gZnVuY3Rpb24oZXZlbnRIYW5kbGUpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmdvVG8oUGx1Z2luLmdldEZpcnN0U3RlcCgpLCBldmVudEhhbmRsZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR28gdG8gYSBzdGVwXHJcbiAgICAgKi9cclxuICAgIHRoZS5nb1RvID0gZnVuY3Rpb24obnVtYmVyLCBldmVudEhhbmRsZSkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uZ29UbyhudW1iZXIsIGV2ZW50SGFuZGxlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYW5jZWwgc3RlcFxyXG4gICAgICovXHJcbiAgICB0aGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uc3RvcCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc3VtZSBzdGVwXHJcbiAgICAgKi9cclxuICAgIHRoZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uc3RhcnQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgY3VycmVudCBzdGVwIG51bWJlclxyXG4gICAgICovXHJcbiAgICB0aGUuZ2V0U3RlcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGUuY3VycmVudFN0ZXA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgbGFzdCBzdGVwXHJcbiAgICAgKi9cclxuICAgIHRoZS5pc0xhc3RTdGVwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5pc0xhc3RTdGVwKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgZmlyc3Qgc3RlcFxyXG4gICAgICovXHJcbiAgICB0aGUuaXNGaXJzdFN0ZXAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmlzRmlyc3RTdGVwKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHRoZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCBldmVudCB0aGF0IHdpbGwgYmUgZmlyZWQgb25jZVxyXG4gICAgICovXHJcbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlciwgdHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENvbnN0cnVjdCBwbHVnaW5cclxuICAgIFBsdWdpbi5jb25zdHJ1Y3QuYXBwbHkodGhlLCBbb3B0aW9uc10pO1xyXG5cclxuICAgIHJldHVybiB0aGU7XHJcbn07XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RXaXphcmQ7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRBc2lkZU1lbnUgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9tZW51T2JqZWN0O1xyXG5cclxuXHQvLyBJbml0aWFsaXplXHJcblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgbWVudURlc2t0b3BNb2RlID0gKEtUVXRpbC5hdHRyKF9lbGVtZW50LCAnZGF0YS1tZW51LWRyb3Bkb3duJykgPT09ICcxJyA/ICdkcm9wZG93bicgOiAnYWNjb3JkaW9uJyk7XHJcbiAgICAgICAgdmFyIHNjcm9sbDtcclxuXHJcblx0XHRpZiAoS1RVdGlsLmF0dHIoX2VsZW1lbnQsICdkYXRhLW1lbnUtc2Nyb2xsJykgPT09ICcxJykge1xyXG5cdFx0XHRzY3JvbGwgPSB7XHJcblx0XHRcdFx0cmVtZW1iZXJQb3NpdGlvbjogdHJ1ZSwgLy8gcmVtZW1iZXIgcG9zaXRpb24gb24gcGFnZSByZWxvYWRcclxuXHRcdFx0XHRoZWlnaHQ6IGZ1bmN0aW9uKCkgeyAvLyBjYWxjdWxhdGUgYXZhaWxhYmxlIHNjcm9sbGFibGUgYXJlYSBoZWlnaHRcclxuXHRcdFx0XHRcdHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpO1xyXG5cclxuXHRcdFx0XHRcdGlmIChLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykpIHtcclxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gS1RMYXlvdXRCcmFuZC5nZXRIZWlnaHQoKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRoZWlnaHQgPSBoZWlnaHQgLSAocGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ21hcmdpbkJvdHRvbScpKSArIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdtYXJnaW5Ub3AnKSkpO1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBoZWlnaHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdF9tZW51T2JqZWN0ID0gbmV3IEtUTWVudShfZWxlbWVudCwge1xyXG5cdFx0XHQvLyBWZXJ0aWNhbCBzY3JvbGxcclxuXHRcdFx0c2Nyb2xsOiBzY3JvbGwsXHJcblxyXG5cdFx0XHQvLyBTdWJtZW51IHNldHVwXHJcblx0XHRcdHN1Ym1lbnU6IHtcclxuXHRcdFx0XHRkZXNrdG9wOiBtZW51RGVza3RvcE1vZGUsXHJcblx0XHRcdFx0dGFibGV0OiAnYWNjb3JkaW9uJywgLy8gbWVudSBzZXQgdG8gYWNjb3JkaW9uIGluIHRhYmxldCBtb2RlXHJcblx0XHRcdFx0bW9iaWxlOiAnYWNjb3JkaW9uJyAvLyBtZW51IHNldCB0byBhY2NvcmRpb24gaW4gbW9iaWxlIG1vZGVcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8vIEFjY29yZGlvbiBzZXR1cFxyXG5cdFx0XHRhY2NvcmRpb246IHtcclxuXHRcdFx0XHRleHBhbmRBbGw6IGZhbHNlIC8vIGFsbG93IGhhdmluZyBtdWx0aXBsZSBleHBhbmRlZCBhY2NvcmRpb25zIGluIHRoZSBtZW51XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuICAgICAgICAvLyBEaXNhYmxlIG1lbnUgY2xpY2sgaWYgYXNpZGUgaXMgZml4ZWQgYW5kIG1pbmltaXplZFxyXG4gICAgICAgIF9tZW51T2JqZWN0Lm9uKCdzdWJtZW51VG9nZ2xlJywgZnVuY3Rpb24obWVudSkge1xyXG4gICAgICAgICAgICBpZiAoS1RMYXlvdXRBc2lkZS5pc01pbmltaXplZCgpID09PSB0cnVlICAmJiBLVExheW91dEFzaWRlLmlzSG92ZXJhYmxlKCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQ2xvc2UgYXNpZGUgb2ZmY2FudmFzIHBhbmVsIGJlZm9yZSBwYWdlIHJlbG9hZCBPbiB0YWJsZXQgYW5kIG1vYmlsZVxyXG4gICAgICAgIF9tZW51T2JqZWN0Lm9uKCdsaW5rQ2xpY2snLCBmdW5jdGlvbihtZW51KSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuaXNCcmVha3BvaW50RG93bignbGcnKSkgeyAvLyBUYWJsZXQgYW5kIG1vYmlsZSBtb2RlXHJcbiAgICAgICAgICAgICAgICBLVExheW91dEFzaWRlLmdldE9mZmNhbnZhcygpLmhpZGUoKTsgLy8gSGlkZSBvZmZjYW52YXMgYWZ0ZXIgZ2VuZXJhbCBsaW5rIGNsaWNrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgbWVudVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF9lbGVtZW50O1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0TWVudTogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBfbWVudU9iamVjdDtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIHBhdXNlRHJvcGRvd25Ib3ZlcjogZnVuY3Rpb24odGltZSkge1xyXG5cdFx0XHRpZiAoX21lbnVPYmplY3QpIHtcclxuXHRcdFx0XHRfbWVudU9iamVjdC5wYXVzZURyb3Bkb3duSG92ZXIodGltZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Y2xvc2VNb2JpbGVPZmZjYW52YXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoX21lbnVPYmplY3QgJiYgS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkpIHtcclxuXHRcdFx0XHRfbWVudU9iamVjdC5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEFzaWRlTWVudTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEFzaWRlVG9nZ2xlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfYm9keTtcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfdG9nZ2xlT2JqZWN0O1xyXG5cclxuXHQvLyBJbml0aWFsaXplXHJcblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRfdG9nZ2xlT2JqZWN0ID0gbmV3IEtUVG9nZ2xlKF9lbGVtZW50LCB7XHJcblx0XHRcdHRhcmdldDogX2JvZHksXHJcblx0XHRcdHRhcmdldFN0YXRlOiAnYXNpZGUtbWluaW1pemUnLFxyXG5cdFx0XHR0b2dnbGVTdGF0ZTogJ2FjdGl2ZSdcclxuXHRcdH0pO1xyXG5cclxuXHRcdF90b2dnbGVPYmplY3Qub24oJ3RvZ2dsZScsIGZ1bmN0aW9uKHRvZ2dsZSkge1xyXG4gICAgICAgICAgICAvLyBVcGRhdGUgc3RpY2t5IGNhcmRcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBLVExheW91dFN0aWNreUNhcmQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBLVExheW91dFN0aWNreUNhcmQudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFBhdXNlIGhlYWRlciBtZW51IGRyb3Bkb3duc1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEtUTGF5b3V0SGVhZGVyTWVudSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIEtUTGF5b3V0SGVhZGVyTWVudS5wYXVzZURyb3Bkb3duSG92ZXIoODAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUGF1c2UgYXNpZGUgbWVudSBkcm9wZG93bnNcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBLVExheW91dEFzaWRlTWVudSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIEtUTGF5b3V0QXNpZGVNZW51LnBhdXNlRHJvcGRvd25Ib3Zlcig4MDApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1lbWJlciBzdGF0ZSBpbiBjb29raWVcclxuXHRcdFx0S1RDb29raWUuc2V0Q29va2llKCdrdF9hc2lkZV90b2dnbGVfc3RhdGUnLCB0b2dnbGUuZ2V0U3RhdGUoKSk7XHJcblx0XHRcdC8vIHRvIHNldCBkZWZhdWx0IG1pbmltaXplZCBsZWZ0IGFzaWRlIHVzZSB0aGlzIGNvb2tpZSB2YWx1ZSBpbiB5b3VyXHJcblx0XHRcdC8vIHNlcnZlciBzaWRlIGNvZGUgYW5kIGFkZCBcImt0LXByaW1hcnktLW1pbmltaXplIGFzaWRlLW1pbmltaXplXCIgY2xhc3NlcyB0b1xyXG5cdFx0XHQvLyB0aGUgYm9keSB0YWcgaW4gb3JkZXIgdG8gaW5pdGlhbGl6ZSB0aGUgbWluaW1pemVkIGxlZnQgYXNpZGUgbW9kZSBkdXJpbmcgcGFnZSBsb2FkaW5nLlxyXG5cdFx0fSk7XHJcblxyXG5cdFx0X3RvZ2dsZU9iamVjdC5vbignYmVmb3JlVG9nZ2xlJywgZnVuY3Rpb24odG9nZ2xlKSB7XHJcblx0XHRcdGlmIChLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZScpID09PSBmYWxzZSAmJiBLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZS1ob3ZlcicpKSB7XHJcblx0XHRcdFx0S1RVdGlsLnJlbW92ZUNsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUtaG92ZXInKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG4gICAgICAgICAgICBfYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0VG9nZ2xlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0cmV0dXJuIF90b2dnbGVPYmplY3Q7XHJcblx0XHR9LFxyXG5cclxuXHRcdG9uVG9nZ2xlOiBmdW5jdGlvbihoYW5kbGVyKSB7XHJcblx0XHRcdGlmICh0eXBlb2YgX3RvZ2dsZU9iamVjdC5lbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRcdF90b2dnbGVPYmplY3Qub24oJ3RvZ2dsZScsIGhhbmRsZXIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRBc2lkZVRvZ2dsZTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEFzaWRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfYm9keTtcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0Ly8gSW5pdGlhbGl6ZVxyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIG9mZmNhbnZhc0NsYXNzID0gS1RVdGlsLmhhc0NsYXNzKF9lbGVtZW50LCAnYXNpZGUtb2ZmY2FudmFzLWRlZmF1bHQnKSA/ICdhc2lkZS1vZmZjYW52YXMtZGVmYXVsdCcgOiAnYXNpZGUnO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIG1vYmlsZSBhc2lkZSBvZmZjYW52YXNcclxuXHRcdF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX2VsZW1lbnQsIHtcclxuXHRcdFx0YmFzZUNsYXNzOiBvZmZjYW52YXNDbGFzcyxcclxuXHRcdFx0b3ZlcmxheTogdHJ1ZSxcclxuXHRcdFx0Y2xvc2VCeTogJ2t0X2FzaWRlX2Nsb3NlX2J0bicsXHJcblx0XHRcdHRvZ2dsZUJ5OiB7XHJcblx0XHRcdFx0dGFyZ2V0OiAna3RfYXNpZGVfbW9iaWxlX3RvZ2dsZScsXHJcblx0XHRcdFx0c3RhdGU6ICdtb2JpbGUtdG9nZ2xlLWFjdGl2ZSdcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gSGFuZGxlIE1pbmltaXplZCBBc2lkZSBIb3ZlclxyXG5cdFx0aWYgKEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLWZpeGVkJykgJiYgS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUtaG92ZXJhYmxlJykpIHtcclxuXHRcdFx0dmFyIGluc2lkZVRtO1xyXG5cdFx0XHR2YXIgb3V0c2lkZVRtO1xyXG5cclxuICAgICAgICAgICAgLy8gSGFuZGxlIEFzaWRlIEhvdmVyIE1vZGVcclxuXHRcdFx0S1RVdGlsLmFkZEV2ZW50KF9lbGVtZW50LCAnbW91c2VlbnRlcicsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdGlmIChLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAob3V0c2lkZVRtKSB7XHJcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQob3V0c2lkZVRtKTtcclxuXHRcdFx0XHRcdG91dHNpZGVUbSA9IG51bGw7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpbnNpZGVUbSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUnKSAmJiBLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykpIHtcclxuXHRcdFx0XHRcdFx0S1RVdGlsLnJlbW92ZUNsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUnKTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEhvdmVyIGNsYXNzXHJcblx0XHRcdFx0XHRcdEtUVXRpbC5hZGRDbGFzcyhfYm9keSwgJ2FzaWRlLW1pbmltaXplLWhvdmVyJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRLVExheW91dEFzaWRlTWVudS5nZXRNZW51KCkuc2Nyb2xsVXBkYXRlKCk7XHJcblx0XHRcdFx0XHRcdEtUTGF5b3V0QXNpZGVNZW51LmdldE1lbnUoKS5zY3JvbGxUb3AoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCA1MCk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0S1RVdGlsLmFkZEV2ZW50KF9lbGVtZW50LCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdGlmIChLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoaW5zaWRlVG0pIHtcclxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChpbnNpZGVUbSk7XHJcblx0XHRcdFx0XHRpbnNpZGVUbSA9IG51bGw7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRvdXRzaWRlVG0gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdCAgICBpZiAoS1RVdGlsLmhhc0NsYXNzKF9ib2R5LCAnYXNpZGUtbWluaW1pemUtaG92ZXInKSAmJiBLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykpIHtcclxuXHRcdFx0XHRcdCAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoX2JvZHksICdhc2lkZS1taW5pbWl6ZS1ob3ZlcicpO1xyXG5cdFx0XHRcdFx0ICAgIEtUVXRpbC5hZGRDbGFzcyhfYm9keSwgJ2FzaWRlLW1pbmltaXplJyk7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBIb3ZlciBjbGFzc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVExheW91dEFzaWRlTWVudS5nZXRNZW51KCkuc2Nyb2xsVXBkYXRlKCk7XHJcblx0XHRcdFx0XHRcdEtUTGF5b3V0QXNpZGVNZW51LmdldE1lbnUoKS5zY3JvbGxUb3AoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCAxMDApO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcbiAgICAgICAgICAgIF9ib2R5ID0gS1RVdGlsLmdldEJvZHkoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0T2ZmY2FudmFzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9vZmZjYW52YXNPYmplY3Q7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNGaXhlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1maXhlZCcpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzTWluaW1pemVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1maXhlZCcpICYmIEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLW1pbmltaXplJykpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzSG92ZXJhYmxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChLVFV0aWwuaGFzQ2xhc3MoX2JvZHksICdhc2lkZS1maXhlZCcpICYmIEtUVXRpbC5oYXNDbGFzcyhfYm9keSwgJ2FzaWRlLW1pbmltaXplLWhvdmVyYWJsZScpKTtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRBc2lkZTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEJyYW5kID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIF9nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgaWYgKF9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IEtUVXRpbC5hY3R1YWxIZWlnaHQoX2VsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2dldEhlaWdodCgpO1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEJyYW5kO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0Q29udGVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcblxyXG5cdC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0dmFyIF9nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoZWlnaHQ7XHJcblxyXG5cdFx0aGVpZ2h0ID0gS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAoX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdUb3AnKSkgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ0JvdHRvbScpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhlaWdodCA9IGhlaWdodCAtIEtUTGF5b3V0SGVhZGVyLmdldEhlaWdodCgpO1xyXG4gICAgICAgIGhlaWdodCA9IGhlaWdodCAtIEtUTGF5b3V0U3ViaGVhZGVyLmdldEhlaWdodCgpO1xyXG4gICAgICAgIGhlaWdodCA9IGhlaWdodCAtIEtUTGF5b3V0Rm9vdGVyLmdldEhlaWdodCgpO1xyXG5cclxuXHRcdHJldHVybiBoZWlnaHQ7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX2dldEhlaWdodCgpO1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRDb250ZW50O1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0Rm9vdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuXHJcblx0Ly8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuXHR2YXIgX2dldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG5cdFx0cmV0dXJuIGhlaWdodDtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGdldEhlaWdodDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBfZ2V0SGVpZ2h0KCk7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEZvb3RlcjtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEhlYWRlck1lbnUgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdHZhciBfbWVudUVsZW1lbnQ7XHJcbiAgICB2YXIgX21lbnVPYmplY3Q7XHJcbiAgICB2YXIgX29mZmNhbnZhc0VsZW1lbnQ7XHJcbiAgICB2YXIgX29mZmNhbnZhc09iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0X29mZmNhbnZhc09iamVjdCA9IG5ldyBLVE9mZmNhbnZhcyhfb2ZmY2FudmFzRWxlbWVudCwge1xyXG5cdFx0XHRvdmVybGF5OiB0cnVlLFxyXG5cdFx0XHRiYXNlQ2xhc3M6ICdoZWFkZXItbWVudS13cmFwcGVyJyxcclxuXHRcdFx0Y2xvc2VCeTogJ2t0X2hlYWRlcl9tZW51X21vYmlsZV9jbG9zZV9idG4nLFxyXG5cdFx0XHR0b2dnbGVCeToge1xyXG5cdFx0XHRcdHRhcmdldDogJ2t0X2hlYWRlcl9tb2JpbGVfdG9nZ2xlJyxcclxuXHRcdFx0XHRzdGF0ZTogJ21vYmlsZS10b2dnbGUtYWN0aXZlJ1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdFxyXG5cdFx0X21lbnVPYmplY3QgPSBuZXcgS1RNZW51KF9tZW51RWxlbWVudCwge1xyXG5cdFx0XHRzdWJtZW51OiB7XHJcblx0XHRcdFx0ZGVza3RvcDogJ2Ryb3Bkb3duJyxcclxuXHRcdFx0XHR0YWJsZXQ6ICdhY2NvcmRpb24nLFxyXG5cdFx0XHRcdG1vYmlsZTogJ2FjY29yZGlvbidcclxuXHRcdFx0fSxcclxuXHRcdFx0YWNjb3JkaW9uOiB7XHJcblx0XHRcdFx0c2xpZGVTcGVlZDogMjAwLCAvLyBhY2NvcmRpb24gdG9nZ2xlIHNsaWRlIHNwZWVkIGluIG1pbGxpc2Vjb25kc1xyXG5cdFx0XHRcdGV4cGFuZEFsbDogZmFsc2UgLy8gYWxsb3cgaGF2aW5nIG11bHRpcGxlIGV4cGFuZGVkIGFjY29yZGlvbnMgaW4gdGhlIG1lbnVcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gQ2xvc2UgYXNpZGUgb2ZmY2FudmFzIHBhbmVsIGJlZm9yZSBwYWdlIHJlbG9hZCBPbiB0YWJsZXQgYW5kIG1vYmlsZVxyXG4gICAgICAgIF9tZW51T2JqZWN0Lm9uKCdsaW5rQ2xpY2snLCBmdW5jdGlvbihtZW51KSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuaXNCcmVha3BvaW50RG93bignbGcnKSkgeyAvLyBUYWJsZXQgYW5kIG1vYmlsZSBtb2RlXHJcbiAgICAgICAgICAgICAgICBfb2ZmY2FudmFzT2JqZWN0LmhpZGUoKTsgLy8gSGlkZSBvZmZjYW52YXMgYWZ0ZXIgZ2VuZXJhbCBsaW5rIGNsaWNrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHR9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG1lbnVJZCwgb2ZmY2FudmFzSWQpIHtcclxuICAgICAgICAgICAgX21lbnVFbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQobWVudUlkKTtcclxuICAgICAgICAgICAgX29mZmNhbnZhc0VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChvZmZjYW52YXNJZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9tZW51RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIG1lbnVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0TWVudUVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX21lbnVFbGVtZW50O1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0T2ZmY2FudmFzRWxlbWVudDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBfb2ZmY2FudmFzRWxlbWVudDtcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldE1lbnU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRyZXR1cm4gX21lbnVPYmplY3Q7XHJcblx0XHR9LFxyXG5cclxuXHRcdHBhdXNlRHJvcGRvd25Ib3ZlcjogZnVuY3Rpb24odGltZSkge1xyXG5cdFx0XHRpZiAoX21lbnVPYmplY3QpIHtcclxuXHRcdFx0XHRfbWVudU9iamVjdC5wYXVzZURyb3Bkb3duSG92ZXIodGltZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG4gICAgICAgIGdldE9mZmNhbnZhczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cdFx0fSxcclxuXHJcblx0XHRjbG9zZU1vYmlsZU9mZmNhbnZhczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmIChfbWVudU9iamVjdCAmJiBLVFV0aWwuaXNNb2JpbGVEZXZpY2UoKSkge1xyXG5cdFx0XHRcdF9vZmZjYW52YXNPYmplY3QuaGlkZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRIZWFkZXJNZW51O1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0SGVhZGVyVG9wYmFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX3RvZ2dsZUVsZW1lbnQ7XHJcbiAgICB2YXIgX3RvZ2dsZU9iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdF90b2dnbGVPYmplY3QgPSBuZXcgS1RUb2dnbGUoX3RvZ2dsZUVsZW1lbnQsIHtcclxuXHRcdFx0XHR0YXJnZXQ6IEtUVXRpbC5nZXRCb2R5KCksXHJcblx0XHRcdFx0dGFyZ2V0U3RhdGU6ICd0b3BiYXItbW9iaWxlLW9uJyxcclxuXHRcdFx0XHR0b2dnbGVTdGF0ZTogJ2FjdGl2ZScsXHJcblx0XHRcdH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF90b2dnbGVFbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuXHRcdFx0aWYgKCFfdG9nZ2xlRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBnZXRUb2dnbGVFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90b2dnbGVFbGVtZW50O1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dEhlYWRlclRvcGJhcjtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEhlYWRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX2VsZW1lbnRGb3JNb2JpbGU7XHJcbiAgICB2YXIgX29iamVjdDtcclxuXHJcblx0Ly8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIC8vIEdldCBIZWlnaHRcclxuICAgIHZhciBfZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmIChfZWxlbWVudCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KF9lbGVtZW50KSArIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBIZWlnaHRcclxuICAgIHZhciBfZ2V0SGVpZ2h0Rm9yTW9iaWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlaWdodDtcclxuXHJcbiAgICAgICAgaGVpZ2h0ID0gS1RVdGlsLmFjdHVhbEhlaWdodChfZWxlbWVudEZvck1vYmlsZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIE1ldGhvZHNcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogZnVuY3Rpb24oaWQsIGlkRm9yTW9iaWxlKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG4gICAgICAgICAgICBfZWxlbWVudEZvck1vYmlsZSA9IEtUVXRpbC5nZXRCeUlkKGlkRm9yTW9iaWxlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgaXNGaXhlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuaGFzQ2xhc3MoS1RVdGlsLmdldEJvZHkoKSwgJ2hlYWRlci1maXhlZCcpXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNGaXhlZEZvck1vYmlsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuaGFzQ2xhc3MoS1RVdGlsLmdldEJvZHkoKSwgJ2hlYWRlci1tb2JpbGUtZml4ZWQnKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudEZvck1vYmlsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudEZvck1vYmlsZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRIZWFkZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX29iamVjdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2dldEhlaWdodCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlaWdodEZvck1vYmlsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZ2V0SGVpZ2h0Rm9yTW9iaWxlKCk7XHJcbiAgICAgICAgfVxyXG5cdH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0SGVhZGVyO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0U3RpY2t5Q2FyZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcblx0dmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vYmplY3Q7XHJcblxyXG5cdC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgb2Zmc2V0ID0gMzAwO1xyXG5cclxuXHRcdGlmICh0eXBlb2YgS1RMYXlvdXRIZWFkZXIgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdG9mZnNldCA9IEtUTGF5b3V0SGVhZGVyLmdldEhlaWdodCgpO1xyXG5cdFx0fVxyXG5cclxuICAgICAgICBfb2JqZWN0ID0gbmV3IEtUQ2FyZChfZWxlbWVudCwge1xyXG5cdFx0XHRzdGlja3k6IHtcclxuXHRcdFx0XHRvZmZzZXQ6IG9mZnNldCxcclxuXHRcdFx0XHR6SW5kZXg6IDkwLFxyXG5cdFx0XHRcdHBvc2l0aW9uOiB7XHJcblx0XHRcdFx0XHR0b3A6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgcG9zID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0Qm9keSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKEtUVXRpbC5pc0JyZWFrcG9pbnRVcCgnbGcnKSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgS1RMYXlvdXRIZWFkZXIgIT09ICd1bmRlZmluZWQnICYmIEtUTGF5b3V0SGVhZGVyLmlzRml4ZWQoKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cG9zID0gcG9zICsgS1RMYXlvdXRIZWFkZXIuZ2V0SGVpZ2h0KCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIEtUTGF5b3V0U3ViaGVhZGVyICE9PSAndW5kZWZpbmVkJyAmJiBLVExheW91dFN1YmhlYWRlci5pc0ZpeGVkKCkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvcyA9IHBvcyArIEtUTGF5b3V0U3ViaGVhZGVyLmdldEhlaWdodCgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIEtUTGF5b3V0SGVhZGVyICE9PSAndW5kZWZpbmVkJyAmJiBLVExheW91dEhlYWRlci5pc0ZpeGVkRm9yTW9iaWxlKCkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHBvcyA9IHBvcyArIEtUTGF5b3V0SGVhZGVyLmdldEhlaWdodEZvck1vYmlsZSgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0cG9zID0gcG9zIC0gMTsgLy8gcmVtb3ZlIGhlYWRlciBib3JkZXIgd2lkdGhcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBwb3M7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0bGVmdDogZnVuY3Rpb24oY2FyZCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gS1RVdGlsLm9mZnNldChfZWxlbWVudCkubGVmdDtcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRyaWdodDogZnVuY3Rpb24oY2FyZCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgYm9keSA9IEtUVXRpbC5nZXRCb2R5KCk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgY2FyZFdpZHRoID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3dpZHRoJykpO1xyXG5cdFx0XHRcdFx0XHR2YXIgYm9keVdpZHRoID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhib2R5LCAnd2lkdGgnKSk7XHJcblx0XHRcdFx0XHRcdHZhciBjYXJkT2Zmc2V0TGVmdCA9IEtUVXRpbC5vZmZzZXQoX2VsZW1lbnQpLmxlZnQ7XHJcblxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gYm9keVdpZHRoIC0gY2FyZFdpZHRoIC0gY2FyZE9mZnNldExlZnQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRfb2JqZWN0LmluaXRTdGlja3koKTtcclxuXHJcblx0XHRLVFV0aWwuYWRkUmVzaXplSGFuZGxlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0X29iamVjdC51cGRhdGVTdGlja3koKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG5cdFx0XHRfaW5pdCgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHR1cGRhdGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRpZiAoX29iamVjdCkge1xyXG5cdFx0XHRcdF9vYmplY3QudXBkYXRlU3RpY2t5KCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFN0aWNreUNhcmQ7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRTdHJldGNoZWRDYXJkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHR2YXIgX2VsZW1lbnQ7XHJcblxyXG5cdC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcblx0dmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgc2Nyb2xsID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcuY2FyZC1zY3JvbGwnKTtcclxuXHRcdHZhciBjYXJkQm9keSA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLmNhcmQtYm9keScpO1xyXG5cdFx0dmFyIGNhcmRIZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5jYXJkLWhlYWRlcicpO1xyXG5cclxuXHRcdHZhciBoZWlnaHQgPSBLVExheW91dENvbnRlbnQuZ2V0SGVpZ2h0KCk7XHJcblxyXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChjYXJkSGVhZGVyKSk7XHJcblxyXG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ21hcmdpblRvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKSAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuXHRcdGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEJvZHksICdwYWRkaW5nVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keSwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRCb2R5LCAnbWFyZ2luVG9wJykpIC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keSwgJ21hcmdpbkJvdHRvbScpKTtcclxuXHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgLSAzO1xyXG5cclxuXHRcdEtUVXRpbC5jc3Moc2Nyb2xsLCAnaGVpZ2h0JywgaGVpZ2h0ICsgJ3B4Jyk7XHJcblx0fVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcblx0XHRcdF9pbml0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZS1jYWxjdWxhdGUgb24gd2luZG93IHJlc2l6ZVxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkUmVzaXplSGFuZGxlcihmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRfaW5pdCgpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dXBkYXRlOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0X2luaXQoKTtcclxuXHRcdH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFN0cmV0Y2hlZENhcmQ7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRTdWJoZWFkZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2dldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICBpZiAoX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gS1RVdGlsLmFjdHVhbEhlaWdodChfZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcblx0cmV0dXJuIHtcclxuXHRcdGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9LFxyXG5cclxuICAgICAgICBpc0ZpeGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5oYXNDbGFzcyhLVFV0aWwuZ2V0Qm9keSgpLCAnc3ViaGVhZGVyLWZpeGVkJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2dldEhlaWdodCgpO1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFN1YmhlYWRlcjtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtUTGF5b3V0Q2hhdCA9IGZ1bmN0aW9uICgpIHtcclxuXHQvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG5cdHZhciBfaW5pdCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcblx0XHR2YXIgc2Nyb2xsRWwgPSBLVFV0aWwuZmluZChlbGVtZW50LCAnLnNjcm9sbCcpO1xyXG5cdFx0dmFyIGNhcmRCb2R5RWwgPSBLVFV0aWwuZmluZChlbGVtZW50LCAnLmNhcmQtYm9keScpO1xyXG5cdFx0dmFyIGNhcmRIZWFkZXJFbCA9IEtUVXRpbC5maW5kKGVsZW1lbnQsICcuY2FyZC1oZWFkZXInKTtcclxuXHRcdHZhciBjYXJkRm9vdGVyRWwgPSBLVFV0aWwuZmluZChlbGVtZW50LCAnLmNhcmQtZm9vdGVyJyk7XHJcblxyXG5cdFx0aWYgKCFzY3JvbGxFbCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaW5pdGlhbGl6ZSBwZXJmZWN0IHNjcm9sbGJhcihzZWU6ICBodHRwczovL2dpdGh1Yi5jb20vdXRhdHRpL3BlcmZlY3Qtc2Nyb2xsYmFyKVxyXG5cdFx0S1RVdGlsLnNjcm9sbEluaXQoc2Nyb2xsRWwsIHtcclxuXHRcdFx0d2luZG93U2Nyb2xsOiBmYWxzZSwgLy8gYWxsb3cgYnJvd3NlciBzY3JvbGwgd2hlbiB0aGUgc2Nyb2xsIHJlYWNoZXMgdGhlIGVuZCBvZiB0aGUgc2lkZVxyXG5cdFx0XHRtb2JpbGVOYXRpdmVTY3JvbGw6IHRydWUsICAvLyBlbmFibGUgbmF0aXZlIHNjcm9sbCBmb3IgbW9iaWxlXHJcblx0XHRcdGRlc2t0b3BOYXRpdmVTY3JvbGw6IGZhbHNlLCAvLyBkaXNhYmxlIG5hdGl2ZSBzY3JvbGwgYW5kIHVzZSBjdXN0b20gc2Nyb2xsIGZvciBkZXNrdG9wXHJcblx0XHRcdHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLCAgLy8gcmVzZXQgY3NzIGhlaWdodCBvbiBzY3JvbGwgZmVhdHVyZSBkZXN0cm95ZWRcclxuXHRcdFx0aGFuZGxlV2luZG93UmVzaXplOiB0cnVlLCAvLyByZWNhbGN1bGF0ZSBoaWdodCBvbiB3aW5kb3cgcmVzaXplXHJcblx0XHRcdHJlbWVtYmVyUG9zaXRpb246IHRydWUsIC8vIHJlbWVtYmVyIHNjcm9sbCBwb3NpdGlvbiBpbiBjb29raWVcclxuXHRcdFx0aGVpZ2h0OiBmdW5jdGlvbigpIHsgIC8vIGNhbGN1bGF0ZSBoZWlnaHRcclxuXHRcdFx0XHR2YXIgaGVpZ2h0O1xyXG5cclxuXHRcdFx0XHRpZiAoS1RVdGlsLmlzQnJlYWtwb2ludERvd24oJ2xnJykpIHsgLy8gTW9iaWxlIG1vZGVcclxuXHRcdFx0XHRcdHJldHVybiBLVFV0aWwuaGFzQXR0cihzY3JvbGxFbCwgJ2RhdGEtbW9iaWxlLWhlaWdodCcpID8gcGFyc2VJbnQoS1RVdGlsLmF0dHIoc2Nyb2xsRWwsICdkYXRhLW1vYmlsZS1oZWlnaHQnKSkgOiA0MDA7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChLVFV0aWwuaXNCcmVha3BvaW50VXAoJ2xnJykgJiYgS1RVdGlsLmhhc0F0dHIoc2Nyb2xsRWwsICdkYXRhLWhlaWdodCcpKSB7IC8vIERlc2t0b3AgTW9kZVxyXG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KEtUVXRpbC5hdHRyKHNjcm9sbEVsLCAnZGF0YS1oZWlnaHQnKSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGhlaWdodCA9IEtUTGF5b3V0Q29udGVudC5nZXRIZWlnaHQoKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoc2Nyb2xsRWwpIHtcclxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhzY3JvbGxFbCwgJ21hcmdpbi10b3AnKSkgLSBwYXJzZUludChLVFV0aWwuY3NzKHNjcm9sbEVsLCAnbWFyZ2luLWJvdHRvbScpKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoY2FyZEhlYWRlckVsKSB7XHJcblx0XHRcdFx0XHRcdGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEhlYWRlckVsLCAnaGVpZ2h0JykpO1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRIZWFkZXJFbCwgJ21hcmdpbi10b3AnKSkgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRIZWFkZXJFbCwgJ21hcmdpbi1ib3R0b20nKSk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKGNhcmRCb2R5RWwpIHtcclxuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjYXJkQm9keUVsLCAncGFkZGluZy10b3AnKSkgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRCb2R5RWwsICdwYWRkaW5nLWJvdHRvbScpKTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoY2FyZEZvb3RlckVsKSB7XHJcblx0XHRcdFx0XHRcdGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY2FyZEZvb3RlckVsLCAnaGVpZ2h0JykpO1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRGb290ZXJFbCwgJ21hcmdpbi10b3AnKSkgLSBwYXJzZUludChLVFV0aWwuY3NzKGNhcmRGb290ZXJFbCwgJ21hcmdpbi1ib3R0b20nKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBSZW1vdmUgYWRkaXRpb25hbCBzcGFjZVxyXG5cdFx0XHRcdGhlaWdodCA9IGhlaWdodCAtIDI7XHJcblxyXG5cdFx0XHRcdHJldHVybiBoZWlnaHQ7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIGF0dGFjaCBldmVudHNcclxuXHRcdEtUVXRpbC5vbihlbGVtZW50LCAnLmNhcmQtZm9vdGVyIHRleHRhcmVhJywgJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdGlmIChlLmtleUNvZGUgPT0gMTMpIHtcclxuXHRcdFx0XHRfaGFuZGVNZXNzYWdpbmcoZWxlbWVudCk7XHJcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdEtUVXRpbC5vbihlbGVtZW50LCAnLmNhcmQtZm9vdGVyIC5jaGF0LXNlbmQnLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcblx0XHRcdF9oYW5kZU1lc3NhZ2luZyhlbGVtZW50KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0dmFyIF9oYW5kZU1lc3NhZ2luZyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuXHRcdHZhciBtZXNzYWdlc0VsID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJy5tZXNzYWdlcycpO1xyXG5cdFx0dmFyIHNjcm9sbEVsID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJy5zY3JvbGwnKTtcclxuICAgICAgICB2YXIgdGV4dGFyZWEgPSBLVFV0aWwuZmluZChlbGVtZW50LCAndGV4dGFyZWEnKTtcclxuXHJcbiAgICAgICAgaWYgKHRleHRhcmVhLnZhbHVlLmxlbmd0aCA9PT0gMCApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcblx0XHR2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7XHJcblx0XHRLVFV0aWwuYWRkQ2xhc3Mobm9kZSwgJ2QtZmxleCBmbGV4LWNvbHVtbiBtYi01IGFsaWduLWl0ZW1zLWVuZCcpO1xyXG5cclxuXHRcdHZhciBodG1sID0gJyc7XHJcblx0XHRodG1sICs9ICc8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPic7XHJcblx0XHRodG1sICs9ICdcdDxkaXY+JztcclxuXHRcdGh0bWwgKz0gJ1x0XHQ8c3BhbiBjbGFzcz1cInRleHQtbXV0ZWQgZm9udC1zaXplLXNtXCI+MiBIb3Vyczwvc3Bhbj4nO1xyXG5cdFx0aHRtbCArPSAnXHRcdDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJ0ZXh0LWRhcmstNzUgdGV4dC1ob3Zlci1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQgZm9udC1zaXplLWg2XCI+WW91PC9hPic7XHJcblx0XHRodG1sICs9ICdcdDwvZGl2Pic7XHJcblx0XHRodG1sICs9ICdcdDxkaXYgY2xhc3M9XCJzeW1ib2wgc3ltYm9sLWNpcmNsZSBzeW1ib2wtNDAgbWwtM1wiPic7XHJcblx0XHRodG1sICs9ICdcdFx0PGltZyBhbHQ9XCJQaWNcIiBzcmM9XCJhc3NldHMvbWVkaWEvdXNlcnMvMzAwXzEyLmpwZ1wiLz4nO1xyXG5cdFx0aHRtbCArPSAnXHQ8L2Rpdj4nO1xyXG5cdFx0aHRtbCArPSAnPC9kaXY+JztcclxuXHRcdGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJtdC0yIHJvdW5kZWQgcC01IGJnLWxpZ2h0LXByaW1hcnkgdGV4dC1kYXJrLTUwIGZvbnQtd2VpZ2h0LWJvbGQgZm9udC1zaXplLWxnIHRleHQtcmlnaHQgbWF4LXctNDAwcHhcIj4nICsgdGV4dGFyZWEudmFsdWUgKyAnPC9kaXY+JztcclxuXHJcblx0XHRLVFV0aWwuc2V0SFRNTChub2RlLCBodG1sKTtcclxuXHRcdG1lc3NhZ2VzRWwuYXBwZW5kQ2hpbGQobm9kZSk7XHJcblx0XHR0ZXh0YXJlYS52YWx1ZSA9ICcnO1xyXG5cdFx0c2Nyb2xsRWwuc2Nyb2xsVG9wID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhtZXNzYWdlc0VsLCAnaGVpZ2h0JykpO1xyXG5cclxuXHRcdHZhciBwcztcclxuXHRcdGlmIChwcyA9IEtUVXRpbC5kYXRhKHNjcm9sbEVsKS5nZXQoJ3BzJykpIHtcclxuXHRcdFx0cHMudXBkYXRlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO1xyXG5cdFx0XHRLVFV0aWwuYWRkQ2xhc3Mobm9kZSwgJ2QtZmxleCBmbGV4LWNvbHVtbiBtYi01IGFsaWduLWl0ZW1zLXN0YXJ0Jyk7XHJcblxyXG5cdFx0XHR2YXIgaHRtbCA9ICcnO1xyXG5cdFx0XHRodG1sICs9ICc8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPic7XHJcblx0XHRcdGh0bWwgKz0gJ1x0PGRpdiBjbGFzcz1cInN5bWJvbCBzeW1ib2wtY2lyY2xlIHN5bWJvbC00MCBtci0zXCI+JztcclxuXHRcdFx0aHRtbCArPSAnXHRcdDxpbWcgYWx0PVwiUGljXCIgc3JjPVwiYXNzZXRzL21lZGlhL3VzZXJzLzMwMF8xMi5qcGdcIi8+JztcclxuXHRcdFx0aHRtbCArPSAnXHQ8L2Rpdj4nO1xyXG5cdFx0XHRodG1sICs9ICdcdDxkaXY+JztcclxuXHRcdFx0aHRtbCArPSAnXHRcdDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJ0ZXh0LWRhcmstNzUgdGV4dC1ob3Zlci1wcmltYXJ5IGZvbnQtd2VpZ2h0LWJvbGQgZm9udC1zaXplLWg2XCI+TWF0dCBQZWFyczwvYT4nO1xyXG5cdFx0XHRodG1sICs9ICdcdFx0PHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkIGZvbnQtc2l6ZS1zbVwiPkp1c3Qgbm93PC9zcGFuPic7XHJcblx0XHRcdGh0bWwgKz0gJ1x0PC9kaXY+JztcclxuXHRcdFx0aHRtbCArPSAnPC9kaXY+JztcclxuXHRcdFx0aHRtbCArPSAnPGRpdiBjbGFzcz1cIm10LTIgcm91bmRlZCBwLTUgYmctbGlnaHQtc3VjY2VzcyB0ZXh0LWRhcmstNTAgZm9udC13ZWlnaHQtYm9sZCBmb250LXNpemUtbGcgdGV4dC1sZWZ0IG1heC13LTQwMHB4XCI+JztcclxuXHRcdFx0aHRtbCArPSAnUmlnaHQgYmVmb3JlIHZhY2F0aW9uIHNlYXNvbiB3ZSBoYXZlIHRoZSBuZXh0IEJpZyBEZWFsIGZvciB5b3UuJztcclxuXHRcdFx0aHRtbCArPSAnPC9kaXY+JztcclxuXHJcblx0XHRcdEtUVXRpbC5zZXRIVE1MKG5vZGUsIGh0bWwpO1xyXG5cdFx0XHRtZXNzYWdlc0VsLmFwcGVuZENoaWxkKG5vZGUpO1xyXG5cdFx0XHR0ZXh0YXJlYS52YWx1ZSA9ICcnO1xyXG5cdFx0XHRzY3JvbGxFbC5zY3JvbGxUb3AgPSBwYXJzZUludChLVFV0aWwuY3NzKG1lc3NhZ2VzRWwsICdoZWlnaHQnKSk7XHJcblxyXG5cdFx0XHR2YXIgcHM7XHJcblx0XHRcdGlmIChwcyA9IEtUVXRpbC5kYXRhKHNjcm9sbEVsKS5nZXQoJ3BzJykpIHtcclxuXHRcdFx0XHRwcy51cGRhdGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgMjAwMCk7XHJcblx0fVxyXG5cclxuXHQvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0Ly8gaW5pdCBtb2RhbCBjaGF0IGV4YW1wbGVcclxuXHRcdFx0X2luaXQoS1RVdGlsLmdldEJ5SWQoJ2t0X2NoYXRfbW9kYWwnKSk7XHJcblxyXG5cdFx0XHQvLyB0cmlnZ2VyIGNsaWNrIHRvIHNob3cgcG9wdXAgbW9kYWwgY2hhdCBvbiBwYWdlIGxvYWRcclxuXHRcdFx0aWYgKGVuY29kZVVSSSh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpID09ICdrZWVudGhlbWVzLmNvbScgfHwgZW5jb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSkgPT0gJ3d3dy5rZWVudGhlbWVzLmNvbScpIHtcclxuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0ICAgICAgICAgICAgaWYgKCFLVENvb2tpZS5nZXRDb29raWUoJ2t0X2FwcF9jaGF0X3Nob3duJykpIHtcclxuXHRcdCAgICAgICAgICAgICAgICB2YXIgZXhwaXJlcyA9IG5ldyBEYXRlKG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgNjAgKiA2MCAqIDEwMDApOyAvLyBleHBpcmUgaW4gNjAgbWludXRlcyBmcm9tIG5vd1xyXG5cclxuXHRcdFx0XHRcdFx0S1RDb29raWUuc2V0Q29va2llKCdrdF9hcHBfY2hhdF9zaG93bicsIDEsIHsgZXhwaXJlczogZXhwaXJlcyB9KTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChLVFV0aWwuZ2V0QnlJZCgna3RfYXBwX2NoYXRfbGF1bmNoX2J0bicpKSB7XHJcblx0XHRcdFx0XHRcdFx0S1RVdGlsLmdldEJ5SWQoJ2t0X2FwcF9jaGF0X2xhdW5jaF9idG4nKS5jbGljaygpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHQgICAgICAgICAgICB9XHJcblx0XHQgICAgICAgIH0sIDIwMDApO1xyXG5cdCAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldHVwOiBmdW5jdGlvbihlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIF9pbml0KGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHR9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dENoYXQ7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXREZW1vUGFuZWwgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX2VsZW1lbnQsIHtcclxuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcclxuICAgICAgICAgICAgYmFzZUNsYXNzOiAnb2ZmY2FudmFzJyxcclxuICAgICAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxyXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3RfZGVtb19wYW5lbF9jbG9zZScsXHJcbiAgICAgICAgICAgIHRvZ2dsZUJ5OiAna3RfZGVtb19wYW5lbF90b2dnbGUnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBoZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtY29udGVudCcpO1xyXG4gICAgICAgIHZhciB3cmFwcGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLXdyYXBwZXInKTtcclxuICAgICAgICB2YXIgZm9vdGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWZvb3RlcicpO1xyXG5cclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdCh3cmFwcGVyLCB7XHJcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHdyYXBwZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHdyYXBwZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyh3cmFwcGVyLCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChmb290ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGZvb3RlcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoZm9vdGVyLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoZm9vdGVyLCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygb2ZmY2FudmFzICE9PSAndW5kZWZpbmVkJyAmJiBvZmZjYW52YXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIG9mZmNhbnZhcy5vbignaGlkZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4cGlyZXMgPSBuZXcgRGF0ZShuZXcgRGF0ZSgpLmdldFRpbWUoKSArIDYwICogNjAgKiAxMDAwKTsgLy8gZXhwaXJlIGluIDYwIG1pbnV0ZXMgZnJvbSBub3dcclxuICAgICAgICAgICAgICAgIEtUQ29va2llLnNldENvb2tpZSgna3RfZGVtb19wYW5lbF9zaG93bicsIDEsIHtleHBpcmVzOiBleHBpcmVzfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3JlbWluZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghKGVuY29kZVVSSSh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpID09ICdrZWVudGhlbWVzLmNvbScgfHwgZW5jb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSkgPT0gJ3d3dy5rZWVudGhlbWVzLmNvbScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghS1RDb29raWUuZ2V0Q29va2llKCdrdF9kZW1vX3BhbmVsX3Nob3duJykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBleHBpcmVzID0gbmV3IERhdGUobmV3IERhdGUoKS5nZXRUaW1lKCkgKyAxNSAqIDYwICogMTAwMCk7IC8vIGV4cGlyZSBpbiAxNSBtaW51dGVzIGZyb20gbm93XHJcbiAgICAgICAgICAgICAgICBLVENvb2tpZS5zZXRDb29raWUoJ2t0X2RlbW9fcGFuZWxfc2hvd24nLCAxLCB7IGV4cGlyZXM6IGV4cGlyZXMgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIF9vZmZjYW52YXNPYmplY3QgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX29mZmNhbnZhc09iamVjdC5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCA0MDAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtaW5kXHJcbiAgICAgICAgICAgIF9yZW1pbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dERlbW9QYW5lbDtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dEV4YW1wbGVzID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgdmFyIGluaXREZWZhdWx0TW9kZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50O1xyXG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudHMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmV4YW1wbGU6bm90KC5leGFtcGxlLWNvbXBhY3QpOm5vdCguZXhhbXBsZS1ob3Zlcik6bm90KC5leGFtcGxlLWJhc2ljKScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgZXhhbXBsZSA9IGVsZW1lbnRzW2ldO1xyXG4gICAgICAgICAgICB2YXIgY29weSA9IEtUVXRpbC5maW5kKGV4YW1wbGUsICcuZXhhbXBsZS1jb3B5Jyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2xpcGJvYXJkID0gbmV3IENsaXBib2FyZEpTKGNvcHksIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldDogZnVuY3Rpb24odHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBleGFtcGxlID0gdHJpZ2dlci5jbG9zZXN0KCcuZXhhbXBsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IEtUVXRpbC5maW5kKGV4YW1wbGUsICcuZXhhbXBsZS1jb2RlIC50YWItcGFuZS5hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbCA9IEtUVXRpbC5maW5kKGV4YW1wbGUsICcuZXhhbXBsZS1jb2RlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY2xpcGJvYXJkLm9uKCdzdWNjZXNzJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGUudHJpZ2dlciwgJ2V4YW1wbGUtY29waWVkJyk7XHJcbiAgICAgICAgICAgICAgICBlLmNsZWFyU2VsZWN0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoZS50cmlnZ2VyLCAnZXhhbXBsZS1jb3BpZWQnKTtcclxuICAgICAgICAgICAgICAgIH0sIDIwMDApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluaXRDb21wYWN0TW9kZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgZXhhbXBsZSxjb2RlLHRvZ2dsZSxjb3B5LCBjbGlwYm9hcmQ7XHJcbiAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxlbWVudDtcclxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnRzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZXhhbXBsZS5leGFtcGxlLWNvbXBhY3QnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIGV4YW1wbGUgPSBlbGVtZW50c1tpXTtcclxuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IEtUVXRpbC5maW5kKGV4YW1wbGUsICcuZXhhbXBsZS10b2dnbGUnKTtcclxuICAgICAgICAgICAgdmFyIGNvcHkgPSBLVFV0aWwuZmluZChleGFtcGxlLCAnLmV4YW1wbGUtY29weScpO1xyXG5cclxuICAgICAgICAgICAgLy8gSGFuZGxlIHRvZ2dsZVxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQodG9nZ2xlLCAnY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBleGFtcGxlID0gdGhpcy5jbG9zZXN0KCcuZXhhbXBsZScpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSAgS1RVdGlsLmZpbmQoZXhhbXBsZSwgJy5leGFtcGxlLWNvZGUnKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aGUgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChLVFV0aWwuaGFzQ2xhc3ModGhpcywgJ2V4YW1wbGUtdG9nZ2xlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNsaWRlVXAoY29kZSwgMzAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKHRoZSwgJ2V4YW1wbGUtdG9nZ2xlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoY29kZSwgJ2V4YW1wbGUtY29kZS1vbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuaGlkZShjb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGNvZGUsICdleGFtcGxlLWNvZGUtb24nKTtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3ModGhpcywgJ2V4YW1wbGUtdG9nZ2xlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zbGlkZURvd24oY29kZSwgMzAwLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNob3coY29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gSGFuZGxlIGNvcHlcclxuICAgICAgICAgICAgdmFyIGNsaXBib2FyZCA9IG5ldyBDbGlwYm9hcmRKUyhjb3B5LCB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGZ1bmN0aW9uKHRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXhhbXBsZSA9IHRyaWdnZXIuY2xvc2VzdCgnLmV4YW1wbGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBLVFV0aWwuZmluZChleGFtcGxlLCAnLmV4YW1wbGUtY29kZSAudGFiLXBhbmUuYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSBLVFV0aWwuZmluZChleGFtcGxlLCAnLmV4YW1wbGUtY29kZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNsaXBib2FyZC5vbignc3VjY2VzcycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlLnRyaWdnZXIsICdleGFtcGxlLWNvcGllZCcpO1xyXG4gICAgICAgICAgICAgICAgZS5jbGVhclNlbGVjdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGUudHJpZ2dlciwgJ2V4YW1wbGUtY29waWVkJyk7XHJcbiAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgICAgICAgICBpbml0RGVmYXVsdE1vZGUoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGluaXRDb21wYWN0TW9kZShlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRFeGFtcGxlcztcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFF1aWNrQWN0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX29mZmNhbnZhc09iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlYWRlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy1oZWFkZXInKTtcclxuICAgICAgICB2YXIgY29udGVudCA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy1jb250ZW50Jyk7XHJcblxyXG4gICAgICAgIF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX2VsZW1lbnQsIHtcclxuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcclxuICAgICAgICAgICAgYmFzZUNsYXNzOiAnb2ZmY2FudmFzJyxcclxuICAgICAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxyXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3RfcXVpY2tfYWN0aW9uc19jbG9zZScsXHJcbiAgICAgICAgICAgIHRvZ2dsZUJ5OiAna3RfcXVpY2tfYWN0aW9uc190b2dnbGUnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KGNvbnRlbnQsIHtcclxuICAgICAgICAgICAgZGlzYWJsZUZvck1vYmlsZTogdHJ1ZSxcclxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXHJcbiAgICAgICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChoZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGhlYWRlcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZGVyLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZGVyLCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKTtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFF1aWNrQWN0aW9ucztcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFF1aWNrQ2FydFBhbmVsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuICAgIHZhciBfZWxlbWVudDtcclxuICAgIHZhciBfb2ZmY2FudmFzT2JqZWN0O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX2NhcnRfY2xvc2UnLFxyXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X3F1aWNrX2NhcnRfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuICAgICAgICB2YXIgd3JhcHBlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy13cmFwcGVyJyk7XHJcbiAgICAgICAgdmFyIGZvb3RlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy1mb290ZXInKTtcclxuXHJcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQod3JhcHBlciwge1xyXG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5hY3R1YWxIZWlnaHQoaGVhZGVyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh3cmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyh3cmFwcGVyLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3Mod3JhcHBlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChmb290ZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvb3RlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvb3RlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKTtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja0NhcnRQYW5lbDtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFF1aWNrTm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX2VsZW1lbnQ7XHJcbiAgICB2YXIgX29mZmNhbnZhc09iamVjdDtcclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgdmFyIF9pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGhlYWRlciA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy1oZWFkZXInKTtcclxuICAgICAgICB2YXIgY29udGVudCA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLm9mZmNhbnZhcy1jb250ZW50Jyk7XHJcblxyXG4gICAgICAgIF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX2VsZW1lbnQsIHtcclxuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcclxuICAgICAgICAgICAgYmFzZUNsYXNzOiAnb2ZmY2FudmFzJyxcclxuICAgICAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxyXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3RfcXVpY2tfbm90aWZpY2F0aW9uc19jbG9zZScsXHJcbiAgICAgICAgICAgIHRvZ2dsZUJ5OiAna3RfcXVpY2tfbm90aWZpY2F0aW9uc190b2dnbGUnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KGNvbnRlbnQsIHtcclxuICAgICAgICAgICAgZGlzYWJsZUZvck1vYmlsZTogdHJ1ZSxcclxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXHJcbiAgICAgICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChoZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGhlYWRlcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZGVyLCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZGVyLCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKTtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplXHJcbiAgICAgICAgICAgIF9pbml0KCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0bW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFF1aWNrTm90aWZpY2F0aW9ucztcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBLVExheW91dFF1aWNrUGFuZWwgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcbiAgICB2YXIgX25vdGlmaWNhdGlvbnNFbGVtZW50O1xyXG4gICAgdmFyIF9sb2dzRWxlbWVudDtcclxuICAgIHZhciBfc2V0dGluZ3NFbGVtZW50O1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX2dldENvbnRlbnRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaGVpZ2h0O1xyXG5cclxuICAgICAgICB2YXIgaGVhZGVyID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWhlYWRlcicpO1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcub2ZmY2FudmFzLWNvbnRlbnQnKTtcclxuXHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XHJcblxyXG4gICAgICAgIGlmIChoZWFkZXIpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkZXIsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZGVyLCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhjb250ZW50LCAnbWFyZ2luVG9wJykpO1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ1RvcCcpKTtcclxuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ0JvdHRvbScpKTtcclxuXHJcbiAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX3BhbmVsX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19wYW5lbF90b2dnbGUnXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0Tm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KF9ub3RpZmljYXRpb25zRWxlbWVudCwge1xyXG4gICAgICAgICAgICBtb2JpbGVOYXRpdmVTY3JvbGw6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX2dldENvbnRlbnRIZWlnaHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdExvZ3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChfbG9nc0VsZW1lbnQsIHtcclxuICAgICAgICAgICAgbW9iaWxlTmF0aXZlU2Nyb2xsOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9nZXRDb250ZW50SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRTZXR0aW5ncyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KF9zZXR0aW5nc0VsZW1lbnQsIHtcclxuICAgICAgICAgICAgbW9iaWxlTmF0aXZlU2Nyb2xsOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcclxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9nZXRDb250ZW50SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX3VwZGF0ZVNjcm9sbGJhcnMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKF9lbGVtZW50KS5maW5kKCdhW2RhdGEtdG9nZ2xlPVwidGFiXCJdJykub24oJ3Nob3duLmJzLnRhYicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxVcGRhdGUoX25vdGlmaWNhdGlvbnNFbGVtZW50KTtcclxuICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFVwZGF0ZShfbG9nc0VsZW1lbnQpO1xyXG4gICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVXBkYXRlKF9zZXR0aW5nc0VsZW1lbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1YmxpYyBtZXRob2RzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgIF9lbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoaWQpO1xyXG4gICAgICAgICAgICBfbm90aWZpY2F0aW9uc0VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZCgna3RfcXVpY2tfcGFuZWxfbm90aWZpY2F0aW9ucycpO1xyXG4gICAgICAgICAgICBfbG9nc0VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZCgna3RfcXVpY2tfcGFuZWxfbG9ncycpO1xyXG4gICAgICAgICAgICBfc2V0dGluZ3NFbGVtZW50ID0gS1RVdGlsLmdldEJ5SWQoJ2t0X3F1aWNrX3BhbmVsX3NldHRpbmdzJyk7XHJcblxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG4gICAgICAgICAgICBfaW5pdE5vdGlmaWNhdGlvbnMoKTtcclxuICAgICAgICAgICAgX2luaXRMb2dzKCk7XHJcbiAgICAgICAgICAgIF9pbml0U2V0dGluZ3MoKTtcclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVTY3JvbGxiYXJzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja1BhbmVsO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIEtUTGF5b3V0UXVpY2tTZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtY29udGVudCcpO1xyXG4gICAgICAgIHZhciBmb3JtID0gS1RVdGlsLmZpbmQoX2VsZW1lbnQsICcucXVpY2stc2VhcmNoLWZvcm0nKTtcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IEtUVXRpbC5maW5kKF9lbGVtZW50LCAnLnF1aWNrLXNlYXJjaC13cmFwcGVyJyk7XHJcblxyXG4gICAgICAgIF9vZmZjYW52YXNPYmplY3QgPSBuZXcgS1RPZmZjYW52YXMoX2VsZW1lbnQsIHtcclxuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcclxuICAgICAgICAgICAgYmFzZUNsYXNzOiAnb2ZmY2FudmFzJyxcclxuICAgICAgICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxyXG4gICAgICAgICAgICBjbG9zZUJ5OiAna3RfcXVpY2tfc2VhcmNoX2Nsb3NlJyxcclxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdrdF9xdWlja19zZWFyY2hfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChyZXN1bHRzLCB7XHJcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGZvcm0pKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGZvcm0sICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhmb3JtLCAnbWFyZ2luQm90dG9tJykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHJlc3VsdHMsICdtYXJnaW5Ub3AnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhyZXN1bHRzLCAnbWFyZ2luQm90dG9tJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoX2VsZW1lbnQsICdwYWRkaW5nVG9wJykpO1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdCb3R0b20nKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gMjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX2VsZW1lbnQgPSBLVFV0aWwuZ2V0QnlJZChpZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemVcclxuICAgICAgICAgICAgX2luaXQoKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9lbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0oKTtcclxuXHJcbi8vIFdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRtb2R1bGUuZXhwb3J0cyA9IEtUTGF5b3V0UXVpY2tTZWFyY2g7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRRdWlja1VzZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vZmZjYW52YXNPYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBoZWFkZXIgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtaGVhZGVyJyk7XHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBLVFV0aWwuZmluZChfZWxlbWVudCwgJy5vZmZjYW52YXMtY29udGVudCcpO1xyXG5cclxuICAgICAgICBfb2ZmY2FudmFzT2JqZWN0ID0gbmV3IEtUT2ZmY2FudmFzKF9lbGVtZW50LCB7XHJcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcycsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgY2xvc2VCeTogJ2t0X3F1aWNrX3VzZXJfY2xvc2UnLFxyXG4gICAgICAgICAgICB0b2dnbGVCeTogJ2t0X3F1aWNrX3VzZXJfdG9nZ2xlJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChjb250ZW50LCB7XHJcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxyXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmdldFZpZXdQb3J0KCkuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkZXIpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGhlYWRlciwgJ21hcmdpbkJvdHRvbScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoY29udGVudCwgJ21hcmdpblRvcCcpKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKGNvbnRlbnQsICdtYXJnaW5Cb3R0b20nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhfZWxlbWVudCwgJ3BhZGRpbmdUb3AnKSk7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKF9lbGVtZW50LCAncGFkZGluZ0JvdHRvbScpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSAyO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRRdWlja1VzZXI7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgS1RMYXlvdXRTY3JvbGx0b3AgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgdmFyIF9lbGVtZW50O1xyXG4gICAgdmFyIF9vYmplY3Q7XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBmdW5jdGlvbnNcclxuICAgIHZhciBfaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9vYmplY3QgPSBuZXcgS1RTY3JvbGx0b3AoX2VsZW1lbnQsIHtcclxuICAgICAgICAgIG9mZnNldDogMzAwLFxyXG4gICAgICAgICAgc3BlZWQ6IDYwMCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG5cdHJldHVybiB7XHJcblx0XHRpbml0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICBfZWxlbWVudCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZVxyXG4gICAgICAgICAgICBfaW5pdCgpO1xyXG5cdFx0fSxcclxuXHJcbiAgICAgICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZWxlbWVudDtcclxuICAgICAgICB9XHJcblx0fTtcclxufSgpO1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG5cdG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRTY3JvbGx0b3A7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vXHJcbi8vIEhhbmRsZSBVc2VyIFF1aWNrIFNlYXJjaCBGb3IgRHJvcGRvd24sIElubGluZSBhbmQgT2ZmY2FudmFzIFNlYXJjaCBQYW5lbHNcclxuLy9cclxuXHJcbnZhciBLVExheW91dFNlYXJjaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgX3RhcmdldDtcclxuICAgIHZhciBfZm9ybTtcclxuICAgIHZhciBfaW5wdXQ7XHJcbiAgICB2YXIgX2Nsb3NlSWNvbjtcclxuICAgIHZhciBfcmVzdWx0V3JhcHBlcjtcclxuICAgIHZhciBfcmVzdWx0RHJvcGRvd247XHJcbiAgICB2YXIgX3Jlc3VsdERyb3Bkb3duVG9nZ2xlO1xyXG4gICAgdmFyIF9jbG9zZUljb25Db250YWluZXI7XHJcbiAgICB2YXIgX2lucHV0R3JvdXA7XHJcbiAgICB2YXIgX3F1ZXJ5ID0gJyc7XHJcblxyXG4gICAgdmFyIF9oYXNSZXN1bHQgPSBmYWxzZTtcclxuICAgIHZhciBfdGltZW91dCA9IGZhbHNlO1xyXG4gICAgdmFyIF9pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcclxuICAgIHZhciBfcmVxdWVzdFRpbWVvdXQgPSAyMDA7IC8vIGFqYXggcmVxdWVzdCBmaXJlIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICB2YXIgX3NwaW5uZXJDbGFzcyA9ICdzcGlubmVyIHNwaW5uZXItc20gc3Bpbm5lci1wcmltYXJ5JztcclxuICAgIHZhciBfcmVzdWx0Q2xhc3MgPSAncXVpY2stc2VhcmNoLWhhcy1yZXN1bHQnO1xyXG4gICAgdmFyIF9taW5MZW5ndGggPSAyO1xyXG5cclxuICAgIC8vIFByaXZhdGUgZnVuY3Rpb25zXHJcbiAgICB2YXIgX3Nob3dQcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9pc1Byb2Nlc3NpbmcgPSB0cnVlO1xyXG4gICAgICAgIEtUVXRpbC5hZGRDbGFzcyhfY2xvc2VJY29uQ29udGFpbmVyLCBfc3Bpbm5lckNsYXNzKTtcclxuXHJcbiAgICAgICAgaWYgKF9jbG9zZUljb24pIHtcclxuICAgICAgICAgICAgS1RVdGlsLmhpZGUoX2Nsb3NlSWNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaGlkZVByb2dyZXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgX2lzUHJvY2Vzc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhfY2xvc2VJY29uQ29udGFpbmVyLCBfc3Bpbm5lckNsYXNzKTtcclxuXHJcbiAgICAgICAgaWYgKF9jbG9zZUljb24pIHtcclxuICAgICAgICAgICAgaWYgKF9pbnB1dC52YWx1ZS5sZW5ndGggPCBfbWluTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuaGlkZShfY2xvc2VJY29uKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5zaG93KF9jbG9zZUljb24sICdmbGV4Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9zaG93RHJvcGRvd24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoX3Jlc3VsdERyb3Bkb3duVG9nZ2xlICYmICFLVFV0aWwuaGFzQ2xhc3MoX3Jlc3VsdERyb3Bkb3duLCAnc2hvdycpKSB7XHJcbiAgICAgICAgICAgICQoX3Jlc3VsdERyb3Bkb3duVG9nZ2xlKS5kcm9wZG93bigndG9nZ2xlJyk7XHJcbiAgICAgICAgICAgICQoX3Jlc3VsdERyb3Bkb3duVG9nZ2xlKS5kcm9wZG93bigndXBkYXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaGlkZURyb3Bkb3duID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKF9yZXN1bHREcm9wZG93blRvZ2dsZSAmJiBLVFV0aWwuaGFzQ2xhc3MoX3Jlc3VsdERyb3Bkb3duLCAnc2hvdycpKSB7XHJcbiAgICAgICAgICAgICQoX3Jlc3VsdERyb3Bkb3duVG9nZ2xlKS5kcm9wZG93bigndG9nZ2xlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfcHJvY2Vzc1NlYXJjaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChfaGFzUmVzdWx0ICYmIF9xdWVyeSA9PT0gX2lucHV0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgIF9oaWRlUHJvZ3Jlc3MoKTtcclxuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKF90YXJnZXQsIF9yZXN1bHRDbGFzcyk7XHJcbiAgICAgICAgICAgIF9zaG93RHJvcGRvd24oKTtcclxuICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFVwZGF0ZShfcmVzdWx0V3JhcHBlcik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfcXVlcnkgPSBfaW5wdXQudmFsdWU7XHJcblxyXG4gICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhfdGFyZ2V0LCBfcmVzdWx0Q2xhc3MpO1xyXG4gICAgICAgIF9zaG93UHJvZ3Jlc3MoKTtcclxuICAgICAgICBfaGlkZURyb3Bkb3duKCk7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IEhPU1RfVVJMICsgJycsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IF9xdWVyeVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBfaGFzUmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBfaGlkZVByb2dyZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKF90YXJnZXQsIF9yZXN1bHRDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNldEhUTUwoX3Jlc3VsdFdyYXBwZXIsIHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Nob3dEcm9wZG93bigpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxVcGRhdGUoX3Jlc3VsdFdyYXBwZXIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBfaGFzUmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hpZGVQcm9ncmVzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhfdGFyZ2V0LCBfcmVzdWx0Q2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zZXRIVE1MKF9yZXN1bHRXcmFwcGVyLCAnPHNwYW4gY2xhc3M9XCJmb250LXdlaWdodC1ib2xkIHRleHQtbXV0ZWRcIj5Db25uZWN0aW9uIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLi48L2Rpdj4nKTtcclxuICAgICAgICAgICAgICAgICAgICBfc2hvd0Ryb3Bkb3duKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFVwZGF0ZShfcmVzdWx0V3JhcHBlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaGFuZGxlQ2FuY2VsID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIF9pbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgIF9xdWVyeSA9ICcnO1xyXG4gICAgICAgIF9oYXNSZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICBLVFV0aWwuaGlkZShfY2xvc2VJY29uKTtcclxuICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoX3RhcmdldCwgX3Jlc3VsdENsYXNzKTtcclxuICAgICAgICBfaGlkZURyb3Bkb3duKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9oYW5kbGVTZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoX2lucHV0LnZhbHVlLmxlbmd0aCA8IF9taW5MZW5ndGgpIHtcclxuICAgICAgICAgICAgX2hpZGVQcm9ncmVzcygpO1xyXG4gICAgICAgICAgICBfaGlkZURyb3Bkb3duKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoX2lzUHJvY2Vzc2luZyA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfdGltZW91dCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RpbWVvdXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBfcHJvY2Vzc1NlYXJjaCgpO1xyXG4gICAgICAgIH0sIF9yZXF1ZXN0VGltZW91dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgX3RhcmdldCA9IEtUVXRpbC5nZXRCeUlkKGlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghX3RhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZm9ybSA9IEtUVXRpbC5maW5kKF90YXJnZXQsICcucXVpY2stc2VhcmNoLWZvcm0nKTtcclxuICAgICAgICAgICAgX2lucHV0ID0gS1RVdGlsLmZpbmQoX3RhcmdldCwgJy5mb3JtLWNvbnRyb2wnKTtcclxuICAgICAgICAgICAgX2Nsb3NlSWNvbiA9IEtUVXRpbC5maW5kKF90YXJnZXQsICcucXVpY2stc2VhcmNoLWNsb3NlJyk7XHJcbiAgICAgICAgICAgIF9yZXN1bHRXcmFwcGVyID0gS1RVdGlsLmZpbmQoX3RhcmdldCwgJy5xdWljay1zZWFyY2gtd3JhcHBlcicpO1xyXG4gICAgICAgICAgICBfcmVzdWx0RHJvcGRvd24gPSBLVFV0aWwuZmluZChfdGFyZ2V0LCAnLmRyb3Bkb3duLW1lbnUnKTtcclxuICAgICAgICAgICAgX3Jlc3VsdERyb3Bkb3duVG9nZ2xlID0gS1RVdGlsLmZpbmQoX3RhcmdldCwgJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyk7XHJcbiAgICAgICAgICAgIF9pbnB1dEdyb3VwID0gS1RVdGlsLmZpbmQoX3RhcmdldCwgJy5pbnB1dC1ncm91cCcpO1xyXG4gICAgICAgICAgICBfY2xvc2VJY29uQ29udGFpbmVyID0gS1RVdGlsLmZpbmQoX3RhcmdldCwgJy5pbnB1dC1ncm91cCAuaW5wdXQtZ3JvdXAtYXBwZW5kJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBBdHRhY2ggaW5wdXQga2V5dXAgaGFuZGxlclxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQoX2lucHV0LCAna2V5dXAnLCBfaGFuZGxlU2VhcmNoKTtcclxuICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KF9pbnB1dCwgJ2ZvY3VzJywgX2hhbmRsZVNlYXJjaCk7XHJcblxyXG4gICAgICAgICAgICAvLyBQcmV2ZW50IGVudGVyIGNsaWNrXHJcbiAgICAgICAgICAgIF9mb3JtLm9ua2V5cHJlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gZS5jaGFyQ29kZSB8fCBlLmtleUNvZGUgfHwgMDtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gMTMpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChfY2xvc2VJY29uLCAnY2xpY2snLCBfaGFuZGxlQ2FuY2VsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59O1xyXG5cclxuLy8gV2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVExheW91dFNlYXJjaDtcclxufVxyXG5cclxudmFyIEtUTGF5b3V0U2VhcmNoSW5saW5lID0gS1RMYXlvdXRTZWFyY2g7XHJcbnZhciBLVExheW91dFNlYXJjaE9mZmNhbnZhcyA9IEtUTGF5b3V0U2VhcmNoO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIEluaXRpYWxpemF0aW9uXHJcbktUVXRpbC5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIExheW91dCBCYXNlIFBhcnRpYWxzKG1hbmRhdG9yeSBmb3IgY29yZSBsYXlvdXQpLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvLyBJbml0IERlc2t0b3AgJiBNb2JpbGUgSGVhZGVyc1xyXG4gICAgS1RMYXlvdXRIZWFkZXIuaW5pdCgna3RfaGVhZGVyJywgJ2t0X2hlYWRlcl9tb2JpbGUnKTtcclxuXHJcbiAgICAvLyBJbml0IEhlYWRlciBNZW51XHJcbiAgICBLVExheW91dEhlYWRlck1lbnUuaW5pdCgna3RfaGVhZGVyX21lbnUnLCAna3RfaGVhZGVyX21lbnVfd3JhcHBlcicpO1xyXG5cclxuICAgIC8vIEluaXQgSGVhZGVyIFRvcGJhciBGb3IgTW9iaWxlIE1vZGVcclxuICAgIEtUTGF5b3V0SGVhZGVyVG9wYmFyLmluaXQoJ2t0X2hlYWRlcl9tb2JpbGVfdG9wYmFyX3RvZ2dsZScpO1xyXG5cclxuICAgIC8vIEluaXQgQnJhbmQgUGFuZWwgRm9yIExvZ29cclxuICAgIEtUTGF5b3V0QnJhbmQuaW5pdCgna3RfYnJhbmQnKTtcclxuXHJcbiAgICAvLyBJbml0IEFzaWRlXHJcbiAgICBLVExheW91dEFzaWRlLmluaXQoJ2t0X2FzaWRlJyk7XHJcblxyXG4gICAgLy8gSW5pdCBBc2lkZSBNZW51IFRvZ2dsZVxyXG4gICAgS1RMYXlvdXRBc2lkZVRvZ2dsZS5pbml0KCdrdF9hc2lkZV90b2dnbGUnKTtcclxuXHJcbiAgICAvLyBJbml0IEFzaWRlIE1lbnVcclxuICAgIEtUTGF5b3V0QXNpZGVNZW51LmluaXQoJ2t0X2FzaWRlX21lbnUnKTtcclxuXHJcbiAgICAvLyBJbml0IFN1YmhlYWRlclxyXG4gICAgS1RMYXlvdXRTdWJoZWFkZXIuaW5pdCgna3Rfc3ViaGVhZGVyJyk7XHJcblxyXG4gICAgLy8gSW5pdCBDb250ZW50XHJcbiAgICBLVExheW91dENvbnRlbnQuaW5pdCgna3RfY29udGVudCcpO1xyXG5cclxuICAgIC8vIEluaXQgRm9vdGVyXHJcbiAgICBLVExheW91dEZvb3Rlci5pbml0KCdrdF9mb290ZXInKTtcclxuXHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gTGF5b3V0IEV4dGVuZGVkIFBhcnRpYWxzKG9wdGlvbmFsIHRvIHVzZSkvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIC8vIEluaXQgU2Nyb2xsdG9wXHJcbiAgICBLVExheW91dFNjcm9sbHRvcC5pbml0KCdrdF9zY3JvbGx0b3AnKTtcclxuXHJcbiAgICAvLyBJbml0IFN0aWNreSBDYXJkXHJcbiAgICBLVExheW91dFN0aWNreUNhcmQuaW5pdCgna3RfcGFnZV9zdGlja3lfY2FyZCcpO1xyXG5cclxuICAgIC8vIEluaXQgU3RyZXRjaGVkIENhcmRcclxuICAgIEtUTGF5b3V0U3RyZXRjaGVkQ2FyZC5pbml0KCdrdF9wYWdlX3N0cmV0Y2hlZF9jYXJkJyk7XHJcblxyXG4gICAgLy8gSW5pdCBDb2RlIEhpZ2hsaWdodGVyICYgUHJldmlldyBCbG9ja3ModXNlZCB0byBkZW1vbnN0cmF0ZSB0aGUgdGhlbWUgZmVhdHVyZXMpXHJcblx0S1RMYXlvdXRFeGFtcGxlcy5pbml0KCk7XHJcblxyXG4gICAgLy8gSW5pdCBEZW1vIFNlbGVjdGlvbiBQYW5lbFxyXG5cdEtUTGF5b3V0RGVtb1BhbmVsLmluaXQoJ2t0X2RlbW9fcGFuZWwnKTtcclxuXHJcbiAgICAvLyBJbml0IENoYXQgQXBwKHF1aWNrIG1vZGFsIGNoYXQpXHJcbiAgICBLVExheW91dENoYXQuaW5pdCgpO1xyXG5cclxuICAgIC8vIEluaXQgUXVpY2sgQWN0aW9ucyBPZmZjYW52YXMgUGFuZWxcclxuICAgIEtUTGF5b3V0UXVpY2tBY3Rpb25zLmluaXQoJ2t0X3F1aWNrX2FjdGlvbnMnKTtcclxuXHJcbiAgICAvLyBJbml0IFF1aWNrIE5vdGlmaWNhdGlvbnMgT2ZmY2FudmFzIFBhbmVsXHJcbiAgICBLVExheW91dFF1aWNrTm90aWZpY2F0aW9ucy5pbml0KCdrdF9xdWlja19ub3RpZmljYXRpb25zJyk7XHJcblxyXG4gICAgLy8gSW5pdCBRdWljayBPZmZjYW52YXMgUGFuZWxcclxuICAgIEtUTGF5b3V0UXVpY2tQYW5lbC5pbml0KCdrdF9xdWlja19wYW5lbCcpO1xyXG5cclxuICAgIC8vIEluaXQgUXVpY2sgVXNlciBQYW5lbFxyXG4gICAgS1RMYXlvdXRRdWlja1VzZXIuaW5pdCgna3RfcXVpY2tfdXNlcicpO1xyXG5cclxuICAgIC8vIEluaXQgUXVpY2sgU2VhcmNoIFBhbmVsXHJcbiAgICBLVExheW91dFF1aWNrU2VhcmNoLmluaXQoJ2t0X3F1aWNrX3NlYXJjaCcpO1xyXG5cclxuICAgIC8vIEluaXQgUXVpY2sgQ2FydCBQYW5lbFxyXG4gICAgS1RMYXlvdXRRdWlja0NhcnRQYW5lbC5pbml0KCdrdF9xdWlja19jYXJ0Jyk7XHJcblxyXG4gICAgLy8gSW5pdCBTZWFyY2ggRm9yIFF1aWNrIFNlYXJjaCBEcm9wZG93blxyXG4gICAgS1RMYXlvdXRTZWFyY2goKS5pbml0KCdrdF9xdWlja19zZWFyY2hfZHJvcGRvd24nKTtcclxuXHJcbiAgICAvLyBJbml0IFNlYXJjaCBGb3IgUXVpY2sgU2VhcmNoIE9mZmNhbnZhcyBQYW5lbFxyXG4gICAgS1RMYXlvdXRTZWFyY2hPZmZjYW52YXMoKS5pbml0KCdrdF9xdWlja19zZWFyY2hfb2ZmY2FudmFzJyk7XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9